ARM GAS  /tmp/ccQqslCK.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"system_stm32f7xx.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.SystemInit,"ax",%progbits
  17              		.align	1
  18              		.global	SystemInit
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	SystemInit:
  26              	.LFB141:
  27              		.file 1 "Src/system_stm32f7xx.c"
   1:Src/system_stm32f7xx.c **** /**
   2:Src/system_stm32f7xx.c ****   ******************************************************************************
   3:Src/system_stm32f7xx.c ****   * @file    system_stm32f7xx.c
   4:Src/system_stm32f7xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f7xx.c ****   * @brief   CMSIS Cortex-M7 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f7xx.c ****   *
   7:Src/system_stm32f7xx.c ****   *   This file provides two functions and one global variable to be called from 
   8:Src/system_stm32f7xx.c ****   *   user application:
   9:Src/system_stm32f7xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Src/system_stm32f7xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32f7xx.c ****   *                      the "startup_stm32f7xx.s" file.
  12:Src/system_stm32f7xx.c ****   *
  13:Src/system_stm32f7xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32f7xx.c ****   *                                  by the user application to setup the SysTick 
  15:Src/system_stm32f7xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32f7xx.c ****   *                                     
  17:Src/system_stm32f7xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32f7xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32f7xx.c ****   *                                 during program execution.
  20:Src/system_stm32f7xx.c ****   *
  21:Src/system_stm32f7xx.c ****   *
  22:Src/system_stm32f7xx.c ****   ******************************************************************************
  23:Src/system_stm32f7xx.c ****   * @attention
  24:Src/system_stm32f7xx.c ****   *
  25:Src/system_stm32f7xx.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  26:Src/system_stm32f7xx.c ****   *
  27:Src/system_stm32f7xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  28:Src/system_stm32f7xx.c ****   * are permitted provided that the following conditions are met:
  29:Src/system_stm32f7xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  30:Src/system_stm32f7xx.c ****   *      this list of conditions and the following disclaimer.
  31:Src/system_stm32f7xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
ARM GAS  /tmp/ccQqslCK.s 			page 2


  32:Src/system_stm32f7xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  33:Src/system_stm32f7xx.c ****   *      and/or other materials provided with the distribution.
  34:Src/system_stm32f7xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  35:Src/system_stm32f7xx.c ****   *      may be used to endorse or promote products derived from this software
  36:Src/system_stm32f7xx.c ****   *      without specific prior written permission.
  37:Src/system_stm32f7xx.c ****   *
  38:Src/system_stm32f7xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  39:Src/system_stm32f7xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  40:Src/system_stm32f7xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  41:Src/system_stm32f7xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  42:Src/system_stm32f7xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  43:Src/system_stm32f7xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  44:Src/system_stm32f7xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  45:Src/system_stm32f7xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  46:Src/system_stm32f7xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  47:Src/system_stm32f7xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  48:Src/system_stm32f7xx.c ****   *
  49:Src/system_stm32f7xx.c ****   ******************************************************************************
  50:Src/system_stm32f7xx.c ****   */
  51:Src/system_stm32f7xx.c **** 
  52:Src/system_stm32f7xx.c **** /** @addtogroup CMSIS
  53:Src/system_stm32f7xx.c ****   * @{
  54:Src/system_stm32f7xx.c ****   */
  55:Src/system_stm32f7xx.c **** 
  56:Src/system_stm32f7xx.c **** /** @addtogroup stm32f7xx_system
  57:Src/system_stm32f7xx.c ****   * @{
  58:Src/system_stm32f7xx.c ****   */  
  59:Src/system_stm32f7xx.c ****   
  60:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Includes
  61:Src/system_stm32f7xx.c ****   * @{
  62:Src/system_stm32f7xx.c ****   */
  63:Src/system_stm32f7xx.c **** 
  64:Src/system_stm32f7xx.c **** #include "stm32f7xx.h"
  65:Src/system_stm32f7xx.c **** 
  66:Src/system_stm32f7xx.c **** #if !defined  (HSE_VALUE) 
  67:Src/system_stm32f7xx.c ****   #define HSE_VALUE    ((uint32_t)25000000) /*!< Default value of the External oscillator in Hz */
  68:Src/system_stm32f7xx.c **** #endif /* HSE_VALUE */
  69:Src/system_stm32f7xx.c **** 
  70:Src/system_stm32f7xx.c **** #if !defined  (HSI_VALUE)
  71:Src/system_stm32f7xx.c ****   #define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
  72:Src/system_stm32f7xx.c **** #endif /* HSI_VALUE */
  73:Src/system_stm32f7xx.c **** 
  74:Src/system_stm32f7xx.c **** /**
  75:Src/system_stm32f7xx.c ****   * @}
  76:Src/system_stm32f7xx.c ****   */
  77:Src/system_stm32f7xx.c **** 
  78:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_TypesDefinitions
  79:Src/system_stm32f7xx.c ****   * @{
  80:Src/system_stm32f7xx.c ****   */
  81:Src/system_stm32f7xx.c **** 
  82:Src/system_stm32f7xx.c **** /**
  83:Src/system_stm32f7xx.c ****   * @}
  84:Src/system_stm32f7xx.c ****   */
  85:Src/system_stm32f7xx.c **** 
  86:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Defines
  87:Src/system_stm32f7xx.c ****   * @{
  88:Src/system_stm32f7xx.c ****   */
ARM GAS  /tmp/ccQqslCK.s 			page 3


  89:Src/system_stm32f7xx.c **** 
  90:Src/system_stm32f7xx.c **** /************************* Miscellaneous Configuration ************************/
  91:Src/system_stm32f7xx.c **** 
  92:Src/system_stm32f7xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
  93:Src/system_stm32f7xx.c ****      Internal SRAM. */
  94:Src/system_stm32f7xx.c **** /* #define VECT_TAB_SRAM */
  95:Src/system_stm32f7xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
  96:Src/system_stm32f7xx.c ****                                    This value must be a multiple of 0x200. */
  97:Src/system_stm32f7xx.c **** /******************************************************************************/
  98:Src/system_stm32f7xx.c **** 
  99:Src/system_stm32f7xx.c **** /**
 100:Src/system_stm32f7xx.c ****   * @}
 101:Src/system_stm32f7xx.c ****   */
 102:Src/system_stm32f7xx.c **** 
 103:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Macros
 104:Src/system_stm32f7xx.c ****   * @{
 105:Src/system_stm32f7xx.c ****   */
 106:Src/system_stm32f7xx.c **** 
 107:Src/system_stm32f7xx.c **** /**
 108:Src/system_stm32f7xx.c ****   * @}
 109:Src/system_stm32f7xx.c ****   */
 110:Src/system_stm32f7xx.c **** 
 111:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Variables
 112:Src/system_stm32f7xx.c ****   * @{
 113:Src/system_stm32f7xx.c ****   */
 114:Src/system_stm32f7xx.c **** 
 115:Src/system_stm32f7xx.c ****   /* This variable is updated in three ways:
 116:Src/system_stm32f7xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 117:Src/system_stm32f7xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 118:Src/system_stm32f7xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
 119:Src/system_stm32f7xx.c ****          Note: If you use this function to configure the system clock; then there
 120:Src/system_stm32f7xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 121:Src/system_stm32f7xx.c ****                variable is updated automatically.
 122:Src/system_stm32f7xx.c ****   */
 123:Src/system_stm32f7xx.c ****   uint32_t SystemCoreClock = 16000000;
 124:Src/system_stm32f7xx.c ****   const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 125:Src/system_stm32f7xx.c ****   const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 126:Src/system_stm32f7xx.c **** 
 127:Src/system_stm32f7xx.c **** /**
 128:Src/system_stm32f7xx.c ****   * @}
 129:Src/system_stm32f7xx.c ****   */
 130:Src/system_stm32f7xx.c **** 
 131:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_FunctionPrototypes
 132:Src/system_stm32f7xx.c ****   * @{
 133:Src/system_stm32f7xx.c ****   */
 134:Src/system_stm32f7xx.c **** 
 135:Src/system_stm32f7xx.c **** /**
 136:Src/system_stm32f7xx.c ****   * @}
 137:Src/system_stm32f7xx.c ****   */
 138:Src/system_stm32f7xx.c **** 
 139:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Functions
 140:Src/system_stm32f7xx.c ****   * @{
 141:Src/system_stm32f7xx.c ****   */
 142:Src/system_stm32f7xx.c **** 
 143:Src/system_stm32f7xx.c **** /**
 144:Src/system_stm32f7xx.c ****   * @brief  Setup the microcontroller system
 145:Src/system_stm32f7xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
ARM GAS  /tmp/ccQqslCK.s 			page 4


 146:Src/system_stm32f7xx.c ****   *         SystemFrequency variable.
 147:Src/system_stm32f7xx.c ****   * @param  None
 148:Src/system_stm32f7xx.c ****   * @retval None
 149:Src/system_stm32f7xx.c ****   */
 150:Src/system_stm32f7xx.c **** void SystemInit(void)
 151:Src/system_stm32f7xx.c **** {
  28              		.loc 1 151 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 10B4     		push	{r4}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 4, -4
 152:Src/system_stm32f7xx.c ****   /* FPU settings ------------------------------------------------------------*/
 153:Src/system_stm32f7xx.c ****   #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 154:Src/system_stm32f7xx.c ****     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  37              		.loc 1 154 5 view .LVU1
  38              		.loc 1 154 16 is_stmt 0 view .LVU2
  39 0002 0F4A     		ldr	r2, .L3
  40 0004 D2F88830 		ldr	r3, [r2, #136]
  41 0008 43F47003 		orr	r3, r3, #15728640
  42 000c C2F88830 		str	r3, [r2, #136]
 155:Src/system_stm32f7xx.c ****   #endif
 156:Src/system_stm32f7xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 157:Src/system_stm32f7xx.c ****   /* Set HSION bit */
 158:Src/system_stm32f7xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  43              		.loc 1 158 3 is_stmt 1 view .LVU3
  44              		.loc 1 158 11 is_stmt 0 view .LVU4
  45 0010 0C4B     		ldr	r3, .L3+4
  46 0012 1968     		ldr	r1, [r3]
  47 0014 41F00101 		orr	r1, r1, #1
  48 0018 1960     		str	r1, [r3]
 159:Src/system_stm32f7xx.c **** 
 160:Src/system_stm32f7xx.c ****   /* Reset CFGR register */
 161:Src/system_stm32f7xx.c ****   RCC->CFGR = 0x00000000;
  49              		.loc 1 161 3 is_stmt 1 view .LVU5
  50              		.loc 1 161 13 is_stmt 0 view .LVU6
  51 001a 0020     		movs	r0, #0
  52 001c 9860     		str	r0, [r3, #8]
 162:Src/system_stm32f7xx.c **** 
 163:Src/system_stm32f7xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 164:Src/system_stm32f7xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  53              		.loc 1 164 3 is_stmt 1 view .LVU7
  54              		.loc 1 164 11 is_stmt 0 view .LVU8
  55 001e 1C68     		ldr	r4, [r3]
  56 0020 0949     		ldr	r1, .L3+8
  57 0022 2140     		ands	r1, r1, r4
  58 0024 1960     		str	r1, [r3]
 165:Src/system_stm32f7xx.c **** 
 166:Src/system_stm32f7xx.c ****   /* Reset PLLCFGR register */
 167:Src/system_stm32f7xx.c ****   RCC->PLLCFGR = 0x24003010;
  59              		.loc 1 167 3 is_stmt 1 view .LVU9
  60              		.loc 1 167 16 is_stmt 0 view .LVU10
  61 0026 0949     		ldr	r1, .L3+12
  62 0028 5960     		str	r1, [r3, #4]
ARM GAS  /tmp/ccQqslCK.s 			page 5


 168:Src/system_stm32f7xx.c **** 
 169:Src/system_stm32f7xx.c ****   /* Reset HSEBYP bit */
 170:Src/system_stm32f7xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  63              		.loc 1 170 3 is_stmt 1 view .LVU11
  64              		.loc 1 170 11 is_stmt 0 view .LVU12
  65 002a 1968     		ldr	r1, [r3]
  66 002c 21F48021 		bic	r1, r1, #262144
  67 0030 1960     		str	r1, [r3]
 171:Src/system_stm32f7xx.c **** 
 172:Src/system_stm32f7xx.c ****   /* Disable all interrupts */
 173:Src/system_stm32f7xx.c ****   RCC->CIR = 0x00000000;
  68              		.loc 1 173 3 is_stmt 1 view .LVU13
  69              		.loc 1 173 12 is_stmt 0 view .LVU14
  70 0032 D860     		str	r0, [r3, #12]
 174:Src/system_stm32f7xx.c **** 
 175:Src/system_stm32f7xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 176:Src/system_stm32f7xx.c **** #ifdef VECT_TAB_SRAM
 177:Src/system_stm32f7xx.c ****   SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 178:Src/system_stm32f7xx.c **** #else
 179:Src/system_stm32f7xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  71              		.loc 1 179 3 is_stmt 1 view .LVU15
  72              		.loc 1 179 13 is_stmt 0 view .LVU16
  73 0034 4FF00063 		mov	r3, #134217728
  74 0038 9360     		str	r3, [r2, #8]
 180:Src/system_stm32f7xx.c **** #endif
 181:Src/system_stm32f7xx.c **** }
  75              		.loc 1 181 1 view .LVU17
  76 003a 5DF8044B 		ldr	r4, [sp], #4
  77              	.LCFI1:
  78              		.cfi_restore 4
  79              		.cfi_def_cfa_offset 0
  80 003e 7047     		bx	lr
  81              	.L4:
  82              		.align	2
  83              	.L3:
  84 0040 00ED00E0 		.word	-536810240
  85 0044 00380240 		.word	1073887232
  86 0048 FFFFF6FE 		.word	-17367041
  87 004c 10300024 		.word	603992080
  88              		.cfi_endproc
  89              	.LFE141:
  91              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  92              		.align	1
  93              		.global	SystemCoreClockUpdate
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv5-d16
  99              	SystemCoreClockUpdate:
 100              	.LFB142:
 182:Src/system_stm32f7xx.c **** 
 183:Src/system_stm32f7xx.c **** /**
 184:Src/system_stm32f7xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 185:Src/system_stm32f7xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 186:Src/system_stm32f7xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 187:Src/system_stm32f7xx.c ****   *         other parameters.
 188:Src/system_stm32f7xx.c ****   *           
ARM GAS  /tmp/ccQqslCK.s 			page 6


 189:Src/system_stm32f7xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 190:Src/system_stm32f7xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 191:Src/system_stm32f7xx.c ****   *         based on this variable will be incorrect.         
 192:Src/system_stm32f7xx.c ****   *     
 193:Src/system_stm32f7xx.c ****   * @note   - The system frequency computed by this function is not the real 
 194:Src/system_stm32f7xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 195:Src/system_stm32f7xx.c ****   *           constant and the selected clock source:
 196:Src/system_stm32f7xx.c ****   *             
 197:Src/system_stm32f7xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 198:Src/system_stm32f7xx.c ****   *                                              
 199:Src/system_stm32f7xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 200:Src/system_stm32f7xx.c ****   *                          
 201:Src/system_stm32f7xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 202:Src/system_stm32f7xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 203:Src/system_stm32f7xx.c ****   *         
 204:Src/system_stm32f7xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 205:Src/system_stm32f7xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 206:Src/system_stm32f7xx.c ****   *             in voltage and temperature.   
 207:Src/system_stm32f7xx.c ****   *    
 208:Src/system_stm32f7xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 209:Src/system_stm32f7xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 210:Src/system_stm32f7xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 211:Src/system_stm32f7xx.c ****   *              have wrong result.
 212:Src/system_stm32f7xx.c ****   *                
 213:Src/system_stm32f7xx.c ****   *         - The result of this function could be not correct when using fractional
 214:Src/system_stm32f7xx.c ****   *           value for HSE crystal.
 215:Src/system_stm32f7xx.c ****   *     
 216:Src/system_stm32f7xx.c ****   * @param  None
 217:Src/system_stm32f7xx.c ****   * @retval None
 218:Src/system_stm32f7xx.c ****   */
 219:Src/system_stm32f7xx.c **** void SystemCoreClockUpdate(void)
 220:Src/system_stm32f7xx.c **** {
 101              		.loc 1 220 1 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 221:Src/system_stm32f7xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 106              		.loc 1 221 3 view .LVU19
 107              	.LVL0:
 222:Src/system_stm32f7xx.c ****   
 223:Src/system_stm32f7xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 224:Src/system_stm32f7xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 108              		.loc 1 224 3 view .LVU20
 109              		.loc 1 224 12 is_stmt 0 view .LVU21
 110 0000 224B     		ldr	r3, .L13
 111 0002 9B68     		ldr	r3, [r3, #8]
 112              		.loc 1 224 7 view .LVU22
 113 0004 03F00C03 		and	r3, r3, #12
 114              	.LVL1:
 225:Src/system_stm32f7xx.c **** 
 226:Src/system_stm32f7xx.c ****   switch (tmp)
 115              		.loc 1 226 3 is_stmt 1 view .LVU23
 116 0008 042B     		cmp	r3, #4
 117 000a 14D0     		beq	.L6
 118 000c 082B     		cmp	r3, #8
 119 000e 16D0     		beq	.L7
ARM GAS  /tmp/ccQqslCK.s 			page 7


 120 0010 1BB1     		cbz	r3, .L12
 227:Src/system_stm32f7xx.c ****   {
 228:Src/system_stm32f7xx.c ****     case 0x00:  /* HSI used as system clock source */
 229:Src/system_stm32f7xx.c ****       SystemCoreClock = HSI_VALUE;
 230:Src/system_stm32f7xx.c ****       break;
 231:Src/system_stm32f7xx.c ****     case 0x04:  /* HSE used as system clock source */
 232:Src/system_stm32f7xx.c ****       SystemCoreClock = HSE_VALUE;
 233:Src/system_stm32f7xx.c ****       break;
 234:Src/system_stm32f7xx.c ****     case 0x08:  /* PLL used as system clock source */
 235:Src/system_stm32f7xx.c **** 
 236:Src/system_stm32f7xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 237:Src/system_stm32f7xx.c ****          SYSCLK = PLL_VCO / PLL_P
 238:Src/system_stm32f7xx.c ****          */    
 239:Src/system_stm32f7xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 240:Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 241:Src/system_stm32f7xx.c ****       
 242:Src/system_stm32f7xx.c ****       if (pllsource != 0)
 243:Src/system_stm32f7xx.c ****       {
 244:Src/system_stm32f7xx.c ****         /* HSE used as PLL clock source */
 245:Src/system_stm32f7xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 246:Src/system_stm32f7xx.c ****       }
 247:Src/system_stm32f7xx.c ****       else
 248:Src/system_stm32f7xx.c ****       {
 249:Src/system_stm32f7xx.c ****         /* HSI used as PLL clock source */
 250:Src/system_stm32f7xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 251:Src/system_stm32f7xx.c ****       }
 252:Src/system_stm32f7xx.c **** 
 253:Src/system_stm32f7xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 254:Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 255:Src/system_stm32f7xx.c ****       break;
 256:Src/system_stm32f7xx.c ****     default:
 257:Src/system_stm32f7xx.c ****       SystemCoreClock = HSI_VALUE;
 121              		.loc 1 257 7 view .LVU24
 122              		.loc 1 257 23 is_stmt 0 view .LVU25
 123 0012 1F4B     		ldr	r3, .L13+4
 124              	.LVL2:
 125              		.loc 1 257 23 view .LVU26
 126 0014 1F4A     		ldr	r2, .L13+8
 127 0016 1A60     		str	r2, [r3]
 258:Src/system_stm32f7xx.c ****       break;
 128              		.loc 1 258 7 is_stmt 1 view .LVU27
 129 0018 02E0     		b	.L9
 130              	.LVL3:
 131              	.L12:
 229:Src/system_stm32f7xx.c ****       break;
 132              		.loc 1 229 7 view .LVU28
 229:Src/system_stm32f7xx.c ****       break;
 133              		.loc 1 229 23 is_stmt 0 view .LVU29
 134 001a 1D4B     		ldr	r3, .L13+4
 135              	.LVL4:
 229:Src/system_stm32f7xx.c ****       break;
 136              		.loc 1 229 23 view .LVU30
 137 001c 1D4A     		ldr	r2, .L13+8
 138 001e 1A60     		str	r2, [r3]
 230:Src/system_stm32f7xx.c ****     case 0x04:  /* HSE used as system clock source */
 139              		.loc 1 230 7 is_stmt 1 view .LVU31
 140              	.LVL5:
ARM GAS  /tmp/ccQqslCK.s 			page 8


 141              	.L9:
 259:Src/system_stm32f7xx.c ****   }
 260:Src/system_stm32f7xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 261:Src/system_stm32f7xx.c ****   /* Get HCLK prescaler */
 262:Src/system_stm32f7xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 142              		.loc 1 262 3 view .LVU32
 143              		.loc 1 262 28 is_stmt 0 view .LVU33
 144 0020 1A4B     		ldr	r3, .L13
 145 0022 9B68     		ldr	r3, [r3, #8]
 146              		.loc 1 262 52 view .LVU34
 147 0024 C3F30313 		ubfx	r3, r3, #4, #4
 148              		.loc 1 262 22 view .LVU35
 149 0028 1B4A     		ldr	r2, .L13+12
 150 002a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 151              	.LVL6:
 263:Src/system_stm32f7xx.c ****   /* HCLK frequency */
 264:Src/system_stm32f7xx.c ****   SystemCoreClock >>= tmp;
 152              		.loc 1 264 3 is_stmt 1 view .LVU36
 153              		.loc 1 264 19 is_stmt 0 view .LVU37
 154 002c 184A     		ldr	r2, .L13+4
 155 002e 1368     		ldr	r3, [r2]
 156 0030 CB40     		lsrs	r3, r3, r1
 157 0032 1360     		str	r3, [r2]
 265:Src/system_stm32f7xx.c **** }
 158              		.loc 1 265 1 view .LVU38
 159 0034 7047     		bx	lr
 160              	.LVL7:
 161              	.L6:
 232:Src/system_stm32f7xx.c ****       break;
 162              		.loc 1 232 7 is_stmt 1 view .LVU39
 232:Src/system_stm32f7xx.c ****       break;
 163              		.loc 1 232 23 is_stmt 0 view .LVU40
 164 0036 164B     		ldr	r3, .L13+4
 165              	.LVL8:
 232:Src/system_stm32f7xx.c ****       break;
 166              		.loc 1 232 23 view .LVU41
 167 0038 184A     		ldr	r2, .L13+16
 168 003a 1A60     		str	r2, [r3]
 233:Src/system_stm32f7xx.c ****     case 0x08:  /* PLL used as system clock source */
 169              		.loc 1 233 7 is_stmt 1 view .LVU42
 170 003c F0E7     		b	.L9
 171              	.LVL9:
 172              	.L7:
 239:Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 173              		.loc 1 239 7 view .LVU43
 239:Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 174              		.loc 1 239 23 is_stmt 0 view .LVU44
 175 003e 134B     		ldr	r3, .L13
 176              	.LVL10:
 239:Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 177              		.loc 1 239 23 view .LVU45
 178 0040 5A68     		ldr	r2, [r3, #4]
 179              	.LVL11:
 240:Src/system_stm32f7xx.c ****       
 180              		.loc 1 240 7 is_stmt 1 view .LVU46
 240:Src/system_stm32f7xx.c ****       
 181              		.loc 1 240 17 is_stmt 0 view .LVU47
ARM GAS  /tmp/ccQqslCK.s 			page 9


 182 0042 5B68     		ldr	r3, [r3, #4]
 240:Src/system_stm32f7xx.c ****       
 183              		.loc 1 240 12 view .LVU48
 184 0044 03F03F03 		and	r3, r3, #63
 185              	.LVL12:
 242:Src/system_stm32f7xx.c ****       {
 186              		.loc 1 242 7 is_stmt 1 view .LVU49
 242:Src/system_stm32f7xx.c ****       {
 187              		.loc 1 242 10 is_stmt 0 view .LVU50
 188 0048 12F4800F 		tst	r2, #4194304
 189 004c 13D0     		beq	.L10
 245:Src/system_stm32f7xx.c ****       }
 190              		.loc 1 245 9 is_stmt 1 view .LVU51
 245:Src/system_stm32f7xx.c ****       }
 191              		.loc 1 245 29 is_stmt 0 view .LVU52
 192 004e 134A     		ldr	r2, .L13+16
 193              	.LVL13:
 245:Src/system_stm32f7xx.c ****       }
 194              		.loc 1 245 29 view .LVU53
 195 0050 B2FBF3F2 		udiv	r2, r2, r3
 245:Src/system_stm32f7xx.c ****       }
 196              		.loc 1 245 44 view .LVU54
 197 0054 0D4B     		ldr	r3, .L13
 198              	.LVL14:
 245:Src/system_stm32f7xx.c ****       }
 199              		.loc 1 245 44 view .LVU55
 200 0056 5B68     		ldr	r3, [r3, #4]
 245:Src/system_stm32f7xx.c ****       }
 201              		.loc 1 245 74 view .LVU56
 202 0058 C3F38813 		ubfx	r3, r3, #6, #9
 245:Src/system_stm32f7xx.c ****       }
 203              		.loc 1 245 16 view .LVU57
 204 005c 03FB02F3 		mul	r3, r3, r2
 205              	.LVL15:
 206              	.L11:
 253:Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 207              		.loc 1 253 7 is_stmt 1 view .LVU58
 253:Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 208              		.loc 1 253 20 is_stmt 0 view .LVU59
 209 0060 0A4A     		ldr	r2, .L13
 210 0062 5268     		ldr	r2, [r2, #4]
 253:Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 211              		.loc 1 253 50 view .LVU60
 212 0064 C2F30142 		ubfx	r2, r2, #16, #2
 253:Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 213              		.loc 1 253 56 view .LVU61
 214 0068 0132     		adds	r2, r2, #1
 253:Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 215              		.loc 1 253 12 view .LVU62
 216 006a 5200     		lsls	r2, r2, #1
 217              	.LVL16:
 254:Src/system_stm32f7xx.c ****       break;
 218              		.loc 1 254 7 is_stmt 1 view .LVU63
 254:Src/system_stm32f7xx.c ****       break;
 219              		.loc 1 254 31 is_stmt 0 view .LVU64
 220 006c B3FBF2F3 		udiv	r3, r3, r2
 221              	.LVL17:
ARM GAS  /tmp/ccQqslCK.s 			page 10


 254:Src/system_stm32f7xx.c ****       break;
 222              		.loc 1 254 23 view .LVU65
 223 0070 074A     		ldr	r2, .L13+4
 224              	.LVL18:
 254:Src/system_stm32f7xx.c ****       break;
 225              		.loc 1 254 23 view .LVU66
 226 0072 1360     		str	r3, [r2]
 255:Src/system_stm32f7xx.c ****     default:
 227              		.loc 1 255 7 is_stmt 1 view .LVU67
 228 0074 D4E7     		b	.L9
 229              	.LVL19:
 230              	.L10:
 250:Src/system_stm32f7xx.c ****       }
 231              		.loc 1 250 9 view .LVU68
 250:Src/system_stm32f7xx.c ****       }
 232              		.loc 1 250 29 is_stmt 0 view .LVU69
 233 0076 074A     		ldr	r2, .L13+8
 234              	.LVL20:
 250:Src/system_stm32f7xx.c ****       }
 235              		.loc 1 250 29 view .LVU70
 236 0078 B2FBF3F2 		udiv	r2, r2, r3
 250:Src/system_stm32f7xx.c ****       }
 237              		.loc 1 250 44 view .LVU71
 238 007c 034B     		ldr	r3, .L13
 239              	.LVL21:
 250:Src/system_stm32f7xx.c ****       }
 240              		.loc 1 250 44 view .LVU72
 241 007e 5B68     		ldr	r3, [r3, #4]
 250:Src/system_stm32f7xx.c ****       }
 242              		.loc 1 250 74 view .LVU73
 243 0080 C3F38813 		ubfx	r3, r3, #6, #9
 250:Src/system_stm32f7xx.c ****       }
 244              		.loc 1 250 16 view .LVU74
 245 0084 03FB02F3 		mul	r3, r3, r2
 246              	.LVL22:
 250:Src/system_stm32f7xx.c ****       }
 247              		.loc 1 250 16 view .LVU75
 248 0088 EAE7     		b	.L11
 249              	.L14:
 250 008a 00BF     		.align	2
 251              	.L13:
 252 008c 00380240 		.word	1073887232
 253 0090 00000000 		.word	.LANCHOR0
 254 0094 0024F400 		.word	16000000
 255 0098 00000000 		.word	.LANCHOR1
 256 009c 80BA8C01 		.word	26000000
 257              		.cfi_endproc
 258              	.LFE142:
 260              		.global	APBPrescTable
 261              		.global	AHBPrescTable
 262              		.global	SystemCoreClock
 263              		.section	.data.SystemCoreClock,"aw"
 264              		.align	2
 265              		.set	.LANCHOR0,. + 0
 268              	SystemCoreClock:
 269 0000 0024F400 		.word	16000000
 270              		.section	.rodata.AHBPrescTable,"a"
ARM GAS  /tmp/ccQqslCK.s 			page 11


 271              		.align	2
 272              		.set	.LANCHOR1,. + 0
 275              	AHBPrescTable:
 276 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\001\002\003\004\006"
 276      00000000 
 276      01020304 
 276      06
 277 000d 070809   		.ascii	"\007\010\011"
 278              		.section	.rodata.APBPrescTable,"a"
 279              		.align	2
 282              	APBPrescTable:
 283 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004"
 283      01020304 
 284              		.text
 285              	.Letext0:
 286              		.file 2 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/machine/_default_types.h"
 287              		.file 3 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/sys/_stdint.h"
 288              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 289              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 290              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f765xx.h"
 291              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccQqslCK.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f7xx.c
     /tmp/ccQqslCK.s:17     .text.SystemInit:0000000000000000 $t
     /tmp/ccQqslCK.s:25     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccQqslCK.s:84     .text.SystemInit:0000000000000040 $d
     /tmp/ccQqslCK.s:92     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccQqslCK.s:99     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccQqslCK.s:252    .text.SystemCoreClockUpdate:000000000000008c $d
     /tmp/ccQqslCK.s:282    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccQqslCK.s:275    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccQqslCK.s:268    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccQqslCK.s:264    .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccQqslCK.s:271    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccQqslCK.s:279    .rodata.APBPrescTable:0000000000000000 $d

NO UNDEFINED SYMBOLS
