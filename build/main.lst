ARM GAS  /tmp/ccrJKlhm.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_SDMMC2_SD_Init,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	MX_SDMMC2_SD_Init:
  25              	.LFB158:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "fatfs.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include "pid_controller.h"
  28:Src/main.c    **** #include "ltc.h"
  29:Src/main.c    **** #include "stdio.h"
  30:Src/main.c    **** #include "string.h"
  31:Src/main.c    **** #include "can.h"
  32:Src/main.c    **** #include "current_sensor.h"
ARM GAS  /tmp/ccrJKlhm.s 			page 2


  33:Src/main.c    **** #include "pwm.h"
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /*
  40:Src/main.c    **** -------------------------------------------------------------------------------
  41:Src/main.c    **** Radiator1 -> TIM4 CH3
  42:Src/main.c    **** Radiator2 -> TIM4 CH4
  43:Src/main.c    **** 
  44:Src/main.c    **** FAN1      -> TIM2 CH2
  45:Src/main.c    **** FAN2      -> TIM2 CH1
  46:Src/main.c    **** FAN3      -> TIM3 CH1
  47:Src/main.c    **** FAN5      -> TIM2 CH4
  48:Src/main.c    **** FAN6      -> TIM2 CH3
  49:Src/main.c    **** 
  50:Src/main.c    **** PUMP1     -> TIM4 CH2
  51:Src/main.c    **** PUMP2     -> TIM4 CH1
  52:Src/main.c    **** 
  53:Src/main.c    **** */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* ----------------------------------- ERRORS ---------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** int BMS_ON_REQUEST = 1;
  58:Src/main.c    **** int BMS_IS_ON = 0;
  59:Src/main.c    **** 
  60:Src/main.c    **** int UNDER_VOLTAGE = 0;
  61:Src/main.c    **** int OVER_TEMPERATURE = 0;
  62:Src/main.c    **** 
  63:Src/main.c    **** /* ---------------- ID ------------------- */
  64:Src/main.c    **** #define BMS_LV_ASK_ID 0xFF     // Foo Fighters
  65:Src/main.c    **** #define STEER_ASK_ID 0xAF      // Steering wheel
  66:Src/main.c    **** #define INV_LEFT_ASK_ID 0x181  // Inverter left
  67:Src/main.c    **** #define INV_RIGHT_ASK_ID 0x182 // Inverter right
  68:Src/main.c    **** #define ACC_TEMP_ASK_ID 0xAA   // Accumulator temperatures
  69:Src/main.c    **** #define ECU_ASK_ID 0xF8        // ECU initial check ID
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PTD */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  74:Src/main.c    **** /* USER CODE BEGIN PD */
  75:Src/main.c    **** /* USER CODE END PD */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  78:Src/main.c    **** /* USER CODE BEGIN PM */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE END PM */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  83:Src/main.c    **** ADC_HandleTypeDef hadc1;
  84:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  85:Src/main.c    **** 
  86:Src/main.c    **** CAN_HandleTypeDef hcan1;
  87:Src/main.c    **** CAN_HandleTypeDef hcan3;
  88:Src/main.c    **** 
  89:Src/main.c    **** SD_HandleTypeDef hsd2;
ARM GAS  /tmp/ccrJKlhm.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** SPI_HandleTypeDef hspi2;
  92:Src/main.c    **** 
  93:Src/main.c    **** TIM_HandleTypeDef htim2;
  94:Src/main.c    **** TIM_HandleTypeDef htim3;
  95:Src/main.c    **** TIM_HandleTypeDef htim4;
  96:Src/main.c    **** TIM_HandleTypeDef htim5;
  97:Src/main.c    **** TIM_HandleTypeDef htim8;
  98:Src/main.c    **** 
  99:Src/main.c    **** UART_HandleTypeDef huart4;
 100:Src/main.c    **** 
 101:Src/main.c    **** /* USER CODE BEGIN PV */
 102:Src/main.c    **** const bool DEBUG_CAN_SEND = false;
 103:Src/main.c    **** const bool DEBUG_VALUES = true;
 104:Src/main.c    **** const bool DEBUG_SENSOR_CURRENT = false;
 105:Src/main.c    **** const bool DEBUG_LTC = false;
 106:Src/main.c    **** 
 107:Src/main.c    **** const uint32_t ERR_LED_BLINK_error_MSEC = 100;
 108:Src/main.c    **** const uint32_t ERR_LED_BLINK_overT_ON_MSEC = 800;
 109:Src/main.c    **** const uint32_t ERR_LED_BLINK_overT_OFF_MSEC = 200;
 110:Src/main.c    **** const uint32_t ERR_LED_BLINK_underV_ON_MSEC = 100;
 111:Src/main.c    **** const uint32_t ERR_LED_BLINK_underV_OFF_MSEC = 900;
 112:Src/main.c    **** 
 113:Src/main.c    **** int prev_toggle_msec = 0;
 114:Src/main.c    **** 
 115:Src/main.c    **** // cooling system PWM
 116:Src/main.c    **** pwm_struct lv_pwm;
 117:Src/main.c    **** pwm_struct hv_pwm;
 118:Src/main.c    **** pwm_struct pump_pwm;
 119:Src/main.c    **** 
 120:Src/main.c    **** // PID
 121:Src/main.c    **** PIDControl lv_pid;
 122:Src/main.c    **** PIDControl hv_pid;
 123:Src/main.c    **** PIDControl pump_pid;
 124:Src/main.c    **** 
 125:Src/main.c    **** // Temperatures
 126:Src/main.c    **** temperatures_struct lv_temp;
 127:Src/main.c    **** temperatures_struct hv_temp;
 128:Src/main.c    **** temperatures_struct pump_temp;
 129:Src/main.c    **** 
 130:Src/main.c    **** // LTC
 131:Src/main.c    **** ltc_struct ltc;
 132:Src/main.c    **** extern canStruct can1, can3;
 133:Src/main.c    **** 
 134:Src/main.c    **** // ERROR LED
 135:Src/main.c    **** LED_STATE led_state;
 136:Src/main.c    **** 
 137:Src/main.c    **** char txt[100];
 138:Src/main.c    **** ADC_ChannelConfTypeDef UserAdcConfig = {0};
 139:Src/main.c    **** uint8_t cont_ms, cont_dec, cont_sec, cont_min, cont_hours;
 140:Src/main.c    **** 
 141:Src/main.c    **** uint32_t over_temp_start_msec, under_volt_start_msec;
 142:Src/main.c    **** 
 143:Src/main.c    **** /* USER CODE END PV */
 144:Src/main.c    **** 
 145:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 146:Src/main.c    **** void SystemClock_Config(void);
ARM GAS  /tmp/ccrJKlhm.s 			page 4


 147:Src/main.c    **** static void MX_GPIO_Init(void);
 148:Src/main.c    **** static void MX_DMA_Init(void);
 149:Src/main.c    **** static void MX_ADC1_Init(void);
 150:Src/main.c    **** static void MX_CAN1_Init(void);
 151:Src/main.c    **** static void MX_CAN3_Init(void);
 152:Src/main.c    **** static void MX_SDMMC2_SD_Init(void);
 153:Src/main.c    **** static void MX_SPI2_Init(void);
 154:Src/main.c    **** static void MX_TIM2_Init(void);
 155:Src/main.c    **** static void MX_TIM3_Init(void);
 156:Src/main.c    **** static void MX_TIM4_Init(void);
 157:Src/main.c    **** static void MX_TIM8_Init(void);
 158:Src/main.c    **** static void MX_UART4_Init(void);
 159:Src/main.c    **** static void MX_TIM5_Init(void);
 160:Src/main.c    **** /* USER CODE BEGIN PFP */
 161:Src/main.c    **** 
 162:Src/main.c    **** /* USER CODE END PFP */
 163:Src/main.c    **** 
 164:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 165:Src/main.c    **** /* USER CODE BEGIN 0 */
 166:Src/main.c    **** int sensor_update_flag = 0;
 167:Src/main.c    **** int debug_flag = 0;
 168:Src/main.c    **** int m_sec_timer = 0;
 169:Src/main.c    **** 
 170:Src/main.c    **** /* USER CODE END 0 */
 171:Src/main.c    **** 
 172:Src/main.c    **** /**
 173:Src/main.c    ****   * @brief  The application entry point.
 174:Src/main.c    ****   * @retval int
 175:Src/main.c    ****   */
 176:Src/main.c    **** int main(void)
 177:Src/main.c    **** {
 178:Src/main.c    ****   /* USER CODE BEGIN 1 */
 179:Src/main.c    **** 
 180:Src/main.c    ****   /* USER CODE END 1 */
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 185:Src/main.c    ****   HAL_Init();
 186:Src/main.c    **** 
 187:Src/main.c    ****   /* USER CODE BEGIN Init */
 188:Src/main.c    **** 
 189:Src/main.c    ****   /* USER CODE END Init */
 190:Src/main.c    **** 
 191:Src/main.c    ****   /* Configure the system clock */
 192:Src/main.c    ****   SystemClock_Config();
 193:Src/main.c    **** 
 194:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* USER CODE END SysInit */
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* Initialize all configured peripherals */
 199:Src/main.c    ****   MX_GPIO_Init();
 200:Src/main.c    ****   MX_DMA_Init();
 201:Src/main.c    ****   MX_ADC1_Init();
 202:Src/main.c    ****   MX_CAN1_Init();
 203:Src/main.c    ****   MX_CAN3_Init();
ARM GAS  /tmp/ccrJKlhm.s 			page 5


 204:Src/main.c    ****   MX_SDMMC2_SD_Init();
 205:Src/main.c    ****   MX_SPI2_Init();
 206:Src/main.c    ****   MX_TIM2_Init();
 207:Src/main.c    ****   MX_TIM3_Init();
 208:Src/main.c    ****   MX_TIM4_Init();
 209:Src/main.c    ****   MX_TIM8_Init();
 210:Src/main.c    ****   MX_UART4_Init();
 211:Src/main.c    ****   MX_FATFS_Init();
 212:Src/main.c    ****   MX_TIM5_Init();
 213:Src/main.c    ****   /* USER CODE BEGIN 2 */
 214:Src/main.c    **** 
 215:Src/main.c    ****   sprintf(txt, "\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 216:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 217:Src/main.c    **** 
 218:Src/main.c    ****   //ERROR_LED
 219:Src/main.c    ****   for (int i = 0; i < 9; i++)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
 222:Src/main.c    ****     HAL_Delay(100);
 223:Src/main.c    ****   }
 224:Src/main.c    **** 
 225:Src/main.c    ****   sprintf(txt, "Testing Buzzer\n");
 226:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 227:Src/main.c    ****   //BUZZER
 228:Src/main.c    ****   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 229:Src/main.c    ****   HAL_Delay(100);
 230:Src/main.c    ****   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 231:Src/main.c    ****   sprintf(txt, "DONE\n");
 232:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 233:Src/main.c    **** 
 234:Src/main.c    ****   can1.rx0_interrupt = CAN1_RX0_IRQn;
 235:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 236:Src/main.c    ****   can1.hcan = &hcan1;
 237:Src/main.c    **** 
 238:Src/main.c    ****   sprintf(txt, "CAN initialization... ");
 239:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 240:Src/main.c    ****   if (can_init())
 241:Src/main.c    ****     sprintf(txt, "DONE\r\n");
 242:Src/main.c    ****   else
 243:Src/main.c    ****     sprintf(txt, "FAILED\r\n");
 244:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 245:Src/main.c    **** 
 246:Src/main.c    ****   sprintf(txt, "Initializing LTC\r\n");
 247:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 248:Src/main.c    ****   LTC_init(&ltc, &hspi2, 0, GPIOD, GPIO_PIN_4); //init function of LTC_6810
 249:Src/main.c    ****   sprintf(txt, "DONE\r\n");
 250:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 251:Src/main.c    **** 
 252:Src/main.c    ****   UserAdcConfig.Channel = ADC_CHANNEL_2;
 253:Src/main.c    ****   UserAdcConfig.Rank = ADC_REGULAR_RANK_1;
 254:Src/main.c    ****   UserAdcConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 255:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &UserAdcConfig) != HAL_OK)
 256:Src/main.c    ****   {
 257:Src/main.c    ****     Error_Handler();
 258:Src/main.c    ****   }
 259:Src/main.c    ****   HAL_ADC_Start_IT(&hadc1);
 260:Src/main.c    **** 
ARM GAS  /tmp/ccrJKlhm.s 			page 6


 261:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim5);
 262:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim8);
 263:Src/main.c    ****   HAL_TIM_Base_Start(&htim5);
 264:Src/main.c    ****   HAL_TIM_Base_Start(&htim8);
 265:Src/main.c    **** 
 266:Src/main.c    ****   // Initializing PWM
 267:Src/main.c    ****   Init_pwm(&hv_pwm, &htim2, TIM_CHANNEL_1);
 268:Src/main.c    ****   Init_pwm(&lv_pwm, &htim3, TIM_CHANNEL_1);
 269:Src/main.c    ****   Init_pwm(&pump_pwm, &htim4, TIM_CHANNEL_1);
 270:Src/main.c    **** 
 271:Src/main.c    ****   // Initializing temperatures
 272:Src/main.c    ****   lv_temp.desired = 45;
 273:Src/main.c    ****   hv_temp.desired = 45;
 274:Src/main.c    ****   pump_temp.desired = 45;
 275:Src/main.c    **** 
 276:Src/main.c    ****   lv_temp.max_temp = 70;
 277:Src/main.c    ****   hv_temp.max_temp = 70;
 278:Src/main.c    ****   pump_temp.max_temp = 70;
 279:Src/main.c    **** 
 280:Src/main.c    ****   // Initializing PID
 281:Src/main.c    ****   double sample_time = (htim8.Init.Prescaler * htim8.Init.Period) / 108000000;
 282:Src/main.c    ****   PIDInit(&lv_pid, 10, 0.01, 0.01, (float)sample_time, 100, 1000, AUTOMATIC, REVERSE);
 283:Src/main.c    ****   PIDInit(&hv_pid, 10, 0.01, 0.01, 0.5, 100, 1000, AUTOMATIC, REVERSE);
 284:Src/main.c    ****   PIDInit(&pump_pid, 10, 0.01, 0.01, 0.5, 100, 1000, AUTOMATIC, REVERSE);
 285:Src/main.c    **** 
 286:Src/main.c    ****   lv_pid.setpoint = lv_temp.desired;
 287:Src/main.c    ****   hv_pid.setpoint = hv_temp.desired;
 288:Src/main.c    ****   pump_pid.setpoint = pump_temp.desired;
 289:Src/main.c    **** 
 290:Src/main.c    ****   lv_temp.value = 65;
 291:Src/main.c    ****   hv_temp.value = 50;
 292:Src/main.c    ****   pump_temp.value = 50;
 293:Src/main.c    **** 
 294:Src/main.c    ****   /* USER CODE END 2 */
 295:Src/main.c    **** 
 296:Src/main.c    ****   /* Infinite loop */
 297:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 298:Src/main.c    ****   m_sec_timer = HAL_GetTick();
 299:Src/main.c    ****   int currentTick = m_sec_timer;
 300:Src/main.c    ****   int previous_millis = HAL_GetTick();
 301:Src/main.c    ****   while (1)
 302:Src/main.c    ****   {
 303:Src/main.c    ****     currentTick = HAL_GetTick();
 304:Src/main.c    **** 
 305:Src/main.c    ****     if (sensor_update_flag == 1)
 306:Src/main.c    ****     {
 307:Src/main.c    ****       sensor_update_flag = 0;
 308:Src/main.c    **** 
 309:Src/main.c    ****       // LTC
 310:Src/main.c    ****       read_voltages(&ltc);
 311:Src/main.c    **** 
 312:Src/main.c    ****       // Temperatures
 313:Src/main.c    ****       // TODO: read temperatures from adc and read from CANBUS
 314:Src/main.c    **** 
 315:Src/main.c    ****       lv_pid.input = lv_temp.value;
 316:Src/main.c    ****       hv_pid.input = hv_temp.value;
 317:Src/main.c    ****       pump_pid.input = pump_temp.value;
ARM GAS  /tmp/ccrJKlhm.s 			page 7


 318:Src/main.c    **** 
 319:Src/main.c    ****       // PID
 320:Src/main.c    ****       PIDCompute(&lv_pid);
 321:Src/main.c    ****       PIDCompute(&hv_pid);
 322:Src/main.c    ****       PIDCompute(&pump_pid);
 323:Src/main.c    **** 
 324:Src/main.c    ****       // PWM
 325:Src/main.c    ****       lv_pwm.value = lv_pid.output;
 326:Src/main.c    ****       hv_pwm.value = hv_pid.output;
 327:Src/main.c    ****       pump_pwm.value = pump_pid.output;
 328:Src/main.c    **** 
 329:Src/main.c    ****       check_over_temperature();
 330:Src/main.c    ****       check_under_voltage();
 331:Src/main.c    ****     }
 332:Src/main.c    **** 
 333:Src/main.c    ****     if (currentTick % 200 == 0)
 334:Src/main.c    ****     {
 335:Src/main.c    ****       write_pwm_value(&lv_pwm);
 336:Src/main.c    ****       write_pwm_value(&hv_pwm);
 337:Src/main.c    ****       write_pwm_value(&pump_pwm);
 338:Src/main.c    ****     }
 339:Src/main.c    **** 
 340:Src/main.c    ****     if (debug_flag)
 341:Src/main.c    ****     {
 342:Src/main.c    ****       if (DEBUG_VALUES)
 343:Src/main.c    ****       {
 344:Src/main.c    ****         sprintf(txt, "\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 345:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 346:Src/main.c    ****         sprintf(txt, "BMS_IS_ON: %d, overT: %d, underV: %d\r\n", BMS_IS_ON, OVER_TEMPERATURE, UNDER
 347:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 348:Src/main.c    ****         sprintf(txt, "PID outputs lv: %d hv: %d pump: %d\r\n", (int)PIDOutputGet(&lv_pid), (int)PID
 349:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 350:Src/main.c    ****         sprintf(txt, "Voltages %d %d %d %d %d %d\r\n", ltc.voltage[0], ltc.voltage[1], ltc.voltage[
 351:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 352:Src/main.c    ****         sprintf(txt, "Current from sensor: %lu\r\n", get_current());
 353:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 354:Src/main.c    ****       }
 355:Src/main.c    ****       debug_flag = 0;
 356:Src/main.c    ****     }
 357:Src/main.c    **** 
 358:Src/main.c    ****     if (previous_millis != currentTick)
 359:Src/main.c    ****     {
 360:Src/main.c    ****       int sent = send_CAN_data(currentTick);
 361:Src/main.c    ****       previous_millis = currentTick;
 362:Src/main.c    ****       if (sent != 0 && DEBUG_CAN_SEND)
 363:Src/main.c    ****       {
 364:Src/main.c    ****         sprintf(txt, "Sent message: %d\r\n", sent);
 365:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 366:Src/main.c    ****       }
 367:Src/main.c    ****     }
 368:Src/main.c    **** 
 369:Src/main.c    ****     if (BMS_IS_ON)
 370:Src/main.c    ****     {
 371:Src/main.c    ****       HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 372:Src/main.c    ****       led_state = ON;
 373:Src/main.c    ****     }
 374:Src/main.c    ****     else
ARM GAS  /tmp/ccrJKlhm.s 			page 8


 375:Src/main.c    ****     {
 376:Src/main.c    ****       HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 377:Src/main.c    ****       if (UNDER_VOLTAGE)
 378:Src/main.c    ****       {
 379:Src/main.c    ****         led_state = BLINK_underV;
 380:Src/main.c    ****         if (OVER_TEMPERATURE)
 381:Src/main.c    ****           led_state = BLINK_error;
 382:Src/main.c    ****       }
 383:Src/main.c    ****       else
 384:Src/main.c    ****       {
 385:Src/main.c    ****         if (OVER_TEMPERATURE)
 386:Src/main.c    ****           led_state = BLINK_overT;
 387:Src/main.c    ****         else
 388:Src/main.c    ****           led_state = OFF;
 389:Src/main.c    ****       }
 390:Src/main.c    ****     }
 391:Src/main.c    ****     write_error_led(led_state);
 392:Src/main.c    **** 
 393:Src/main.c    ****     BMS_ON_OFF();
 394:Src/main.c    **** 
 395:Src/main.c    ****     /* USER CODE END WHILE */
 396:Src/main.c    **** 
 397:Src/main.c    ****     /* USER CODE BEGIN 3 */
 398:Src/main.c    ****   }
 399:Src/main.c    ****   /* USER CODE END 3 */
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** /**
 403:Src/main.c    ****   * @brief System Clock Configuration
 404:Src/main.c    ****   * @retval None
 405:Src/main.c    ****   */
 406:Src/main.c    **** void SystemClock_Config(void)
 407:Src/main.c    **** {
 408:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 409:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 410:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 411:Src/main.c    **** 
 412:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 413:Src/main.c    ****   */
 414:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 415:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 416:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 417:Src/main.c    ****   */
 418:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 419:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 420:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 421:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 422:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 13;
 423:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 424:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 425:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 426:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 427:Src/main.c    ****   {
 428:Src/main.c    ****     Error_Handler();
 429:Src/main.c    ****   }
 430:Src/main.c    ****   /** Activate the Over-Drive mode 
 431:Src/main.c    ****   */
ARM GAS  /tmp/ccrJKlhm.s 			page 9


 432:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 433:Src/main.c    ****   {
 434:Src/main.c    ****     Error_Handler();
 435:Src/main.c    ****   }
 436:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 437:Src/main.c    ****   */
 438:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 439:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 440:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 441:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 442:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 443:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 444:Src/main.c    **** 
 445:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 446:Src/main.c    ****   {
 447:Src/main.c    ****     Error_Handler();
 448:Src/main.c    ****   }
 449:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SDMMC2
 450:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 451:Src/main.c    ****   PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 452:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 453:Src/main.c    ****   PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 454:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 455:Src/main.c    ****   {
 456:Src/main.c    ****     Error_Handler();
 457:Src/main.c    ****   }
 458:Src/main.c    **** }
 459:Src/main.c    **** 
 460:Src/main.c    **** /**
 461:Src/main.c    ****   * @brief ADC1 Initialization Function
 462:Src/main.c    ****   * @param None
 463:Src/main.c    ****   * @retval None
 464:Src/main.c    ****   */
 465:Src/main.c    **** static void MX_ADC1_Init(void)
 466:Src/main.c    **** {
 467:Src/main.c    **** 
 468:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 469:Src/main.c    **** 
 470:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 471:Src/main.c    **** 
 472:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 473:Src/main.c    **** 
 474:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 475:Src/main.c    **** 
 476:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 477:Src/main.c    ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 478:Src/main.c    ****   */
 479:Src/main.c    ****   hadc1.Instance = ADC1;
 480:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 481:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 482:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 483:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 484:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 485:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 486:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 487:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 488:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
ARM GAS  /tmp/ccrJKlhm.s 			page 10


 489:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 490:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 491:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 492:Src/main.c    ****   {
 493:Src/main.c    ****     Error_Handler();
 494:Src/main.c    ****   }
 495:Src/main.c    ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 496:Src/main.c    ****   */
 497:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 498:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 499:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 500:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 501:Src/main.c    ****   {
 502:Src/main.c    ****     Error_Handler();
 503:Src/main.c    ****   }
 504:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 505:Src/main.c    **** 
 506:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 507:Src/main.c    **** 
 508:Src/main.c    **** }
 509:Src/main.c    **** 
 510:Src/main.c    **** /**
 511:Src/main.c    ****   * @brief CAN1 Initialization Function
 512:Src/main.c    ****   * @param None
 513:Src/main.c    ****   * @retval None
 514:Src/main.c    ****   */
 515:Src/main.c    **** static void MX_CAN1_Init(void)
 516:Src/main.c    **** {
 517:Src/main.c    **** 
 518:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 521:Src/main.c    **** 
 522:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 523:Src/main.c    **** 
 524:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 525:Src/main.c    ****   hcan1.Instance = CAN1;
 526:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 527:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 528:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 529:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 530:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 531:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 532:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 533:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 534:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 535:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 536:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 537:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 538:Src/main.c    ****   {
 539:Src/main.c    ****     Error_Handler();
 540:Src/main.c    ****   }
 541:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 542:Src/main.c    **** 
 543:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 544:Src/main.c    **** 
 545:Src/main.c    **** }
ARM GAS  /tmp/ccrJKlhm.s 			page 11


 546:Src/main.c    **** 
 547:Src/main.c    **** /**
 548:Src/main.c    ****   * @brief CAN3 Initialization Function
 549:Src/main.c    ****   * @param None
 550:Src/main.c    ****   * @retval None
 551:Src/main.c    ****   */
 552:Src/main.c    **** static void MX_CAN3_Init(void)
 553:Src/main.c    **** {
 554:Src/main.c    **** 
 555:Src/main.c    ****   /* USER CODE BEGIN CAN3_Init 0 */
 556:Src/main.c    **** 
 557:Src/main.c    ****   /* USER CODE END CAN3_Init 0 */
 558:Src/main.c    **** 
 559:Src/main.c    ****   /* USER CODE BEGIN CAN3_Init 1 */
 560:Src/main.c    **** 
 561:Src/main.c    ****   /* USER CODE END CAN3_Init 1 */
 562:Src/main.c    ****   hcan3.Instance = CAN3;
 563:Src/main.c    ****   hcan3.Init.Prescaler = 3;
 564:Src/main.c    ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 565:Src/main.c    ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 566:Src/main.c    ****   hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 567:Src/main.c    ****   hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 568:Src/main.c    ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 569:Src/main.c    ****   hcan3.Init.AutoBusOff = DISABLE;
 570:Src/main.c    ****   hcan3.Init.AutoWakeUp = DISABLE;
 571:Src/main.c    ****   hcan3.Init.AutoRetransmission = DISABLE;
 572:Src/main.c    ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 573:Src/main.c    ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 574:Src/main.c    ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 575:Src/main.c    ****   {
 576:Src/main.c    ****     Error_Handler();
 577:Src/main.c    ****   }
 578:Src/main.c    ****   /* USER CODE BEGIN CAN3_Init 2 */
 579:Src/main.c    **** 
 580:Src/main.c    ****   /* USER CODE END CAN3_Init 2 */
 581:Src/main.c    **** 
 582:Src/main.c    **** }
 583:Src/main.c    **** 
 584:Src/main.c    **** /**
 585:Src/main.c    ****   * @brief SDMMC2 Initialization Function
 586:Src/main.c    ****   * @param None
 587:Src/main.c    ****   * @retval None
 588:Src/main.c    ****   */
 589:Src/main.c    **** static void MX_SDMMC2_SD_Init(void)
 590:Src/main.c    **** {
  27              		.loc 1 590 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 591:Src/main.c    **** 
 592:Src/main.c    ****   /* USER CODE BEGIN SDMMC2_Init 0 */
 593:Src/main.c    **** 
 594:Src/main.c    ****   /* USER CODE END SDMMC2_Init 0 */
 595:Src/main.c    **** 
 596:Src/main.c    ****   /* USER CODE BEGIN SDMMC2_Init 1 */
 597:Src/main.c    **** 
ARM GAS  /tmp/ccrJKlhm.s 			page 12


 598:Src/main.c    ****   /* USER CODE END SDMMC2_Init 1 */
 599:Src/main.c    ****   hsd2.Instance = SDMMC2;
  32              		.loc 1 599 3 view .LVU1
  33              		.loc 1 599 17 is_stmt 0 view .LVU2
  34 0000 054B     		ldr	r3, .L2
  35 0002 064A     		ldr	r2, .L2+4
  36 0004 1A60     		str	r2, [r3]
 600:Src/main.c    ****   hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  37              		.loc 1 600 3 is_stmt 1 view .LVU3
  38              		.loc 1 600 23 is_stmt 0 view .LVU4
  39 0006 0022     		movs	r2, #0
  40 0008 5A60     		str	r2, [r3, #4]
 601:Src/main.c    ****   hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  41              		.loc 1 601 3 is_stmt 1 view .LVU5
  42              		.loc 1 601 25 is_stmt 0 view .LVU6
  43 000a 9A60     		str	r2, [r3, #8]
 602:Src/main.c    ****   hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  44              		.loc 1 602 3 is_stmt 1 view .LVU7
  45              		.loc 1 602 28 is_stmt 0 view .LVU8
  46 000c DA60     		str	r2, [r3, #12]
 603:Src/main.c    ****   hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
  47              		.loc 1 603 3 is_stmt 1 view .LVU9
  48              		.loc 1 603 21 is_stmt 0 view .LVU10
  49 000e 1A61     		str	r2, [r3, #16]
 604:Src/main.c    ****   hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  50              		.loc 1 604 3 is_stmt 1 view .LVU11
  51              		.loc 1 604 33 is_stmt 0 view .LVU12
  52 0010 5A61     		str	r2, [r3, #20]
 605:Src/main.c    ****   hsd2.Init.ClockDiv = 0;
  53              		.loc 1 605 3 is_stmt 1 view .LVU13
  54              		.loc 1 605 22 is_stmt 0 view .LVU14
  55 0012 9A61     		str	r2, [r3, #24]
 606:Src/main.c    ****   /* USER CODE BEGIN SDMMC2_Init 2 */
 607:Src/main.c    **** 
 608:Src/main.c    ****   /* USER CODE END SDMMC2_Init 2 */
 609:Src/main.c    **** 
 610:Src/main.c    **** }
  56              		.loc 1 610 1 view .LVU15
  57 0014 7047     		bx	lr
  58              	.L3:
  59 0016 00BF     		.align	2
  60              	.L2:
  61 0018 00000000 		.word	hsd2
  62 001c 001C0140 		.word	1073814528
  63              		.cfi_endproc
  64              	.LFE158:
  66              		.section	.text.MX_GPIO_Init,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv5-d16
  73              	MX_GPIO_Init:
  74              	.LFB167:
 611:Src/main.c    **** 
 612:Src/main.c    **** /**
 613:Src/main.c    ****   * @brief SPI2 Initialization Function
ARM GAS  /tmp/ccrJKlhm.s 			page 13


 614:Src/main.c    ****   * @param None
 615:Src/main.c    ****   * @retval None
 616:Src/main.c    ****   */
 617:Src/main.c    **** static void MX_SPI2_Init(void)
 618:Src/main.c    **** {
 619:Src/main.c    **** 
 620:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 0 */
 621:Src/main.c    **** 
 622:Src/main.c    ****   /* USER CODE END SPI2_Init 0 */
 623:Src/main.c    **** 
 624:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 1 */
 625:Src/main.c    **** 
 626:Src/main.c    ****   /* USER CODE END SPI2_Init 1 */
 627:Src/main.c    ****   /* SPI2 parameter configuration*/
 628:Src/main.c    ****   hspi2.Instance = SPI2;
 629:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 630:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 631:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 632:Src/main.c    ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 633:Src/main.c    ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 634:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 635:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 636:Src/main.c    ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 637:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 638:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 639:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
 640:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 641:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 642:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 643:Src/main.c    ****   {
 644:Src/main.c    ****     Error_Handler();
 645:Src/main.c    ****   }
 646:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 2 */
 647:Src/main.c    **** 
 648:Src/main.c    ****   /* USER CODE END SPI2_Init 2 */
 649:Src/main.c    **** 
 650:Src/main.c    **** }
 651:Src/main.c    **** 
 652:Src/main.c    **** /**
 653:Src/main.c    ****   * @brief TIM2 Initialization Function
 654:Src/main.c    ****   * @param None
 655:Src/main.c    ****   * @retval None
 656:Src/main.c    ****   */
 657:Src/main.c    **** static void MX_TIM2_Init(void)
 658:Src/main.c    **** {
 659:Src/main.c    **** 
 660:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 661:Src/main.c    **** 
 662:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 663:Src/main.c    **** 
 664:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 665:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 666:Src/main.c    **** 
 667:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 668:Src/main.c    **** 
 669:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 670:Src/main.c    ****   htim2.Instance = TIM2;
ARM GAS  /tmp/ccrJKlhm.s 			page 14


 671:Src/main.c    ****   htim2.Init.Prescaler = 0;
 672:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 673:Src/main.c    ****   htim2.Init.Period = 0;
 674:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 675:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 676:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 677:Src/main.c    ****   {
 678:Src/main.c    ****     Error_Handler();
 679:Src/main.c    ****   }
 680:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 681:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 682:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 683:Src/main.c    ****   {
 684:Src/main.c    ****     Error_Handler();
 685:Src/main.c    ****   }
 686:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 687:Src/main.c    ****   sConfigOC.Pulse = 0;
 688:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 689:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 690:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 691:Src/main.c    ****   {
 692:Src/main.c    ****     Error_Handler();
 693:Src/main.c    ****   }
 694:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 695:Src/main.c    ****   {
 696:Src/main.c    ****     Error_Handler();
 697:Src/main.c    ****   }
 698:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 699:Src/main.c    ****   {
 700:Src/main.c    ****     Error_Handler();
 701:Src/main.c    ****   }
 702:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 703:Src/main.c    ****   {
 704:Src/main.c    ****     Error_Handler();
 705:Src/main.c    ****   }
 706:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 707:Src/main.c    **** 
 708:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 709:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 710:Src/main.c    **** 
 711:Src/main.c    **** }
 712:Src/main.c    **** 
 713:Src/main.c    **** /**
 714:Src/main.c    ****   * @brief TIM3 Initialization Function
 715:Src/main.c    ****   * @param None
 716:Src/main.c    ****   * @retval None
 717:Src/main.c    ****   */
 718:Src/main.c    **** static void MX_TIM3_Init(void)
 719:Src/main.c    **** {
 720:Src/main.c    **** 
 721:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 722:Src/main.c    **** 
 723:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 724:Src/main.c    **** 
 725:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 726:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 727:Src/main.c    **** 
ARM GAS  /tmp/ccrJKlhm.s 			page 15


 728:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 729:Src/main.c    **** 
 730:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 731:Src/main.c    ****   htim3.Instance = TIM3;
 732:Src/main.c    ****   htim3.Init.Prescaler = 0;
 733:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 734:Src/main.c    ****   htim3.Init.Period = 0;
 735:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 736:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 737:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 738:Src/main.c    ****   {
 739:Src/main.c    ****     Error_Handler();
 740:Src/main.c    ****   }
 741:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 742:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 743:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 744:Src/main.c    ****   {
 745:Src/main.c    ****     Error_Handler();
 746:Src/main.c    ****   }
 747:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 748:Src/main.c    ****   sConfigOC.Pulse = 0;
 749:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 750:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 751:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 752:Src/main.c    ****   {
 753:Src/main.c    ****     Error_Handler();
 754:Src/main.c    ****   }
 755:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 756:Src/main.c    ****   {
 757:Src/main.c    ****     Error_Handler();
 758:Src/main.c    ****   }
 759:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 760:Src/main.c    **** 
 761:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 762:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 763:Src/main.c    **** 
 764:Src/main.c    **** }
 765:Src/main.c    **** 
 766:Src/main.c    **** /**
 767:Src/main.c    ****   * @brief TIM4 Initialization Function
 768:Src/main.c    ****   * @param None
 769:Src/main.c    ****   * @retval None
 770:Src/main.c    ****   */
 771:Src/main.c    **** static void MX_TIM4_Init(void)
 772:Src/main.c    **** {
 773:Src/main.c    **** 
 774:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 775:Src/main.c    **** 
 776:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 777:Src/main.c    **** 
 778:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 779:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 780:Src/main.c    **** 
 781:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 782:Src/main.c    **** 
 783:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 784:Src/main.c    ****   htim4.Instance = TIM4;
ARM GAS  /tmp/ccrJKlhm.s 			page 16


 785:Src/main.c    ****   htim4.Init.Prescaler = 0;
 786:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 787:Src/main.c    ****   htim4.Init.Period = 0;
 788:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 789:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 790:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 791:Src/main.c    ****   {
 792:Src/main.c    ****     Error_Handler();
 793:Src/main.c    ****   }
 794:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 795:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 796:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 797:Src/main.c    ****   {
 798:Src/main.c    ****     Error_Handler();
 799:Src/main.c    ****   }
 800:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801:Src/main.c    ****   sConfigOC.Pulse = 0;
 802:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 803:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 804:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 805:Src/main.c    ****   {
 806:Src/main.c    ****     Error_Handler();
 807:Src/main.c    ****   }
 808:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 809:Src/main.c    ****   {
 810:Src/main.c    ****     Error_Handler();
 811:Src/main.c    ****   }
 812:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 813:Src/main.c    ****   {
 814:Src/main.c    ****     Error_Handler();
 815:Src/main.c    ****   }
 816:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 817:Src/main.c    ****   {
 818:Src/main.c    ****     Error_Handler();
 819:Src/main.c    ****   }
 820:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 821:Src/main.c    **** 
 822:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 823:Src/main.c    ****   HAL_TIM_MspPostInit(&htim4);
 824:Src/main.c    **** 
 825:Src/main.c    **** }
 826:Src/main.c    **** 
 827:Src/main.c    **** /**
 828:Src/main.c    ****   * @brief TIM5 Initialization Function
 829:Src/main.c    ****   * @param None
 830:Src/main.c    ****   * @retval None
 831:Src/main.c    ****   */
 832:Src/main.c    **** static void MX_TIM5_Init(void)
 833:Src/main.c    **** {
 834:Src/main.c    **** 
 835:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 0 */
 836:Src/main.c    **** 
 837:Src/main.c    ****   /* USER CODE END TIM5_Init 0 */
 838:Src/main.c    **** 
 839:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 840:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 841:Src/main.c    **** 
ARM GAS  /tmp/ccrJKlhm.s 			page 17


 842:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 1 */
 843:Src/main.c    **** 
 844:Src/main.c    ****   /* USER CODE END TIM5_Init 1 */
 845:Src/main.c    ****   htim5.Instance = TIM5;
 846:Src/main.c    ****   htim5.Init.Prescaler = 108;
 847:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 848:Src/main.c    ****   htim5.Init.Period = 999;
 849:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 850:Src/main.c    ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 851:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 852:Src/main.c    ****   {
 853:Src/main.c    ****     Error_Handler();
 854:Src/main.c    ****   }
 855:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 856:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 857:Src/main.c    ****   {
 858:Src/main.c    ****     Error_Handler();
 859:Src/main.c    ****   }
 860:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 861:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 862:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 863:Src/main.c    ****   {
 864:Src/main.c    ****     Error_Handler();
 865:Src/main.c    ****   }
 866:Src/main.c    ****   /* USER CODE BEGIN TIM5_Init 2 */
 867:Src/main.c    **** 
 868:Src/main.c    ****   /* USER CODE END TIM5_Init 2 */
 869:Src/main.c    **** 
 870:Src/main.c    **** }
 871:Src/main.c    **** 
 872:Src/main.c    **** /**
 873:Src/main.c    ****   * @brief TIM8 Initialization Function
 874:Src/main.c    ****   * @param None
 875:Src/main.c    ****   * @retval None
 876:Src/main.c    ****   */
 877:Src/main.c    **** static void MX_TIM8_Init(void)
 878:Src/main.c    **** {
 879:Src/main.c    **** 
 880:Src/main.c    ****   /* USER CODE BEGIN TIM8_Init 0 */
 881:Src/main.c    **** 
 882:Src/main.c    ****   /* USER CODE END TIM8_Init 0 */
 883:Src/main.c    **** 
 884:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 885:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 886:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 887:Src/main.c    **** 
 888:Src/main.c    ****   /* USER CODE BEGIN TIM8_Init 1 */
 889:Src/main.c    **** 
 890:Src/main.c    ****   /* USER CODE END TIM8_Init 1 */
 891:Src/main.c    ****   htim8.Instance = TIM8;
 892:Src/main.c    ****   htim8.Init.Prescaler = 0;
 893:Src/main.c    ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 894:Src/main.c    ****   htim8.Init.Period = 0;
 895:Src/main.c    ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 896:Src/main.c    ****   htim8.Init.RepetitionCounter = 0;
 897:Src/main.c    ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 898:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
ARM GAS  /tmp/ccrJKlhm.s 			page 18


 899:Src/main.c    ****   {
 900:Src/main.c    ****     Error_Handler();
 901:Src/main.c    ****   }
 902:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 903:Src/main.c    ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 904:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 905:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 906:Src/main.c    ****   {
 907:Src/main.c    ****     Error_Handler();
 908:Src/main.c    ****   }
 909:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 910:Src/main.c    ****   sConfigOC.Pulse = 0;
 911:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 912:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 913:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 914:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 915:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 916:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 917:Src/main.c    ****   {
 918:Src/main.c    ****     Error_Handler();
 919:Src/main.c    ****   }
 920:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 921:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 922:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 923:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 924:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 925:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 926:Src/main.c    ****   sBreakDeadTimeConfig.BreakFilter = 0;
 927:Src/main.c    ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 928:Src/main.c    ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 929:Src/main.c    ****   sBreakDeadTimeConfig.Break2Filter = 0;
 930:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 931:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 932:Src/main.c    ****   {
 933:Src/main.c    ****     Error_Handler();
 934:Src/main.c    ****   }
 935:Src/main.c    ****   /* USER CODE BEGIN TIM8_Init 2 */
 936:Src/main.c    **** 
 937:Src/main.c    ****   /* USER CODE END TIM8_Init 2 */
 938:Src/main.c    ****   HAL_TIM_MspPostInit(&htim8);
 939:Src/main.c    **** 
 940:Src/main.c    **** }
 941:Src/main.c    **** 
 942:Src/main.c    **** /**
 943:Src/main.c    ****   * @brief UART4 Initialization Function
 944:Src/main.c    ****   * @param None
 945:Src/main.c    ****   * @retval None
 946:Src/main.c    ****   */
 947:Src/main.c    **** static void MX_UART4_Init(void)
 948:Src/main.c    **** {
 949:Src/main.c    **** 
 950:Src/main.c    ****   /* USER CODE BEGIN UART4_Init 0 */
 951:Src/main.c    **** 
 952:Src/main.c    ****   /* USER CODE END UART4_Init 0 */
 953:Src/main.c    **** 
 954:Src/main.c    ****   /* USER CODE BEGIN UART4_Init 1 */
 955:Src/main.c    **** 
ARM GAS  /tmp/ccrJKlhm.s 			page 19


 956:Src/main.c    ****   /* USER CODE END UART4_Init 1 */
 957:Src/main.c    ****   huart4.Instance = UART4;
 958:Src/main.c    ****   huart4.Init.BaudRate = 115200;
 959:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 960:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 961:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 962:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 963:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 964:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 965:Src/main.c    ****   huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 966:Src/main.c    ****   huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 967:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 968:Src/main.c    ****   {
 969:Src/main.c    ****     Error_Handler();
 970:Src/main.c    ****   }
 971:Src/main.c    ****   /* USER CODE BEGIN UART4_Init 2 */
 972:Src/main.c    **** 
 973:Src/main.c    ****   /* USER CODE END UART4_Init 2 */
 974:Src/main.c    **** 
 975:Src/main.c    **** }
 976:Src/main.c    **** 
 977:Src/main.c    **** /** 
 978:Src/main.c    ****   * Enable DMA controller clock
 979:Src/main.c    ****   */
 980:Src/main.c    **** static void MX_DMA_Init(void) 
 981:Src/main.c    **** {
 982:Src/main.c    **** 
 983:Src/main.c    ****   /* DMA controller clock enable */
 984:Src/main.c    ****   __HAL_RCC_DMA2_CLK_ENABLE();
 985:Src/main.c    **** 
 986:Src/main.c    ****   /* DMA interrupt init */
 987:Src/main.c    ****   /* DMA2_Stream0_IRQn interrupt configuration */
 988:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 989:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 990:Src/main.c    **** 
 991:Src/main.c    **** }
 992:Src/main.c    **** 
 993:Src/main.c    **** /**
 994:Src/main.c    ****   * @brief GPIO Initialization Function
 995:Src/main.c    ****   * @param None
 996:Src/main.c    ****   * @retval None
 997:Src/main.c    ****   */
 998:Src/main.c    **** static void MX_GPIO_Init(void)
 999:Src/main.c    **** {
  75              		.loc 1 999 1 is_stmt 1 view -0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 40
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 24
  82              		.cfi_offset 4, -24
  83              		.cfi_offset 5, -20
  84              		.cfi_offset 6, -16
  85              		.cfi_offset 7, -12
  86              		.cfi_offset 8, -8
  87              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrJKlhm.s 			page 20


  88 0004 8AB0     		sub	sp, sp, #40
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 64
1000:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  91              		.loc 1 1000 3 view .LVU17
  92              		.loc 1 1000 20 is_stmt 0 view .LVU18
  93 0006 0024     		movs	r4, #0
  94 0008 0594     		str	r4, [sp, #20]
  95 000a 0694     		str	r4, [sp, #24]
  96 000c 0794     		str	r4, [sp, #28]
  97 000e 0894     		str	r4, [sp, #32]
  98 0010 0994     		str	r4, [sp, #36]
1001:Src/main.c    **** 
1002:Src/main.c    ****   /* GPIO Ports Clock Enable */
1003:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  99              		.loc 1 1003 3 is_stmt 1 view .LVU19
 100              	.LBB10:
 101              		.loc 1 1003 3 view .LVU20
 102              		.loc 1 1003 3 view .LVU21
 103 0012 2C4B     		ldr	r3, .L6
 104 0014 1A6B     		ldr	r2, [r3, #48]
 105 0016 42F08002 		orr	r2, r2, #128
 106 001a 1A63     		str	r2, [r3, #48]
 107              		.loc 1 1003 3 view .LVU22
 108 001c 1A6B     		ldr	r2, [r3, #48]
 109 001e 02F08002 		and	r2, r2, #128
 110 0022 0092     		str	r2, [sp]
 111              		.loc 1 1003 3 view .LVU23
 112 0024 009A     		ldr	r2, [sp]
 113              	.LBE10:
 114              		.loc 1 1003 3 view .LVU24
1004:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 115              		.loc 1 1004 3 view .LVU25
 116              	.LBB11:
 117              		.loc 1 1004 3 view .LVU26
 118              		.loc 1 1004 3 view .LVU27
 119 0026 1A6B     		ldr	r2, [r3, #48]
 120 0028 42F00402 		orr	r2, r2, #4
 121 002c 1A63     		str	r2, [r3, #48]
 122              		.loc 1 1004 3 view .LVU28
 123 002e 1A6B     		ldr	r2, [r3, #48]
 124 0030 02F00402 		and	r2, r2, #4
 125 0034 0192     		str	r2, [sp, #4]
 126              		.loc 1 1004 3 view .LVU29
 127 0036 019A     		ldr	r2, [sp, #4]
 128              	.LBE11:
 129              		.loc 1 1004 3 view .LVU30
1005:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 130              		.loc 1 1005 3 view .LVU31
 131              	.LBB12:
 132              		.loc 1 1005 3 view .LVU32
 133              		.loc 1 1005 3 view .LVU33
 134 0038 1A6B     		ldr	r2, [r3, #48]
 135 003a 42F00102 		orr	r2, r2, #1
 136 003e 1A63     		str	r2, [r3, #48]
 137              		.loc 1 1005 3 view .LVU34
 138 0040 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccrJKlhm.s 			page 21


 139 0042 02F00102 		and	r2, r2, #1
 140 0046 0292     		str	r2, [sp, #8]
 141              		.loc 1 1005 3 view .LVU35
 142 0048 029A     		ldr	r2, [sp, #8]
 143              	.LBE12:
 144              		.loc 1 1005 3 view .LVU36
1006:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 145              		.loc 1 1006 3 view .LVU37
 146              	.LBB13:
 147              		.loc 1 1006 3 view .LVU38
 148              		.loc 1 1006 3 view .LVU39
 149 004a 1A6B     		ldr	r2, [r3, #48]
 150 004c 42F00202 		orr	r2, r2, #2
 151 0050 1A63     		str	r2, [r3, #48]
 152              		.loc 1 1006 3 view .LVU40
 153 0052 1A6B     		ldr	r2, [r3, #48]
 154 0054 02F00202 		and	r2, r2, #2
 155 0058 0392     		str	r2, [sp, #12]
 156              		.loc 1 1006 3 view .LVU41
 157 005a 039A     		ldr	r2, [sp, #12]
 158              	.LBE13:
 159              		.loc 1 1006 3 view .LVU42
1007:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 160              		.loc 1 1007 3 view .LVU43
 161              	.LBB14:
 162              		.loc 1 1007 3 view .LVU44
 163              		.loc 1 1007 3 view .LVU45
 164 005c 1A6B     		ldr	r2, [r3, #48]
 165 005e 42F00802 		orr	r2, r2, #8
 166 0062 1A63     		str	r2, [r3, #48]
 167              		.loc 1 1007 3 view .LVU46
 168 0064 1B6B     		ldr	r3, [r3, #48]
 169 0066 03F00803 		and	r3, r3, #8
 170 006a 0493     		str	r3, [sp, #16]
 171              		.loc 1 1007 3 view .LVU47
 172 006c 049B     		ldr	r3, [sp, #16]
 173              	.LBE14:
 174              		.loc 1 1007 3 view .LVU48
1008:Src/main.c    **** 
1009:Src/main.c    ****   /*Configure GPIO pin Output Level */
1010:Src/main.c    ****   HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 175              		.loc 1 1010 3 view .LVU49
 176 006e DFF85C80 		ldr	r8, .L6+8
 177 0072 2246     		mov	r2, r4
 178 0074 2021     		movs	r1, #32
 179 0076 4046     		mov	r0, r8
 180 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 181              	.LVL0:
1011:Src/main.c    **** 
1012:Src/main.c    ****   /*Configure GPIO pin Output Level */
1013:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, SDMMC2_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 182              		.loc 1 1013 3 view .LVU50
 183 007c 124D     		ldr	r5, .L6+4
 184 007e 2246     		mov	r2, r4
 185 0080 1421     		movs	r1, #20
 186 0082 2846     		mov	r0, r5
 187 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccrJKlhm.s 			page 22


 188              	.LVL1:
1014:Src/main.c    **** 
1015:Src/main.c    ****   /*Configure GPIO pin : RELAY_Pin */
1016:Src/main.c    ****   GPIO_InitStruct.Pin = RELAY_Pin;
 189              		.loc 1 1016 3 view .LVU51
 190              		.loc 1 1016 23 is_stmt 0 view .LVU52
 191 0088 2026     		movs	r6, #32
 192 008a 0596     		str	r6, [sp, #20]
1017:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 193              		.loc 1 1017 3 is_stmt 1 view .LVU53
 194              		.loc 1 1017 24 is_stmt 0 view .LVU54
 195 008c 0127     		movs	r7, #1
 196 008e 0697     		str	r7, [sp, #24]
1018:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 197              		.loc 1 1018 3 is_stmt 1 view .LVU55
 198              		.loc 1 1018 24 is_stmt 0 view .LVU56
 199 0090 0794     		str	r4, [sp, #28]
1019:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 200              		.loc 1 1019 3 is_stmt 1 view .LVU57
 201              		.loc 1 1019 25 is_stmt 0 view .LVU58
 202 0092 0894     		str	r4, [sp, #32]
1020:Src/main.c    ****   HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 203              		.loc 1 1020 3 is_stmt 1 view .LVU59
 204 0094 05A9     		add	r1, sp, #20
 205 0096 4046     		mov	r0, r8
 206 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 207              	.LVL2:
1021:Src/main.c    **** 
1022:Src/main.c    ****   /*Configure GPIO pins : SDMMC2_CS_Pin SPI2_CS_Pin */
1023:Src/main.c    ****   GPIO_InitStruct.Pin = SDMMC2_CS_Pin|SPI2_CS_Pin;
 208              		.loc 1 1023 3 view .LVU60
 209              		.loc 1 1023 23 is_stmt 0 view .LVU61
 210 009c 1423     		movs	r3, #20
 211 009e 0593     		str	r3, [sp, #20]
1024:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 212              		.loc 1 1024 3 is_stmt 1 view .LVU62
 213              		.loc 1 1024 24 is_stmt 0 view .LVU63
 214 00a0 0697     		str	r7, [sp, #24]
1025:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 215              		.loc 1 1025 3 is_stmt 1 view .LVU64
 216              		.loc 1 1025 24 is_stmt 0 view .LVU65
 217 00a2 0794     		str	r4, [sp, #28]
1026:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 218              		.loc 1 1026 3 is_stmt 1 view .LVU66
 219              		.loc 1 1026 25 is_stmt 0 view .LVU67
 220 00a4 0894     		str	r4, [sp, #32]
1027:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 221              		.loc 1 1027 3 is_stmt 1 view .LVU68
 222 00a6 0DEB0301 		add	r1, sp, r3
 223 00aa 2846     		mov	r0, r5
 224 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 225              	.LVL3:
1028:Src/main.c    **** 
1029:Src/main.c    ****   /*Configure GPIO pin : SD_DETECT_Pin */
1030:Src/main.c    ****   GPIO_InitStruct.Pin = SD_DETECT_Pin;
 226              		.loc 1 1030 3 view .LVU69
 227              		.loc 1 1030 23 is_stmt 0 view .LVU70
ARM GAS  /tmp/ccrJKlhm.s 			page 23


 228 00b0 0596     		str	r6, [sp, #20]
1031:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 229              		.loc 1 1031 3 is_stmt 1 view .LVU71
 230              		.loc 1 1031 24 is_stmt 0 view .LVU72
 231 00b2 0694     		str	r4, [sp, #24]
1032:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 232              		.loc 1 1032 3 is_stmt 1 view .LVU73
 233              		.loc 1 1032 24 is_stmt 0 view .LVU74
 234 00b4 0794     		str	r4, [sp, #28]
1033:Src/main.c    ****   HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 235              		.loc 1 1033 3 is_stmt 1 view .LVU75
 236 00b6 05A9     		add	r1, sp, #20
 237 00b8 2846     		mov	r0, r5
 238 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 239              	.LVL4:
1034:Src/main.c    **** 
1035:Src/main.c    **** }
 240              		.loc 1 1035 1 is_stmt 0 view .LVU76
 241 00be 0AB0     		add	sp, sp, #40
 242              	.LCFI2:
 243              		.cfi_def_cfa_offset 24
 244              		@ sp needed
 245 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 246              	.L7:
 247              		.align	2
 248              	.L6:
 249 00c4 00380240 		.word	1073887232
 250 00c8 000C0240 		.word	1073875968
 251 00cc 00080240 		.word	1073874944
 252              		.cfi_endproc
 253              	.LFE167:
 255              		.section	.text.MX_DMA_Init,"ax",%progbits
 256              		.align	1
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv5-d16
 262              	MX_DMA_Init:
 263              	.LFB166:
 981:Src/main.c    **** 
 264              		.loc 1 981 1 is_stmt 1 view -0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 8
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268 0000 00B5     		push	{lr}
 269              	.LCFI3:
 270              		.cfi_def_cfa_offset 4
 271              		.cfi_offset 14, -4
 272 0002 83B0     		sub	sp, sp, #12
 273              	.LCFI4:
 274              		.cfi_def_cfa_offset 16
 984:Src/main.c    **** 
 275              		.loc 1 984 3 view .LVU78
 276              	.LBB15:
 984:Src/main.c    **** 
 277              		.loc 1 984 3 view .LVU79
 984:Src/main.c    **** 
ARM GAS  /tmp/ccrJKlhm.s 			page 24


 278              		.loc 1 984 3 view .LVU80
 279 0004 0A4B     		ldr	r3, .L10
 280 0006 1A6B     		ldr	r2, [r3, #48]
 281 0008 42F48002 		orr	r2, r2, #4194304
 282 000c 1A63     		str	r2, [r3, #48]
 984:Src/main.c    **** 
 283              		.loc 1 984 3 view .LVU81
 284 000e 1B6B     		ldr	r3, [r3, #48]
 285 0010 03F48003 		and	r3, r3, #4194304
 286 0014 0193     		str	r3, [sp, #4]
 984:Src/main.c    **** 
 287              		.loc 1 984 3 view .LVU82
 288 0016 019B     		ldr	r3, [sp, #4]
 289              	.LBE15:
 984:Src/main.c    **** 
 290              		.loc 1 984 3 view .LVU83
 988:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 291              		.loc 1 988 3 view .LVU84
 292 0018 0022     		movs	r2, #0
 293 001a 1146     		mov	r1, r2
 294 001c 3820     		movs	r0, #56
 295 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 296              	.LVL5:
 989:Src/main.c    **** 
 297              		.loc 1 989 3 view .LVU85
 298 0022 3820     		movs	r0, #56
 299 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 300              	.LVL6:
 991:Src/main.c    **** 
 301              		.loc 1 991 1 is_stmt 0 view .LVU86
 302 0028 03B0     		add	sp, sp, #12
 303              	.LCFI5:
 304              		.cfi_def_cfa_offset 4
 305              		@ sp needed
 306 002a 5DF804FB 		ldr	pc, [sp], #4
 307              	.L11:
 308 002e 00BF     		.align	2
 309              	.L10:
 310 0030 00380240 		.word	1073887232
 311              		.cfi_endproc
 312              	.LFE166:
 314              		.section	.text.MX_ADC1_Init,"ax",%progbits
 315              		.align	1
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv5-d16
 321              	MX_ADC1_Init:
 322              	.LFB155:
 466:Src/main.c    **** 
 323              		.loc 1 466 1 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 16
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327 0000 70B5     		push	{r4, r5, r6, lr}
 328              	.LCFI6:
 329              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccrJKlhm.s 			page 25


 330              		.cfi_offset 4, -16
 331              		.cfi_offset 5, -12
 332              		.cfi_offset 6, -8
 333              		.cfi_offset 14, -4
 334 0002 84B0     		sub	sp, sp, #16
 335              	.LCFI7:
 336              		.cfi_def_cfa_offset 32
 472:Src/main.c    **** 
 337              		.loc 1 472 3 view .LVU88
 472:Src/main.c    **** 
 338              		.loc 1 472 26 is_stmt 0 view .LVU89
 339 0004 0025     		movs	r5, #0
 340 0006 0095     		str	r5, [sp]
 341 0008 0195     		str	r5, [sp, #4]
 342 000a 0295     		str	r5, [sp, #8]
 343 000c 0395     		str	r5, [sp, #12]
 479:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 344              		.loc 1 479 3 is_stmt 1 view .LVU90
 479:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 345              		.loc 1 479 18 is_stmt 0 view .LVU91
 346 000e 104C     		ldr	r4, .L14
 347 0010 104B     		ldr	r3, .L14+4
 348 0012 2360     		str	r3, [r4]
 480:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 349              		.loc 1 480 3 is_stmt 1 view .LVU92
 480:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 350              		.loc 1 480 29 is_stmt 0 view .LVU93
 351 0014 4FF48033 		mov	r3, #65536
 352 0018 6360     		str	r3, [r4, #4]
 481:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 353              		.loc 1 481 3 is_stmt 1 view .LVU94
 481:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 354              		.loc 1 481 25 is_stmt 0 view .LVU95
 355 001a A560     		str	r5, [r4, #8]
 482:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 356              		.loc 1 482 3 is_stmt 1 view .LVU96
 482:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 357              		.loc 1 482 27 is_stmt 0 view .LVU97
 358 001c 2561     		str	r5, [r4, #16]
 483:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 359              		.loc 1 483 3 is_stmt 1 view .LVU98
 483:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 360              		.loc 1 483 33 is_stmt 0 view .LVU99
 361 001e A561     		str	r5, [r4, #24]
 484:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 362              		.loc 1 484 3 is_stmt 1 view .LVU100
 484:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 363              		.loc 1 484 36 is_stmt 0 view .LVU101
 364 0020 84F82050 		strb	r5, [r4, #32]
 485:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 365              		.loc 1 485 3 is_stmt 1 view .LVU102
 485:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 366              		.loc 1 485 35 is_stmt 0 view .LVU103
 367 0024 E562     		str	r5, [r4, #44]
 486:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 368              		.loc 1 486 3 is_stmt 1 view .LVU104
 486:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
ARM GAS  /tmp/ccrJKlhm.s 			page 26


 369              		.loc 1 486 31 is_stmt 0 view .LVU105
 370 0026 0C4B     		ldr	r3, .L14+8
 371 0028 A362     		str	r3, [r4, #40]
 487:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 372              		.loc 1 487 3 is_stmt 1 view .LVU106
 487:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 373              		.loc 1 487 24 is_stmt 0 view .LVU107
 374 002a E560     		str	r5, [r4, #12]
 488:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 375              		.loc 1 488 3 is_stmt 1 view .LVU108
 488:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 376              		.loc 1 488 30 is_stmt 0 view .LVU109
 377 002c 0126     		movs	r6, #1
 378 002e E661     		str	r6, [r4, #28]
 489:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 379              		.loc 1 489 3 is_stmt 1 view .LVU110
 489:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 380              		.loc 1 489 36 is_stmt 0 view .LVU111
 381 0030 84F83050 		strb	r5, [r4, #48]
 490:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 382              		.loc 1 490 3 is_stmt 1 view .LVU112
 490:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 383              		.loc 1 490 27 is_stmt 0 view .LVU113
 384 0034 6661     		str	r6, [r4, #20]
 491:Src/main.c    ****   {
 385              		.loc 1 491 3 is_stmt 1 view .LVU114
 491:Src/main.c    ****   {
 386              		.loc 1 491 7 is_stmt 0 view .LVU115
 387 0036 2046     		mov	r0, r4
 388 0038 FFF7FEFF 		bl	HAL_ADC_Init
 389              	.LVL7:
 497:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 390              		.loc 1 497 3 is_stmt 1 view .LVU116
 497:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 391              		.loc 1 497 19 is_stmt 0 view .LVU117
 392 003c 0223     		movs	r3, #2
 393 003e 0093     		str	r3, [sp]
 498:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 394              		.loc 1 498 3 is_stmt 1 view .LVU118
 498:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 395              		.loc 1 498 16 is_stmt 0 view .LVU119
 396 0040 0196     		str	r6, [sp, #4]
 499:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 397              		.loc 1 499 3 is_stmt 1 view .LVU120
 499:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 398              		.loc 1 499 24 is_stmt 0 view .LVU121
 399 0042 0295     		str	r5, [sp, #8]
 500:Src/main.c    ****   {
 400              		.loc 1 500 3 is_stmt 1 view .LVU122
 500:Src/main.c    ****   {
 401              		.loc 1 500 7 is_stmt 0 view .LVU123
 402 0044 6946     		mov	r1, sp
 403 0046 2046     		mov	r0, r4
 404 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 405              	.LVL8:
 508:Src/main.c    **** 
 406              		.loc 1 508 1 view .LVU124
ARM GAS  /tmp/ccrJKlhm.s 			page 27


 407 004c 04B0     		add	sp, sp, #16
 408              	.LCFI8:
 409              		.cfi_def_cfa_offset 16
 410              		@ sp needed
 411 004e 70BD     		pop	{r4, r5, r6, pc}
 412              	.L15:
 413              		.align	2
 414              	.L14:
 415 0050 00000000 		.word	hadc1
 416 0054 00200140 		.word	1073815552
 417 0058 0100000F 		.word	251658241
 418              		.cfi_endproc
 419              	.LFE155:
 421              		.section	.text.MX_CAN1_Init,"ax",%progbits
 422              		.align	1
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 426              		.fpu fpv5-d16
 428              	MX_CAN1_Init:
 429              	.LFB156:
 516:Src/main.c    **** 
 430              		.loc 1 516 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434 0000 08B5     		push	{r3, lr}
 435              	.LCFI9:
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 3, -8
 438              		.cfi_offset 14, -4
 525:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 439              		.loc 1 525 3 view .LVU126
 525:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 440              		.loc 1 525 18 is_stmt 0 view .LVU127
 441 0002 0B48     		ldr	r0, .L18
 442 0004 0B4B     		ldr	r3, .L18+4
 443 0006 0360     		str	r3, [r0]
 526:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 444              		.loc 1 526 3 is_stmt 1 view .LVU128
 526:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 445              		.loc 1 526 24 is_stmt 0 view .LVU129
 446 0008 0323     		movs	r3, #3
 447 000a 4360     		str	r3, [r0, #4]
 527:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 448              		.loc 1 527 3 is_stmt 1 view .LVU130
 527:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 449              		.loc 1 527 19 is_stmt 0 view .LVU131
 450 000c 0023     		movs	r3, #0
 451 000e 8360     		str	r3, [r0, #8]
 528:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 452              		.loc 1 528 3 is_stmt 1 view .LVU132
 528:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 453              		.loc 1 528 28 is_stmt 0 view .LVU133
 454 0010 C360     		str	r3, [r0, #12]
 529:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 455              		.loc 1 529 3 is_stmt 1 view .LVU134
ARM GAS  /tmp/ccrJKlhm.s 			page 28


 529:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 456              		.loc 1 529 23 is_stmt 0 view .LVU135
 457 0012 4FF46022 		mov	r2, #917504
 458 0016 0261     		str	r2, [r0, #16]
 530:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 459              		.loc 1 530 3 is_stmt 1 view .LVU136
 530:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 460              		.loc 1 530 23 is_stmt 0 view .LVU137
 461 0018 4FF48012 		mov	r2, #1048576
 462 001c 4261     		str	r2, [r0, #20]
 531:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 463              		.loc 1 531 3 is_stmt 1 view .LVU138
 531:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 464              		.loc 1 531 32 is_stmt 0 view .LVU139
 465 001e 0376     		strb	r3, [r0, #24]
 532:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 466              		.loc 1 532 3 is_stmt 1 view .LVU140
 532:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 467              		.loc 1 532 25 is_stmt 0 view .LVU141
 468 0020 4376     		strb	r3, [r0, #25]
 533:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 469              		.loc 1 533 3 is_stmt 1 view .LVU142
 533:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 470              		.loc 1 533 25 is_stmt 0 view .LVU143
 471 0022 8376     		strb	r3, [r0, #26]
 534:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 472              		.loc 1 534 3 is_stmt 1 view .LVU144
 534:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 473              		.loc 1 534 33 is_stmt 0 view .LVU145
 474 0024 C376     		strb	r3, [r0, #27]
 535:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 475              		.loc 1 535 3 is_stmt 1 view .LVU146
 535:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 476              		.loc 1 535 32 is_stmt 0 view .LVU147
 477 0026 0377     		strb	r3, [r0, #28]
 536:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 478              		.loc 1 536 3 is_stmt 1 view .LVU148
 536:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 479              		.loc 1 536 35 is_stmt 0 view .LVU149
 480 0028 4377     		strb	r3, [r0, #29]
 537:Src/main.c    ****   {
 481              		.loc 1 537 3 is_stmt 1 view .LVU150
 537:Src/main.c    ****   {
 482              		.loc 1 537 7 is_stmt 0 view .LVU151
 483 002a FFF7FEFF 		bl	HAL_CAN_Init
 484              	.LVL9:
 545:Src/main.c    **** 
 485              		.loc 1 545 1 view .LVU152
 486 002e 08BD     		pop	{r3, pc}
 487              	.L19:
 488              		.align	2
 489              	.L18:
 490 0030 00000000 		.word	hcan1
 491 0034 00640040 		.word	1073767424
 492              		.cfi_endproc
 493              	.LFE156:
 495              		.section	.text.MX_CAN3_Init,"ax",%progbits
ARM GAS  /tmp/ccrJKlhm.s 			page 29


 496              		.align	1
 497              		.syntax unified
 498              		.thumb
 499              		.thumb_func
 500              		.fpu fpv5-d16
 502              	MX_CAN3_Init:
 503              	.LFB157:
 553:Src/main.c    **** 
 504              		.loc 1 553 1 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508 0000 08B5     		push	{r3, lr}
 509              	.LCFI10:
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 3, -8
 512              		.cfi_offset 14, -4
 562:Src/main.c    ****   hcan3.Init.Prescaler = 3;
 513              		.loc 1 562 3 view .LVU154
 562:Src/main.c    ****   hcan3.Init.Prescaler = 3;
 514              		.loc 1 562 18 is_stmt 0 view .LVU155
 515 0002 0B48     		ldr	r0, .L22
 516 0004 0B4B     		ldr	r3, .L22+4
 517 0006 0360     		str	r3, [r0]
 563:Src/main.c    ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 518              		.loc 1 563 3 is_stmt 1 view .LVU156
 563:Src/main.c    ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 519              		.loc 1 563 24 is_stmt 0 view .LVU157
 520 0008 0323     		movs	r3, #3
 521 000a 4360     		str	r3, [r0, #4]
 564:Src/main.c    ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 522              		.loc 1 564 3 is_stmt 1 view .LVU158
 564:Src/main.c    ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 523              		.loc 1 564 19 is_stmt 0 view .LVU159
 524 000c 0023     		movs	r3, #0
 525 000e 8360     		str	r3, [r0, #8]
 565:Src/main.c    ****   hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 526              		.loc 1 565 3 is_stmt 1 view .LVU160
 565:Src/main.c    ****   hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 527              		.loc 1 565 28 is_stmt 0 view .LVU161
 528 0010 C360     		str	r3, [r0, #12]
 566:Src/main.c    ****   hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 529              		.loc 1 566 3 is_stmt 1 view .LVU162
 566:Src/main.c    ****   hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 530              		.loc 1 566 23 is_stmt 0 view .LVU163
 531 0012 4FF46022 		mov	r2, #917504
 532 0016 0261     		str	r2, [r0, #16]
 567:Src/main.c    ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 533              		.loc 1 567 3 is_stmt 1 view .LVU164
 567:Src/main.c    ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 534              		.loc 1 567 23 is_stmt 0 view .LVU165
 535 0018 4FF48012 		mov	r2, #1048576
 536 001c 4261     		str	r2, [r0, #20]
 568:Src/main.c    ****   hcan3.Init.AutoBusOff = DISABLE;
 537              		.loc 1 568 3 is_stmt 1 view .LVU166
 568:Src/main.c    ****   hcan3.Init.AutoBusOff = DISABLE;
 538              		.loc 1 568 32 is_stmt 0 view .LVU167
ARM GAS  /tmp/ccrJKlhm.s 			page 30


 539 001e 0376     		strb	r3, [r0, #24]
 569:Src/main.c    ****   hcan3.Init.AutoWakeUp = DISABLE;
 540              		.loc 1 569 3 is_stmt 1 view .LVU168
 569:Src/main.c    ****   hcan3.Init.AutoWakeUp = DISABLE;
 541              		.loc 1 569 25 is_stmt 0 view .LVU169
 542 0020 4376     		strb	r3, [r0, #25]
 570:Src/main.c    ****   hcan3.Init.AutoRetransmission = DISABLE;
 543              		.loc 1 570 3 is_stmt 1 view .LVU170
 570:Src/main.c    ****   hcan3.Init.AutoRetransmission = DISABLE;
 544              		.loc 1 570 25 is_stmt 0 view .LVU171
 545 0022 8376     		strb	r3, [r0, #26]
 571:Src/main.c    ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 546              		.loc 1 571 3 is_stmt 1 view .LVU172
 571:Src/main.c    ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 547              		.loc 1 571 33 is_stmt 0 view .LVU173
 548 0024 C376     		strb	r3, [r0, #27]
 572:Src/main.c    ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 549              		.loc 1 572 3 is_stmt 1 view .LVU174
 572:Src/main.c    ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 550              		.loc 1 572 32 is_stmt 0 view .LVU175
 551 0026 0377     		strb	r3, [r0, #28]
 573:Src/main.c    ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 552              		.loc 1 573 3 is_stmt 1 view .LVU176
 573:Src/main.c    ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 553              		.loc 1 573 35 is_stmt 0 view .LVU177
 554 0028 4377     		strb	r3, [r0, #29]
 574:Src/main.c    ****   {
 555              		.loc 1 574 3 is_stmt 1 view .LVU178
 574:Src/main.c    ****   {
 556              		.loc 1 574 7 is_stmt 0 view .LVU179
 557 002a FFF7FEFF 		bl	HAL_CAN_Init
 558              	.LVL10:
 582:Src/main.c    **** 
 559              		.loc 1 582 1 view .LVU180
 560 002e 08BD     		pop	{r3, pc}
 561              	.L23:
 562              		.align	2
 563              	.L22:
 564 0030 00000000 		.word	hcan3
 565 0034 00340040 		.word	1073755136
 566              		.cfi_endproc
 567              	.LFE157:
 569              		.section	.text.MX_SPI2_Init,"ax",%progbits
 570              		.align	1
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 574              		.fpu fpv5-d16
 576              	MX_SPI2_Init:
 577              	.LFB159:
 618:Src/main.c    **** 
 578              		.loc 1 618 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582 0000 08B5     		push	{r3, lr}
 583              	.LCFI11:
ARM GAS  /tmp/ccrJKlhm.s 			page 31


 584              		.cfi_def_cfa_offset 8
 585              		.cfi_offset 3, -8
 586              		.cfi_offset 14, -4
 628:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 587              		.loc 1 628 3 view .LVU182
 628:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 588              		.loc 1 628 18 is_stmt 0 view .LVU183
 589 0002 0E48     		ldr	r0, .L26
 590 0004 0E4B     		ldr	r3, .L26+4
 591 0006 0360     		str	r3, [r0]
 629:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 592              		.loc 1 629 3 is_stmt 1 view .LVU184
 629:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 593              		.loc 1 629 19 is_stmt 0 view .LVU185
 594 0008 4FF48273 		mov	r3, #260
 595 000c 4360     		str	r3, [r0, #4]
 630:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 596              		.loc 1 630 3 is_stmt 1 view .LVU186
 630:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 597              		.loc 1 630 24 is_stmt 0 view .LVU187
 598 000e 0023     		movs	r3, #0
 599 0010 8360     		str	r3, [r0, #8]
 631:Src/main.c    ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 600              		.loc 1 631 3 is_stmt 1 view .LVU188
 631:Src/main.c    ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 601              		.loc 1 631 23 is_stmt 0 view .LVU189
 602 0012 4FF4E062 		mov	r2, #1792
 603 0016 C260     		str	r2, [r0, #12]
 632:Src/main.c    ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 604              		.loc 1 632 3 is_stmt 1 view .LVU190
 632:Src/main.c    ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 605              		.loc 1 632 26 is_stmt 0 view .LVU191
 606 0018 0361     		str	r3, [r0, #16]
 633:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 607              		.loc 1 633 3 is_stmt 1 view .LVU192
 633:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 608              		.loc 1 633 23 is_stmt 0 view .LVU193
 609 001a 4361     		str	r3, [r0, #20]
 634:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 610              		.loc 1 634 3 is_stmt 1 view .LVU194
 634:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 611              		.loc 1 634 18 is_stmt 0 view .LVU195
 612 001c 4FF40072 		mov	r2, #512
 613 0020 8261     		str	r2, [r0, #24]
 635:Src/main.c    ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 614              		.loc 1 635 3 is_stmt 1 view .LVU196
 635:Src/main.c    ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 615              		.loc 1 635 32 is_stmt 0 view .LVU197
 616 0022 3822     		movs	r2, #56
 617 0024 C261     		str	r2, [r0, #28]
 636:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 618              		.loc 1 636 3 is_stmt 1 view .LVU198
 636:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 619              		.loc 1 636 23 is_stmt 0 view .LVU199
 620 0026 0362     		str	r3, [r0, #32]
 637:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 621              		.loc 1 637 3 is_stmt 1 view .LVU200
ARM GAS  /tmp/ccrJKlhm.s 			page 32


 637:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 622              		.loc 1 637 21 is_stmt 0 view .LVU201
 623 0028 4362     		str	r3, [r0, #36]
 638:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
 624              		.loc 1 638 3 is_stmt 1 view .LVU202
 638:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
 625              		.loc 1 638 29 is_stmt 0 view .LVU203
 626 002a 8362     		str	r3, [r0, #40]
 639:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 627              		.loc 1 639 3 is_stmt 1 view .LVU204
 639:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 628              		.loc 1 639 28 is_stmt 0 view .LVU205
 629 002c 0722     		movs	r2, #7
 630 002e C262     		str	r2, [r0, #44]
 640:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 631              		.loc 1 640 3 is_stmt 1 view .LVU206
 640:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 632              		.loc 1 640 24 is_stmt 0 view .LVU207
 633 0030 0363     		str	r3, [r0, #48]
 641:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 634              		.loc 1 641 3 is_stmt 1 view .LVU208
 641:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 635              		.loc 1 641 23 is_stmt 0 view .LVU209
 636 0032 0823     		movs	r3, #8
 637 0034 4363     		str	r3, [r0, #52]
 642:Src/main.c    ****   {
 638              		.loc 1 642 3 is_stmt 1 view .LVU210
 642:Src/main.c    ****   {
 639              		.loc 1 642 7 is_stmt 0 view .LVU211
 640 0036 FFF7FEFF 		bl	HAL_SPI_Init
 641              	.LVL11:
 650:Src/main.c    **** 
 642              		.loc 1 650 1 view .LVU212
 643 003a 08BD     		pop	{r3, pc}
 644              	.L27:
 645              		.align	2
 646              	.L26:
 647 003c 00000000 		.word	hspi2
 648 0040 00380040 		.word	1073756160
 649              		.cfi_endproc
 650              	.LFE159:
 652              		.section	.text.MX_TIM2_Init,"ax",%progbits
 653              		.align	1
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu fpv5-d16
 659              	MX_TIM2_Init:
 660              	.LFB160:
 658:Src/main.c    **** 
 661              		.loc 1 658 1 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 40
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665 0000 30B5     		push	{r4, r5, lr}
 666              	.LCFI12:
 667              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccrJKlhm.s 			page 33


 668              		.cfi_offset 4, -12
 669              		.cfi_offset 5, -8
 670              		.cfi_offset 14, -4
 671 0002 8BB0     		sub	sp, sp, #44
 672              	.LCFI13:
 673              		.cfi_def_cfa_offset 56
 664:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 674              		.loc 1 664 3 view .LVU214
 664:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 675              		.loc 1 664 27 is_stmt 0 view .LVU215
 676 0004 0024     		movs	r4, #0
 677 0006 0794     		str	r4, [sp, #28]
 678 0008 0894     		str	r4, [sp, #32]
 679 000a 0994     		str	r4, [sp, #36]
 665:Src/main.c    **** 
 680              		.loc 1 665 3 is_stmt 1 view .LVU216
 665:Src/main.c    **** 
 681              		.loc 1 665 22 is_stmt 0 view .LVU217
 682 000c 0094     		str	r4, [sp]
 683 000e 0194     		str	r4, [sp, #4]
 684 0010 0294     		str	r4, [sp, #8]
 685 0012 0394     		str	r4, [sp, #12]
 686 0014 0494     		str	r4, [sp, #16]
 687 0016 0594     		str	r4, [sp, #20]
 688 0018 0694     		str	r4, [sp, #24]
 670:Src/main.c    ****   htim2.Init.Prescaler = 0;
 689              		.loc 1 670 3 is_stmt 1 view .LVU218
 670:Src/main.c    ****   htim2.Init.Prescaler = 0;
 690              		.loc 1 670 18 is_stmt 0 view .LVU219
 691 001a 184D     		ldr	r5, .L30
 692 001c 4FF08043 		mov	r3, #1073741824
 693 0020 2B60     		str	r3, [r5]
 671:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 694              		.loc 1 671 3 is_stmt 1 view .LVU220
 671:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 695              		.loc 1 671 24 is_stmt 0 view .LVU221
 696 0022 6C60     		str	r4, [r5, #4]
 672:Src/main.c    ****   htim2.Init.Period = 0;
 697              		.loc 1 672 3 is_stmt 1 view .LVU222
 672:Src/main.c    ****   htim2.Init.Period = 0;
 698              		.loc 1 672 26 is_stmt 0 view .LVU223
 699 0024 AC60     		str	r4, [r5, #8]
 673:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 700              		.loc 1 673 3 is_stmt 1 view .LVU224
 673:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 701              		.loc 1 673 21 is_stmt 0 view .LVU225
 702 0026 EC60     		str	r4, [r5, #12]
 674:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 703              		.loc 1 674 3 is_stmt 1 view .LVU226
 674:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 704              		.loc 1 674 28 is_stmt 0 view .LVU227
 705 0028 2C61     		str	r4, [r5, #16]
 675:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 706              		.loc 1 675 3 is_stmt 1 view .LVU228
 675:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 707              		.loc 1 675 32 is_stmt 0 view .LVU229
 708 002a AC61     		str	r4, [r5, #24]
ARM GAS  /tmp/ccrJKlhm.s 			page 34


 676:Src/main.c    ****   {
 709              		.loc 1 676 3 is_stmt 1 view .LVU230
 676:Src/main.c    ****   {
 710              		.loc 1 676 7 is_stmt 0 view .LVU231
 711 002c 2846     		mov	r0, r5
 712 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 713              	.LVL12:
 680:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 714              		.loc 1 680 3 is_stmt 1 view .LVU232
 680:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 715              		.loc 1 680 37 is_stmt 0 view .LVU233
 716 0032 0794     		str	r4, [sp, #28]
 681:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 717              		.loc 1 681 3 is_stmt 1 view .LVU234
 681:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 718              		.loc 1 681 33 is_stmt 0 view .LVU235
 719 0034 0994     		str	r4, [sp, #36]
 682:Src/main.c    ****   {
 720              		.loc 1 682 3 is_stmt 1 view .LVU236
 682:Src/main.c    ****   {
 721              		.loc 1 682 7 is_stmt 0 view .LVU237
 722 0036 07A9     		add	r1, sp, #28
 723 0038 2846     		mov	r0, r5
 724 003a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 725              	.LVL13:
 686:Src/main.c    ****   sConfigOC.Pulse = 0;
 726              		.loc 1 686 3 is_stmt 1 view .LVU238
 686:Src/main.c    ****   sConfigOC.Pulse = 0;
 727              		.loc 1 686 20 is_stmt 0 view .LVU239
 728 003e 6023     		movs	r3, #96
 729 0040 0093     		str	r3, [sp]
 687:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 730              		.loc 1 687 3 is_stmt 1 view .LVU240
 687:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 731              		.loc 1 687 19 is_stmt 0 view .LVU241
 732 0042 0194     		str	r4, [sp, #4]
 688:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 733              		.loc 1 688 3 is_stmt 1 view .LVU242
 688:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 734              		.loc 1 688 24 is_stmt 0 view .LVU243
 735 0044 0294     		str	r4, [sp, #8]
 689:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 736              		.loc 1 689 3 is_stmt 1 view .LVU244
 689:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 737              		.loc 1 689 24 is_stmt 0 view .LVU245
 738 0046 0494     		str	r4, [sp, #16]
 690:Src/main.c    ****   {
 739              		.loc 1 690 3 is_stmt 1 view .LVU246
 690:Src/main.c    ****   {
 740              		.loc 1 690 7 is_stmt 0 view .LVU247
 741 0048 2246     		mov	r2, r4
 742 004a 6946     		mov	r1, sp
 743 004c 2846     		mov	r0, r5
 744 004e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 745              	.LVL14:
 694:Src/main.c    ****   {
 746              		.loc 1 694 3 is_stmt 1 view .LVU248
ARM GAS  /tmp/ccrJKlhm.s 			page 35


 694:Src/main.c    ****   {
 747              		.loc 1 694 7 is_stmt 0 view .LVU249
 748 0052 0422     		movs	r2, #4
 749 0054 6946     		mov	r1, sp
 750 0056 2846     		mov	r0, r5
 751 0058 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 752              	.LVL15:
 698:Src/main.c    ****   {
 753              		.loc 1 698 3 is_stmt 1 view .LVU250
 698:Src/main.c    ****   {
 754              		.loc 1 698 7 is_stmt 0 view .LVU251
 755 005c 0822     		movs	r2, #8
 756 005e 6946     		mov	r1, sp
 757 0060 2846     		mov	r0, r5
 758 0062 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 759              	.LVL16:
 702:Src/main.c    ****   {
 760              		.loc 1 702 3 is_stmt 1 view .LVU252
 702:Src/main.c    ****   {
 761              		.loc 1 702 7 is_stmt 0 view .LVU253
 762 0066 0C22     		movs	r2, #12
 763 0068 6946     		mov	r1, sp
 764 006a 2846     		mov	r0, r5
 765 006c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 766              	.LVL17:
 709:Src/main.c    **** 
 767              		.loc 1 709 3 is_stmt 1 view .LVU254
 768 0070 2846     		mov	r0, r5
 769 0072 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 770              	.LVL18:
 711:Src/main.c    **** 
 771              		.loc 1 711 1 is_stmt 0 view .LVU255
 772 0076 0BB0     		add	sp, sp, #44
 773              	.LCFI14:
 774              		.cfi_def_cfa_offset 12
 775              		@ sp needed
 776 0078 30BD     		pop	{r4, r5, pc}
 777              	.L31:
 778 007a 00BF     		.align	2
 779              	.L30:
 780 007c 00000000 		.word	htim2
 781              		.cfi_endproc
 782              	.LFE160:
 784              		.section	.text.MX_TIM3_Init,"ax",%progbits
 785              		.align	1
 786              		.syntax unified
 787              		.thumb
 788              		.thumb_func
 789              		.fpu fpv5-d16
 791              	MX_TIM3_Init:
 792              	.LFB161:
 719:Src/main.c    **** 
 793              		.loc 1 719 1 is_stmt 1 view -0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 40
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 797 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccrJKlhm.s 			page 36


 798              	.LCFI15:
 799              		.cfi_def_cfa_offset 12
 800              		.cfi_offset 4, -12
 801              		.cfi_offset 5, -8
 802              		.cfi_offset 14, -4
 803 0002 8BB0     		sub	sp, sp, #44
 804              	.LCFI16:
 805              		.cfi_def_cfa_offset 56
 725:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 806              		.loc 1 725 3 view .LVU257
 725:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 807              		.loc 1 725 27 is_stmt 0 view .LVU258
 808 0004 0024     		movs	r4, #0
 809 0006 0794     		str	r4, [sp, #28]
 810 0008 0894     		str	r4, [sp, #32]
 811 000a 0994     		str	r4, [sp, #36]
 726:Src/main.c    **** 
 812              		.loc 1 726 3 is_stmt 1 view .LVU259
 726:Src/main.c    **** 
 813              		.loc 1 726 22 is_stmt 0 view .LVU260
 814 000c 0094     		str	r4, [sp]
 815 000e 0194     		str	r4, [sp, #4]
 816 0010 0294     		str	r4, [sp, #8]
 817 0012 0394     		str	r4, [sp, #12]
 818 0014 0494     		str	r4, [sp, #16]
 819 0016 0594     		str	r4, [sp, #20]
 820 0018 0694     		str	r4, [sp, #24]
 731:Src/main.c    ****   htim3.Init.Prescaler = 0;
 821              		.loc 1 731 3 is_stmt 1 view .LVU261
 731:Src/main.c    ****   htim3.Init.Prescaler = 0;
 822              		.loc 1 731 18 is_stmt 0 view .LVU262
 823 001a 124D     		ldr	r5, .L34
 824 001c 124B     		ldr	r3, .L34+4
 825 001e 2B60     		str	r3, [r5]
 732:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 826              		.loc 1 732 3 is_stmt 1 view .LVU263
 732:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 827              		.loc 1 732 24 is_stmt 0 view .LVU264
 828 0020 6C60     		str	r4, [r5, #4]
 733:Src/main.c    ****   htim3.Init.Period = 0;
 829              		.loc 1 733 3 is_stmt 1 view .LVU265
 733:Src/main.c    ****   htim3.Init.Period = 0;
 830              		.loc 1 733 26 is_stmt 0 view .LVU266
 831 0022 AC60     		str	r4, [r5, #8]
 734:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 832              		.loc 1 734 3 is_stmt 1 view .LVU267
 734:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 833              		.loc 1 734 21 is_stmt 0 view .LVU268
 834 0024 EC60     		str	r4, [r5, #12]
 735:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 835              		.loc 1 735 3 is_stmt 1 view .LVU269
 735:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 836              		.loc 1 735 28 is_stmt 0 view .LVU270
 837 0026 2C61     		str	r4, [r5, #16]
 736:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 838              		.loc 1 736 3 is_stmt 1 view .LVU271
 736:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
ARM GAS  /tmp/ccrJKlhm.s 			page 37


 839              		.loc 1 736 32 is_stmt 0 view .LVU272
 840 0028 AC61     		str	r4, [r5, #24]
 737:Src/main.c    ****   {
 841              		.loc 1 737 3 is_stmt 1 view .LVU273
 737:Src/main.c    ****   {
 842              		.loc 1 737 7 is_stmt 0 view .LVU274
 843 002a 2846     		mov	r0, r5
 844 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 845              	.LVL19:
 741:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 846              		.loc 1 741 3 is_stmt 1 view .LVU275
 741:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 847              		.loc 1 741 37 is_stmt 0 view .LVU276
 848 0030 0794     		str	r4, [sp, #28]
 742:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 849              		.loc 1 742 3 is_stmt 1 view .LVU277
 742:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 850              		.loc 1 742 33 is_stmt 0 view .LVU278
 851 0032 0994     		str	r4, [sp, #36]
 743:Src/main.c    ****   {
 852              		.loc 1 743 3 is_stmt 1 view .LVU279
 743:Src/main.c    ****   {
 853              		.loc 1 743 7 is_stmt 0 view .LVU280
 854 0034 07A9     		add	r1, sp, #28
 855 0036 2846     		mov	r0, r5
 856 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 857              	.LVL20:
 747:Src/main.c    ****   sConfigOC.Pulse = 0;
 858              		.loc 1 747 3 is_stmt 1 view .LVU281
 747:Src/main.c    ****   sConfigOC.Pulse = 0;
 859              		.loc 1 747 20 is_stmt 0 view .LVU282
 860 003c 6023     		movs	r3, #96
 861 003e 0093     		str	r3, [sp]
 748:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 862              		.loc 1 748 3 is_stmt 1 view .LVU283
 748:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 863              		.loc 1 748 19 is_stmt 0 view .LVU284
 864 0040 0194     		str	r4, [sp, #4]
 749:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 865              		.loc 1 749 3 is_stmt 1 view .LVU285
 749:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 866              		.loc 1 749 24 is_stmt 0 view .LVU286
 867 0042 0294     		str	r4, [sp, #8]
 750:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 868              		.loc 1 750 3 is_stmt 1 view .LVU287
 750:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 869              		.loc 1 750 24 is_stmt 0 view .LVU288
 870 0044 0494     		str	r4, [sp, #16]
 751:Src/main.c    ****   {
 871              		.loc 1 751 3 is_stmt 1 view .LVU289
 751:Src/main.c    ****   {
 872              		.loc 1 751 7 is_stmt 0 view .LVU290
 873 0046 2246     		mov	r2, r4
 874 0048 6946     		mov	r1, sp
 875 004a 2846     		mov	r0, r5
 876 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 877              	.LVL21:
ARM GAS  /tmp/ccrJKlhm.s 			page 38


 755:Src/main.c    ****   {
 878              		.loc 1 755 3 is_stmt 1 view .LVU291
 755:Src/main.c    ****   {
 879              		.loc 1 755 7 is_stmt 0 view .LVU292
 880 0050 0422     		movs	r2, #4
 881 0052 6946     		mov	r1, sp
 882 0054 2846     		mov	r0, r5
 883 0056 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 884              	.LVL22:
 762:Src/main.c    **** 
 885              		.loc 1 762 3 is_stmt 1 view .LVU293
 886 005a 2846     		mov	r0, r5
 887 005c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 888              	.LVL23:
 764:Src/main.c    **** 
 889              		.loc 1 764 1 is_stmt 0 view .LVU294
 890 0060 0BB0     		add	sp, sp, #44
 891              	.LCFI17:
 892              		.cfi_def_cfa_offset 12
 893              		@ sp needed
 894 0062 30BD     		pop	{r4, r5, pc}
 895              	.L35:
 896              		.align	2
 897              	.L34:
 898 0064 00000000 		.word	htim3
 899 0068 00040040 		.word	1073742848
 900              		.cfi_endproc
 901              	.LFE161:
 903              		.section	.text.MX_TIM4_Init,"ax",%progbits
 904              		.align	1
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 908              		.fpu fpv5-d16
 910              	MX_TIM4_Init:
 911              	.LFB162:
 772:Src/main.c    **** 
 912              		.loc 1 772 1 is_stmt 1 view -0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 40
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916 0000 30B5     		push	{r4, r5, lr}
 917              	.LCFI18:
 918              		.cfi_def_cfa_offset 12
 919              		.cfi_offset 4, -12
 920              		.cfi_offset 5, -8
 921              		.cfi_offset 14, -4
 922 0002 8BB0     		sub	sp, sp, #44
 923              	.LCFI19:
 924              		.cfi_def_cfa_offset 56
 778:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 925              		.loc 1 778 3 view .LVU296
 778:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 926              		.loc 1 778 27 is_stmt 0 view .LVU297
 927 0004 0024     		movs	r4, #0
 928 0006 0794     		str	r4, [sp, #28]
 929 0008 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/ccrJKlhm.s 			page 39


 930 000a 0994     		str	r4, [sp, #36]
 779:Src/main.c    **** 
 931              		.loc 1 779 3 is_stmt 1 view .LVU298
 779:Src/main.c    **** 
 932              		.loc 1 779 22 is_stmt 0 view .LVU299
 933 000c 0094     		str	r4, [sp]
 934 000e 0194     		str	r4, [sp, #4]
 935 0010 0294     		str	r4, [sp, #8]
 936 0012 0394     		str	r4, [sp, #12]
 937 0014 0494     		str	r4, [sp, #16]
 938 0016 0594     		str	r4, [sp, #20]
 939 0018 0694     		str	r4, [sp, #24]
 784:Src/main.c    ****   htim4.Init.Prescaler = 0;
 940              		.loc 1 784 3 is_stmt 1 view .LVU300
 784:Src/main.c    ****   htim4.Init.Prescaler = 0;
 941              		.loc 1 784 18 is_stmt 0 view .LVU301
 942 001a 174D     		ldr	r5, .L38
 943 001c 174B     		ldr	r3, .L38+4
 944 001e 2B60     		str	r3, [r5]
 785:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 945              		.loc 1 785 3 is_stmt 1 view .LVU302
 785:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 946              		.loc 1 785 24 is_stmt 0 view .LVU303
 947 0020 6C60     		str	r4, [r5, #4]
 786:Src/main.c    ****   htim4.Init.Period = 0;
 948              		.loc 1 786 3 is_stmt 1 view .LVU304
 786:Src/main.c    ****   htim4.Init.Period = 0;
 949              		.loc 1 786 26 is_stmt 0 view .LVU305
 950 0022 AC60     		str	r4, [r5, #8]
 787:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 951              		.loc 1 787 3 is_stmt 1 view .LVU306
 787:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 952              		.loc 1 787 21 is_stmt 0 view .LVU307
 953 0024 EC60     		str	r4, [r5, #12]
 788:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 954              		.loc 1 788 3 is_stmt 1 view .LVU308
 788:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 955              		.loc 1 788 28 is_stmt 0 view .LVU309
 956 0026 2C61     		str	r4, [r5, #16]
 789:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 957              		.loc 1 789 3 is_stmt 1 view .LVU310
 789:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 958              		.loc 1 789 32 is_stmt 0 view .LVU311
 959 0028 AC61     		str	r4, [r5, #24]
 790:Src/main.c    ****   {
 960              		.loc 1 790 3 is_stmt 1 view .LVU312
 790:Src/main.c    ****   {
 961              		.loc 1 790 7 is_stmt 0 view .LVU313
 962 002a 2846     		mov	r0, r5
 963 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 964              	.LVL24:
 794:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 965              		.loc 1 794 3 is_stmt 1 view .LVU314
 794:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 966              		.loc 1 794 37 is_stmt 0 view .LVU315
 967 0030 0794     		str	r4, [sp, #28]
 795:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
ARM GAS  /tmp/ccrJKlhm.s 			page 40


 968              		.loc 1 795 3 is_stmt 1 view .LVU316
 795:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 969              		.loc 1 795 33 is_stmt 0 view .LVU317
 970 0032 0994     		str	r4, [sp, #36]
 796:Src/main.c    ****   {
 971              		.loc 1 796 3 is_stmt 1 view .LVU318
 796:Src/main.c    ****   {
 972              		.loc 1 796 7 is_stmt 0 view .LVU319
 973 0034 07A9     		add	r1, sp, #28
 974 0036 2846     		mov	r0, r5
 975 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 976              	.LVL25:
 800:Src/main.c    ****   sConfigOC.Pulse = 0;
 977              		.loc 1 800 3 is_stmt 1 view .LVU320
 800:Src/main.c    ****   sConfigOC.Pulse = 0;
 978              		.loc 1 800 20 is_stmt 0 view .LVU321
 979 003c 6023     		movs	r3, #96
 980 003e 0093     		str	r3, [sp]
 801:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 981              		.loc 1 801 3 is_stmt 1 view .LVU322
 801:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 982              		.loc 1 801 19 is_stmt 0 view .LVU323
 983 0040 0194     		str	r4, [sp, #4]
 802:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 984              		.loc 1 802 3 is_stmt 1 view .LVU324
 802:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 985              		.loc 1 802 24 is_stmt 0 view .LVU325
 986 0042 0294     		str	r4, [sp, #8]
 803:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 987              		.loc 1 803 3 is_stmt 1 view .LVU326
 803:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 988              		.loc 1 803 24 is_stmt 0 view .LVU327
 989 0044 0494     		str	r4, [sp, #16]
 804:Src/main.c    ****   {
 990              		.loc 1 804 3 is_stmt 1 view .LVU328
 804:Src/main.c    ****   {
 991              		.loc 1 804 7 is_stmt 0 view .LVU329
 992 0046 2246     		mov	r2, r4
 993 0048 6946     		mov	r1, sp
 994 004a 2846     		mov	r0, r5
 995 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 996              	.LVL26:
 808:Src/main.c    ****   {
 997              		.loc 1 808 3 is_stmt 1 view .LVU330
 808:Src/main.c    ****   {
 998              		.loc 1 808 7 is_stmt 0 view .LVU331
 999 0050 0422     		movs	r2, #4
 1000 0052 6946     		mov	r1, sp
 1001 0054 2846     		mov	r0, r5
 1002 0056 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1003              	.LVL27:
 812:Src/main.c    ****   {
 1004              		.loc 1 812 3 is_stmt 1 view .LVU332
 812:Src/main.c    ****   {
 1005              		.loc 1 812 7 is_stmt 0 view .LVU333
 1006 005a 0822     		movs	r2, #8
 1007 005c 6946     		mov	r1, sp
ARM GAS  /tmp/ccrJKlhm.s 			page 41


 1008 005e 2846     		mov	r0, r5
 1009 0060 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1010              	.LVL28:
 816:Src/main.c    ****   {
 1011              		.loc 1 816 3 is_stmt 1 view .LVU334
 816:Src/main.c    ****   {
 1012              		.loc 1 816 7 is_stmt 0 view .LVU335
 1013 0064 0C22     		movs	r2, #12
 1014 0066 6946     		mov	r1, sp
 1015 0068 2846     		mov	r0, r5
 1016 006a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1017              	.LVL29:
 823:Src/main.c    **** 
 1018              		.loc 1 823 3 is_stmt 1 view .LVU336
 1019 006e 2846     		mov	r0, r5
 1020 0070 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1021              	.LVL30:
 825:Src/main.c    **** 
 1022              		.loc 1 825 1 is_stmt 0 view .LVU337
 1023 0074 0BB0     		add	sp, sp, #44
 1024              	.LCFI20:
 1025              		.cfi_def_cfa_offset 12
 1026              		@ sp needed
 1027 0076 30BD     		pop	{r4, r5, pc}
 1028              	.L39:
 1029              		.align	2
 1030              	.L38:
 1031 0078 00000000 		.word	htim4
 1032 007c 00080040 		.word	1073743872
 1033              		.cfi_endproc
 1034              	.LFE162:
 1036              		.section	.text.MX_TIM8_Init,"ax",%progbits
 1037              		.align	1
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu fpv5-d16
 1043              	MX_TIM8_Init:
 1044              	.LFB164:
 878:Src/main.c    **** 
 1045              		.loc 1 878 1 is_stmt 1 view -0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 88
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049 0000 30B5     		push	{r4, r5, lr}
 1050              	.LCFI21:
 1051              		.cfi_def_cfa_offset 12
 1052              		.cfi_offset 4, -12
 1053              		.cfi_offset 5, -8
 1054              		.cfi_offset 14, -4
 1055 0002 97B0     		sub	sp, sp, #92
 1056              	.LCFI22:
 1057              		.cfi_def_cfa_offset 104
 884:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1058              		.loc 1 884 3 view .LVU339
 884:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1059              		.loc 1 884 27 is_stmt 0 view .LVU340
ARM GAS  /tmp/ccrJKlhm.s 			page 42


 1060 0004 0024     		movs	r4, #0
 1061 0006 1394     		str	r4, [sp, #76]
 1062 0008 1494     		str	r4, [sp, #80]
 1063 000a 1594     		str	r4, [sp, #84]
 885:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1064              		.loc 1 885 3 is_stmt 1 view .LVU341
 885:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1065              		.loc 1 885 22 is_stmt 0 view .LVU342
 1066 000c 0C94     		str	r4, [sp, #48]
 1067 000e 0D94     		str	r4, [sp, #52]
 1068 0010 0E94     		str	r4, [sp, #56]
 1069 0012 0F94     		str	r4, [sp, #60]
 1070 0014 1094     		str	r4, [sp, #64]
 1071 0016 1194     		str	r4, [sp, #68]
 1072 0018 1294     		str	r4, [sp, #72]
 886:Src/main.c    **** 
 1073              		.loc 1 886 3 is_stmt 1 view .LVU343
 886:Src/main.c    **** 
 1074              		.loc 1 886 34 is_stmt 0 view .LVU344
 1075 001a 2C22     		movs	r2, #44
 1076 001c 2146     		mov	r1, r4
 1077 001e 01A8     		add	r0, sp, #4
 1078 0020 FFF7FEFF 		bl	memset
 1079              	.LVL31:
 891:Src/main.c    ****   htim8.Init.Prescaler = 0;
 1080              		.loc 1 891 3 is_stmt 1 view .LVU345
 891:Src/main.c    ****   htim8.Init.Prescaler = 0;
 1081              		.loc 1 891 18 is_stmt 0 view .LVU346
 1082 0024 1B4D     		ldr	r5, .L42
 1083 0026 1C4B     		ldr	r3, .L42+4
 1084 0028 2B60     		str	r3, [r5]
 892:Src/main.c    ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 1085              		.loc 1 892 3 is_stmt 1 view .LVU347
 892:Src/main.c    ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 1086              		.loc 1 892 24 is_stmt 0 view .LVU348
 1087 002a 6C60     		str	r4, [r5, #4]
 893:Src/main.c    ****   htim8.Init.Period = 0;
 1088              		.loc 1 893 3 is_stmt 1 view .LVU349
 893:Src/main.c    ****   htim8.Init.Period = 0;
 1089              		.loc 1 893 26 is_stmt 0 view .LVU350
 1090 002c AC60     		str	r4, [r5, #8]
 894:Src/main.c    ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1091              		.loc 1 894 3 is_stmt 1 view .LVU351
 894:Src/main.c    ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1092              		.loc 1 894 21 is_stmt 0 view .LVU352
 1093 002e EC60     		str	r4, [r5, #12]
 895:Src/main.c    ****   htim8.Init.RepetitionCounter = 0;
 1094              		.loc 1 895 3 is_stmt 1 view .LVU353
 895:Src/main.c    ****   htim8.Init.RepetitionCounter = 0;
 1095              		.loc 1 895 28 is_stmt 0 view .LVU354
 1096 0030 2C61     		str	r4, [r5, #16]
 896:Src/main.c    ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1097              		.loc 1 896 3 is_stmt 1 view .LVU355
 896:Src/main.c    ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1098              		.loc 1 896 32 is_stmt 0 view .LVU356
 1099 0032 6C61     		str	r4, [r5, #20]
 897:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
ARM GAS  /tmp/ccrJKlhm.s 			page 43


 1100              		.loc 1 897 3 is_stmt 1 view .LVU357
 897:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 1101              		.loc 1 897 32 is_stmt 0 view .LVU358
 1102 0034 AC61     		str	r4, [r5, #24]
 898:Src/main.c    ****   {
 1103              		.loc 1 898 3 is_stmt 1 view .LVU359
 898:Src/main.c    ****   {
 1104              		.loc 1 898 7 is_stmt 0 view .LVU360
 1105 0036 2846     		mov	r0, r5
 1106 0038 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1107              	.LVL32:
 902:Src/main.c    ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1108              		.loc 1 902 3 is_stmt 1 view .LVU361
 902:Src/main.c    ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1109              		.loc 1 902 37 is_stmt 0 view .LVU362
 1110 003c 1394     		str	r4, [sp, #76]
 903:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1111              		.loc 1 903 3 is_stmt 1 view .LVU363
 903:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1112              		.loc 1 903 38 is_stmt 0 view .LVU364
 1113 003e 1494     		str	r4, [sp, #80]
 904:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 1114              		.loc 1 904 3 is_stmt 1 view .LVU365
 904:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 1115              		.loc 1 904 33 is_stmt 0 view .LVU366
 1116 0040 1594     		str	r4, [sp, #84]
 905:Src/main.c    ****   {
 1117              		.loc 1 905 3 is_stmt 1 view .LVU367
 905:Src/main.c    ****   {
 1118              		.loc 1 905 7 is_stmt 0 view .LVU368
 1119 0042 13A9     		add	r1, sp, #76
 1120 0044 2846     		mov	r0, r5
 1121 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1122              	.LVL33:
 909:Src/main.c    ****   sConfigOC.Pulse = 0;
 1123              		.loc 1 909 3 is_stmt 1 view .LVU369
 909:Src/main.c    ****   sConfigOC.Pulse = 0;
 1124              		.loc 1 909 20 is_stmt 0 view .LVU370
 1125 004a 6023     		movs	r3, #96
 1126 004c 0C93     		str	r3, [sp, #48]
 910:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1127              		.loc 1 910 3 is_stmt 1 view .LVU371
 910:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1128              		.loc 1 910 19 is_stmt 0 view .LVU372
 1129 004e 0D94     		str	r4, [sp, #52]
 911:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1130              		.loc 1 911 3 is_stmt 1 view .LVU373
 911:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1131              		.loc 1 911 24 is_stmt 0 view .LVU374
 1132 0050 0E94     		str	r4, [sp, #56]
 912:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1133              		.loc 1 912 3 is_stmt 1 view .LVU375
 912:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1134              		.loc 1 912 25 is_stmt 0 view .LVU376
 1135 0052 0F94     		str	r4, [sp, #60]
 913:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1136              		.loc 1 913 3 is_stmt 1 view .LVU377
ARM GAS  /tmp/ccrJKlhm.s 			page 44


 913:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1137              		.loc 1 913 24 is_stmt 0 view .LVU378
 1138 0054 1094     		str	r4, [sp, #64]
 914:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1139              		.loc 1 914 3 is_stmt 1 view .LVU379
 914:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1140              		.loc 1 914 25 is_stmt 0 view .LVU380
 1141 0056 1194     		str	r4, [sp, #68]
 915:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1142              		.loc 1 915 3 is_stmt 1 view .LVU381
 915:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1143              		.loc 1 915 26 is_stmt 0 view .LVU382
 1144 0058 1294     		str	r4, [sp, #72]
 916:Src/main.c    ****   {
 1145              		.loc 1 916 3 is_stmt 1 view .LVU383
 916:Src/main.c    ****   {
 1146              		.loc 1 916 7 is_stmt 0 view .LVU384
 1147 005a 2246     		mov	r2, r4
 1148 005c 0CA9     		add	r1, sp, #48
 1149 005e 2846     		mov	r0, r5
 1150 0060 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1151              	.LVL34:
 920:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1152              		.loc 1 920 3 is_stmt 1 view .LVU385
 920:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1153              		.loc 1 920 40 is_stmt 0 view .LVU386
 1154 0064 0194     		str	r4, [sp, #4]
 921:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1155              		.loc 1 921 3 is_stmt 1 view .LVU387
 921:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1156              		.loc 1 921 41 is_stmt 0 view .LVU388
 1157 0066 0294     		str	r4, [sp, #8]
 922:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1158              		.loc 1 922 3 is_stmt 1 view .LVU389
 922:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1159              		.loc 1 922 34 is_stmt 0 view .LVU390
 1160 0068 0394     		str	r4, [sp, #12]
 923:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1161              		.loc 1 923 3 is_stmt 1 view .LVU391
 923:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1162              		.loc 1 923 33 is_stmt 0 view .LVU392
 1163 006a 0494     		str	r4, [sp, #16]
 924:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1164              		.loc 1 924 3 is_stmt 1 view .LVU393
 924:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1165              		.loc 1 924 35 is_stmt 0 view .LVU394
 1166 006c 0594     		str	r4, [sp, #20]
 925:Src/main.c    ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1167              		.loc 1 925 3 is_stmt 1 view .LVU395
 925:Src/main.c    ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1168              		.loc 1 925 38 is_stmt 0 view .LVU396
 1169 006e 4FF40053 		mov	r3, #8192
 1170 0072 0693     		str	r3, [sp, #24]
 926:Src/main.c    ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1171              		.loc 1 926 3 is_stmt 1 view .LVU397
 926:Src/main.c    ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1172              		.loc 1 926 36 is_stmt 0 view .LVU398
ARM GAS  /tmp/ccrJKlhm.s 			page 45


 1173 0074 0794     		str	r4, [sp, #28]
 927:Src/main.c    ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1174              		.loc 1 927 3 is_stmt 1 view .LVU399
 927:Src/main.c    ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1175              		.loc 1 927 36 is_stmt 0 view .LVU400
 1176 0076 0894     		str	r4, [sp, #32]
 928:Src/main.c    ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1177              		.loc 1 928 3 is_stmt 1 view .LVU401
 928:Src/main.c    ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1178              		.loc 1 928 39 is_stmt 0 view .LVU402
 1179 0078 4FF00073 		mov	r3, #33554432
 1180 007c 0993     		str	r3, [sp, #36]
 929:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1181              		.loc 1 929 3 is_stmt 1 view .LVU403
 929:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1182              		.loc 1 929 37 is_stmt 0 view .LVU404
 1183 007e 0A94     		str	r4, [sp, #40]
 930:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 1184              		.loc 1 930 3 is_stmt 1 view .LVU405
 930:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 1185              		.loc 1 930 40 is_stmt 0 view .LVU406
 1186 0080 0B94     		str	r4, [sp, #44]
 931:Src/main.c    ****   {
 1187              		.loc 1 931 3 is_stmt 1 view .LVU407
 931:Src/main.c    ****   {
 1188              		.loc 1 931 7 is_stmt 0 view .LVU408
 1189 0082 01A9     		add	r1, sp, #4
 1190 0084 2846     		mov	r0, r5
 1191 0086 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1192              	.LVL35:
 938:Src/main.c    **** 
 1193              		.loc 1 938 3 is_stmt 1 view .LVU409
 1194 008a 2846     		mov	r0, r5
 1195 008c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1196              	.LVL36:
 940:Src/main.c    **** 
 1197              		.loc 1 940 1 is_stmt 0 view .LVU410
 1198 0090 17B0     		add	sp, sp, #92
 1199              	.LCFI23:
 1200              		.cfi_def_cfa_offset 12
 1201              		@ sp needed
 1202 0092 30BD     		pop	{r4, r5, pc}
 1203              	.L43:
 1204              		.align	2
 1205              	.L42:
 1206 0094 00000000 		.word	htim8
 1207 0098 00040140 		.word	1073808384
 1208              		.cfi_endproc
 1209              	.LFE164:
 1211              		.section	.text.MX_UART4_Init,"ax",%progbits
 1212              		.align	1
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu fpv5-d16
 1218              	MX_UART4_Init:
 1219              	.LFB165:
ARM GAS  /tmp/ccrJKlhm.s 			page 46


 948:Src/main.c    **** 
 1220              		.loc 1 948 1 is_stmt 1 view -0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 0
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224 0000 08B5     		push	{r3, lr}
 1225              	.LCFI24:
 1226              		.cfi_def_cfa_offset 8
 1227              		.cfi_offset 3, -8
 1228              		.cfi_offset 14, -4
 957:Src/main.c    ****   huart4.Init.BaudRate = 115200;
 1229              		.loc 1 957 3 view .LVU412
 957:Src/main.c    ****   huart4.Init.BaudRate = 115200;
 1230              		.loc 1 957 19 is_stmt 0 view .LVU413
 1231 0002 0948     		ldr	r0, .L46
 1232 0004 094B     		ldr	r3, .L46+4
 1233 0006 0360     		str	r3, [r0]
 958:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 1234              		.loc 1 958 3 is_stmt 1 view .LVU414
 958:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 1235              		.loc 1 958 24 is_stmt 0 view .LVU415
 1236 0008 4FF4E133 		mov	r3, #115200
 1237 000c 4360     		str	r3, [r0, #4]
 959:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 1238              		.loc 1 959 3 is_stmt 1 view .LVU416
 959:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 1239              		.loc 1 959 26 is_stmt 0 view .LVU417
 1240 000e 0023     		movs	r3, #0
 1241 0010 8360     		str	r3, [r0, #8]
 960:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 1242              		.loc 1 960 3 is_stmt 1 view .LVU418
 960:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 1243              		.loc 1 960 24 is_stmt 0 view .LVU419
 1244 0012 C360     		str	r3, [r0, #12]
 961:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 1245              		.loc 1 961 3 is_stmt 1 view .LVU420
 961:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 1246              		.loc 1 961 22 is_stmt 0 view .LVU421
 1247 0014 0361     		str	r3, [r0, #16]
 962:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1248              		.loc 1 962 3 is_stmt 1 view .LVU422
 962:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1249              		.loc 1 962 20 is_stmt 0 view .LVU423
 1250 0016 0C22     		movs	r2, #12
 1251 0018 4261     		str	r2, [r0, #20]
 963:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 1252              		.loc 1 963 3 is_stmt 1 view .LVU424
 963:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 1253              		.loc 1 963 25 is_stmt 0 view .LVU425
 1254 001a 8361     		str	r3, [r0, #24]
 964:Src/main.c    ****   huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1255              		.loc 1 964 3 is_stmt 1 view .LVU426
 964:Src/main.c    ****   huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1256              		.loc 1 964 28 is_stmt 0 view .LVU427
 1257 001c C361     		str	r3, [r0, #28]
 965:Src/main.c    ****   huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1258              		.loc 1 965 3 is_stmt 1 view .LVU428
ARM GAS  /tmp/ccrJKlhm.s 			page 47


 965:Src/main.c    ****   huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1259              		.loc 1 965 30 is_stmt 0 view .LVU429
 1260 001e 0362     		str	r3, [r0, #32]
 966:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 1261              		.loc 1 966 3 is_stmt 1 view .LVU430
 966:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 1262              		.loc 1 966 38 is_stmt 0 view .LVU431
 1263 0020 4362     		str	r3, [r0, #36]
 967:Src/main.c    ****   {
 1264              		.loc 1 967 3 is_stmt 1 view .LVU432
 967:Src/main.c    ****   {
 1265              		.loc 1 967 7 is_stmt 0 view .LVU433
 1266 0022 FFF7FEFF 		bl	HAL_UART_Init
 1267              	.LVL37:
 975:Src/main.c    **** 
 1268              		.loc 1 975 1 view .LVU434
 1269 0026 08BD     		pop	{r3, pc}
 1270              	.L47:
 1271              		.align	2
 1272              	.L46:
 1273 0028 00000000 		.word	huart4
 1274 002c 004C0040 		.word	1073761280
 1275              		.cfi_endproc
 1276              	.LFE165:
 1278              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1279              		.align	1
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
 1283              		.fpu fpv5-d16
 1285              	MX_TIM5_Init:
 1286              	.LFB163:
 833:Src/main.c    **** 
 1287              		.loc 1 833 1 is_stmt 1 view -0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 32
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 1291 0000 30B5     		push	{r4, r5, lr}
 1292              	.LCFI25:
 1293              		.cfi_def_cfa_offset 12
 1294              		.cfi_offset 4, -12
 1295              		.cfi_offset 5, -8
 1296              		.cfi_offset 14, -4
 1297 0002 89B0     		sub	sp, sp, #36
 1298              	.LCFI26:
 1299              		.cfi_def_cfa_offset 48
 839:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1300              		.loc 1 839 3 view .LVU436
 839:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1301              		.loc 1 839 26 is_stmt 0 view .LVU437
 1302 0004 0024     		movs	r4, #0
 1303 0006 0494     		str	r4, [sp, #16]
 1304 0008 0594     		str	r4, [sp, #20]
 1305 000a 0694     		str	r4, [sp, #24]
 1306 000c 0794     		str	r4, [sp, #28]
 840:Src/main.c    **** 
 1307              		.loc 1 840 3 is_stmt 1 view .LVU438
ARM GAS  /tmp/ccrJKlhm.s 			page 48


 840:Src/main.c    **** 
 1308              		.loc 1 840 27 is_stmt 0 view .LVU439
 1309 000e 0194     		str	r4, [sp, #4]
 1310 0010 0294     		str	r4, [sp, #8]
 1311 0012 0394     		str	r4, [sp, #12]
 845:Src/main.c    ****   htim5.Init.Prescaler = 108;
 1312              		.loc 1 845 3 is_stmt 1 view .LVU440
 845:Src/main.c    ****   htim5.Init.Prescaler = 108;
 1313              		.loc 1 845 18 is_stmt 0 view .LVU441
 1314 0014 0E4D     		ldr	r5, .L50
 1315 0016 0F4B     		ldr	r3, .L50+4
 1316 0018 2B60     		str	r3, [r5]
 846:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1317              		.loc 1 846 3 is_stmt 1 view .LVU442
 846:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1318              		.loc 1 846 24 is_stmt 0 view .LVU443
 1319 001a 6C23     		movs	r3, #108
 1320 001c 6B60     		str	r3, [r5, #4]
 847:Src/main.c    ****   htim5.Init.Period = 999;
 1321              		.loc 1 847 3 is_stmt 1 view .LVU444
 847:Src/main.c    ****   htim5.Init.Period = 999;
 1322              		.loc 1 847 26 is_stmt 0 view .LVU445
 1323 001e AC60     		str	r4, [r5, #8]
 848:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1324              		.loc 1 848 3 is_stmt 1 view .LVU446
 848:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1325              		.loc 1 848 21 is_stmt 0 view .LVU447
 1326 0020 40F2E733 		movw	r3, #999
 1327 0024 EB60     		str	r3, [r5, #12]
 849:Src/main.c    ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1328              		.loc 1 849 3 is_stmt 1 view .LVU448
 849:Src/main.c    ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1329              		.loc 1 849 28 is_stmt 0 view .LVU449
 1330 0026 2C61     		str	r4, [r5, #16]
 850:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 1331              		.loc 1 850 3 is_stmt 1 view .LVU450
 850:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 1332              		.loc 1 850 32 is_stmt 0 view .LVU451
 1333 0028 AC61     		str	r4, [r5, #24]
 851:Src/main.c    ****   {
 1334              		.loc 1 851 3 is_stmt 1 view .LVU452
 851:Src/main.c    ****   {
 1335              		.loc 1 851 7 is_stmt 0 view .LVU453
 1336 002a 2846     		mov	r0, r5
 1337 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1338              	.LVL38:
 855:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 1339              		.loc 1 855 3 is_stmt 1 view .LVU454
 855:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 1340              		.loc 1 855 34 is_stmt 0 view .LVU455
 1341 0030 4FF48053 		mov	r3, #4096
 1342 0034 0493     		str	r3, [sp, #16]
 856:Src/main.c    ****   {
 1343              		.loc 1 856 3 is_stmt 1 view .LVU456
 856:Src/main.c    ****   {
 1344              		.loc 1 856 7 is_stmt 0 view .LVU457
 1345 0036 04A9     		add	r1, sp, #16
ARM GAS  /tmp/ccrJKlhm.s 			page 49


 1346 0038 2846     		mov	r0, r5
 1347 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1348              	.LVL39:
 860:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1349              		.loc 1 860 3 is_stmt 1 view .LVU458
 860:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1350              		.loc 1 860 37 is_stmt 0 view .LVU459
 1351 003e 0194     		str	r4, [sp, #4]
 861:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1352              		.loc 1 861 3 is_stmt 1 view .LVU460
 861:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1353              		.loc 1 861 33 is_stmt 0 view .LVU461
 1354 0040 0394     		str	r4, [sp, #12]
 862:Src/main.c    ****   {
 1355              		.loc 1 862 3 is_stmt 1 view .LVU462
 862:Src/main.c    ****   {
 1356              		.loc 1 862 7 is_stmt 0 view .LVU463
 1357 0042 01A9     		add	r1, sp, #4
 1358 0044 2846     		mov	r0, r5
 1359 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1360              	.LVL40:
 870:Src/main.c    **** 
 1361              		.loc 1 870 1 view .LVU464
 1362 004a 09B0     		add	sp, sp, #36
 1363              	.LCFI27:
 1364              		.cfi_def_cfa_offset 12
 1365              		@ sp needed
 1366 004c 30BD     		pop	{r4, r5, pc}
 1367              	.L51:
 1368 004e 00BF     		.align	2
 1369              	.L50:
 1370 0050 00000000 		.word	htim5
 1371 0054 000C0040 		.word	1073744896
 1372              		.cfi_endproc
 1373              	.LFE163:
 1375              		.section	.text.SystemClock_Config,"ax",%progbits
 1376              		.align	1
 1377              		.global	SystemClock_Config
 1378              		.syntax unified
 1379              		.thumb
 1380              		.thumb_func
 1381              		.fpu fpv5-d16
 1383              	SystemClock_Config:
 1384              	.LFB154:
 407:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1385              		.loc 1 407 1 is_stmt 1 view -0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 224
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389 0000 30B5     		push	{r4, r5, lr}
 1390              	.LCFI28:
 1391              		.cfi_def_cfa_offset 12
 1392              		.cfi_offset 4, -12
 1393              		.cfi_offset 5, -8
 1394              		.cfi_offset 14, -4
 1395 0002 B9B0     		sub	sp, sp, #228
 1396              	.LCFI29:
ARM GAS  /tmp/ccrJKlhm.s 			page 50


 1397              		.cfi_def_cfa_offset 240
 408:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1398              		.loc 1 408 3 view .LVU466
 408:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1399              		.loc 1 408 22 is_stmt 0 view .LVU467
 1400 0004 3422     		movs	r2, #52
 1401 0006 0021     		movs	r1, #0
 1402 0008 2BA8     		add	r0, sp, #172
 1403 000a FFF7FEFF 		bl	memset
 1404              	.LVL41:
 409:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1405              		.loc 1 409 3 is_stmt 1 view .LVU468
 409:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1406              		.loc 1 409 22 is_stmt 0 view .LVU469
 1407 000e 0024     		movs	r4, #0
 1408 0010 2694     		str	r4, [sp, #152]
 1409 0012 2794     		str	r4, [sp, #156]
 1410 0014 2894     		str	r4, [sp, #160]
 1411 0016 2994     		str	r4, [sp, #164]
 1412 0018 2A94     		str	r4, [sp, #168]
 410:Src/main.c    **** 
 1413              		.loc 1 410 3 is_stmt 1 view .LVU470
 410:Src/main.c    **** 
 1414              		.loc 1 410 28 is_stmt 0 view .LVU471
 1415 001a 9022     		movs	r2, #144
 1416 001c 2146     		mov	r1, r4
 1417 001e 02A8     		add	r0, sp, #8
 1418 0020 FFF7FEFF 		bl	memset
 1419              	.LVL42:
 414:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1420              		.loc 1 414 3 is_stmt 1 view .LVU472
 1421              	.LBB16:
 414:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1422              		.loc 1 414 3 view .LVU473
 414:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1423              		.loc 1 414 3 view .LVU474
 1424 0024 204B     		ldr	r3, .L54
 1425 0026 1A6C     		ldr	r2, [r3, #64]
 1426 0028 42F08052 		orr	r2, r2, #268435456
 1427 002c 1A64     		str	r2, [r3, #64]
 414:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1428              		.loc 1 414 3 view .LVU475
 1429 002e 1B6C     		ldr	r3, [r3, #64]
 1430 0030 03F08053 		and	r3, r3, #268435456
 1431 0034 0093     		str	r3, [sp]
 414:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1432              		.loc 1 414 3 view .LVU476
 1433 0036 009B     		ldr	r3, [sp]
 1434              	.LBE16:
 414:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1435              		.loc 1 414 3 view .LVU477
 415:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1436              		.loc 1 415 3 view .LVU478
 1437              	.LBB17:
 415:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1438              		.loc 1 415 3 view .LVU479
 415:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
ARM GAS  /tmp/ccrJKlhm.s 			page 51


 1439              		.loc 1 415 3 view .LVU480
 1440 0038 1C4B     		ldr	r3, .L54+4
 1441 003a 1A68     		ldr	r2, [r3]
 1442 003c 42F44042 		orr	r2, r2, #49152
 1443 0040 1A60     		str	r2, [r3]
 415:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1444              		.loc 1 415 3 view .LVU481
 1445 0042 1B68     		ldr	r3, [r3]
 1446 0044 03F44043 		and	r3, r3, #49152
 1447 0048 0193     		str	r3, [sp, #4]
 415:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1448              		.loc 1 415 3 view .LVU482
 1449 004a 019B     		ldr	r3, [sp, #4]
 1450              	.LBE17:
 415:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1451              		.loc 1 415 3 view .LVU483
 418:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1452              		.loc 1 418 3 view .LVU484
 418:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1453              		.loc 1 418 36 is_stmt 0 view .LVU485
 1454 004c 0123     		movs	r3, #1
 1455 004e 2B93     		str	r3, [sp, #172]
 419:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1456              		.loc 1 419 3 is_stmt 1 view .LVU486
 419:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1457              		.loc 1 419 30 is_stmt 0 view .LVU487
 1458 0050 4FF48033 		mov	r3, #65536
 1459 0054 2C93     		str	r3, [sp, #176]
 420:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1460              		.loc 1 420 3 is_stmt 1 view .LVU488
 420:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1461              		.loc 1 420 34 is_stmt 0 view .LVU489
 1462 0056 0225     		movs	r5, #2
 1463 0058 3195     		str	r5, [sp, #196]
 421:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 13;
 1464              		.loc 1 421 3 is_stmt 1 view .LVU490
 421:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 13;
 1465              		.loc 1 421 35 is_stmt 0 view .LVU491
 1466 005a 4FF48003 		mov	r3, #4194304
 1467 005e 3293     		str	r3, [sp, #200]
 422:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 1468              		.loc 1 422 3 is_stmt 1 view .LVU492
 422:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 1469              		.loc 1 422 30 is_stmt 0 view .LVU493
 1470 0060 0D23     		movs	r3, #13
 1471 0062 3393     		str	r3, [sp, #204]
 423:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1472              		.loc 1 423 3 is_stmt 1 view .LVU494
 423:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1473              		.loc 1 423 30 is_stmt 0 view .LVU495
 1474 0064 D823     		movs	r3, #216
 1475 0066 3493     		str	r3, [sp, #208]
 424:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 1476              		.loc 1 424 3 is_stmt 1 view .LVU496
 424:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 1477              		.loc 1 424 30 is_stmt 0 view .LVU497
 1478 0068 3595     		str	r5, [sp, #212]
ARM GAS  /tmp/ccrJKlhm.s 			page 52


 425:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1479              		.loc 1 425 3 is_stmt 1 view .LVU498
 425:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1480              		.loc 1 425 30 is_stmt 0 view .LVU499
 1481 006a 0923     		movs	r3, #9
 1482 006c 3693     		str	r3, [sp, #216]
 426:Src/main.c    ****   {
 1483              		.loc 1 426 3 is_stmt 1 view .LVU500
 426:Src/main.c    ****   {
 1484              		.loc 1 426 7 is_stmt 0 view .LVU501
 1485 006e 2BA8     		add	r0, sp, #172
 1486 0070 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1487              	.LVL43:
 432:Src/main.c    ****   {
 1488              		.loc 1 432 3 is_stmt 1 view .LVU502
 432:Src/main.c    ****   {
 1489              		.loc 1 432 7 is_stmt 0 view .LVU503
 1490 0074 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1491              	.LVL44:
 438:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1492              		.loc 1 438 3 is_stmt 1 view .LVU504
 438:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1493              		.loc 1 438 31 is_stmt 0 view .LVU505
 1494 0078 0F23     		movs	r3, #15
 1495 007a 2693     		str	r3, [sp, #152]
 440:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1496              		.loc 1 440 3 is_stmt 1 view .LVU506
 440:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1497              		.loc 1 440 34 is_stmt 0 view .LVU507
 1498 007c 2795     		str	r5, [sp, #156]
 441:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1499              		.loc 1 441 3 is_stmt 1 view .LVU508
 441:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1500              		.loc 1 441 35 is_stmt 0 view .LVU509
 1501 007e 2894     		str	r4, [sp, #160]
 442:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1502              		.loc 1 442 3 is_stmt 1 view .LVU510
 442:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1503              		.loc 1 442 36 is_stmt 0 view .LVU511
 1504 0080 4FF4A053 		mov	r3, #5120
 1505 0084 2993     		str	r3, [sp, #164]
 443:Src/main.c    **** 
 1506              		.loc 1 443 3 is_stmt 1 view .LVU512
 443:Src/main.c    **** 
 1507              		.loc 1 443 36 is_stmt 0 view .LVU513
 1508 0086 4FF48053 		mov	r3, #4096
 1509 008a 2A93     		str	r3, [sp, #168]
 445:Src/main.c    ****   {
 1510              		.loc 1 445 3 is_stmt 1 view .LVU514
 445:Src/main.c    ****   {
 1511              		.loc 1 445 7 is_stmt 0 view .LVU515
 1512 008c 0721     		movs	r1, #7
 1513 008e 26A8     		add	r0, sp, #152
 1514 0090 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1515              	.LVL45:
 449:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 1516              		.loc 1 449 3 is_stmt 1 view .LVU516
ARM GAS  /tmp/ccrJKlhm.s 			page 53


 449:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 1517              		.loc 1 449 44 is_stmt 0 view .LVU517
 1518 0094 064B     		ldr	r3, .L54+8
 1519 0096 0293     		str	r3, [sp, #8]
 451:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1520              		.loc 1 451 3 is_stmt 1 view .LVU518
 451:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1521              		.loc 1 451 43 is_stmt 0 view .LVU519
 1522 0098 1694     		str	r4, [sp, #88]
 452:Src/main.c    ****   PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 1523              		.loc 1 452 3 is_stmt 1 view .LVU520
 452:Src/main.c    ****   PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 1524              		.loc 1 452 43 is_stmt 0 view .LVU521
 1525 009a 2194     		str	r4, [sp, #132]
 453:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1526              		.loc 1 453 3 is_stmt 1 view .LVU522
 453:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1527              		.loc 1 453 44 is_stmt 0 view .LVU523
 1528 009c 2394     		str	r4, [sp, #140]
 454:Src/main.c    ****   {
 1529              		.loc 1 454 3 is_stmt 1 view .LVU524
 454:Src/main.c    ****   {
 1530              		.loc 1 454 7 is_stmt 0 view .LVU525
 1531 009e 02A8     		add	r0, sp, #8
 1532 00a0 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1533              	.LVL46:
 458:Src/main.c    **** 
 1534              		.loc 1 458 1 view .LVU526
 1535 00a4 39B0     		add	sp, sp, #228
 1536              	.LCFI30:
 1537              		.cfi_def_cfa_offset 12
 1538              		@ sp needed
 1539 00a6 30BD     		pop	{r4, r5, pc}
 1540              	.L55:
 1541              		.align	2
 1542              	.L54:
 1543 00a8 00380240 		.word	1073887232
 1544 00ac 00700040 		.word	1073770496
 1545 00b0 00022004 		.word	69206528
 1546              		.cfi_endproc
 1547              	.LFE154:
 1549              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1550              		.align	1
 1551              		.global	HAL_ADC_ConvCpltCallback
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1555              		.fpu fpv5-d16
 1557              	HAL_ADC_ConvCpltCallback:
 1558              	.LVL47:
 1559              	.LFB168:
1036:Src/main.c    **** 
1037:Src/main.c    **** /* USER CODE BEGIN 4 */
1038:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
1039:Src/main.c    **** {
 1560              		.loc 1 1039 1 is_stmt 1 view -0
 1561              		.cfi_startproc
ARM GAS  /tmp/ccrJKlhm.s 			page 54


 1562              		@ args = 0, pretend = 0, frame = 0
 1563              		@ frame_needed = 0, uses_anonymous_args = 0
 1564              		.loc 1 1039 1 is_stmt 0 view .LVU528
 1565 0000 08B5     		push	{r3, lr}
 1566              	.LCFI31:
 1567              		.cfi_def_cfa_offset 8
 1568              		.cfi_offset 3, -8
 1569              		.cfi_offset 14, -4
1040:Src/main.c    ****   if (hadc == &hadc1)
 1570              		.loc 1 1040 3 is_stmt 1 view .LVU529
 1571              		.loc 1 1040 6 is_stmt 0 view .LVU530
 1572 0002 0A4B     		ldr	r3, .L62
 1573 0004 9842     		cmp	r0, r3
 1574 0006 00D0     		beq	.L60
 1575              	.LVL48:
 1576              	.L56:
1041:Src/main.c    ****   {
1042:Src/main.c    ****     if (UserAdcConfig.Channel == ADC_CHANNEL_2)
1043:Src/main.c    ****     {
1044:Src/main.c    ****       uint32_t current;
1045:Src/main.c    ****       uint32_t adc_val;
1046:Src/main.c    ****       adc_val = HAL_ADC_GetValue(hadc);
1047:Src/main.c    ****       current = calc_current(adc_val);
1048:Src/main.c    ****       push_into_array(current);
1049:Src/main.c    ****       mean_current();
1050:Src/main.c    ****     }
1051:Src/main.c    ****     HAL_ADC_Start_IT(&hadc1);
1052:Src/main.c    ****   }
1053:Src/main.c    **** }
 1577              		.loc 1 1053 1 view .LVU531
 1578 0008 08BD     		pop	{r3, pc}
 1579              	.LVL49:
 1580              	.L60:
1042:Src/main.c    ****     {
 1581              		.loc 1 1042 5 is_stmt 1 view .LVU532
1042:Src/main.c    ****     {
 1582              		.loc 1 1042 22 is_stmt 0 view .LVU533
 1583 000a 094B     		ldr	r3, .L62+4
 1584 000c 1B68     		ldr	r3, [r3]
1042:Src/main.c    ****     {
 1585              		.loc 1 1042 8 view .LVU534
 1586 000e 022B     		cmp	r3, #2
 1587 0010 03D0     		beq	.L61
 1588              	.LVL50:
 1589              	.L58:
1051:Src/main.c    ****   }
 1590              		.loc 1 1051 5 is_stmt 1 view .LVU535
 1591 0012 0648     		ldr	r0, .L62
 1592 0014 FFF7FEFF 		bl	HAL_ADC_Start_IT
 1593              	.LVL51:
 1594              		.loc 1 1053 1 is_stmt 0 view .LVU536
 1595 0018 F6E7     		b	.L56
 1596              	.LVL52:
 1597              	.L61:
 1598              	.LBB18:
1044:Src/main.c    ****       uint32_t adc_val;
 1599              		.loc 1 1044 7 is_stmt 1 view .LVU537
ARM GAS  /tmp/ccrJKlhm.s 			page 55


1045:Src/main.c    ****       adc_val = HAL_ADC_GetValue(hadc);
 1600              		.loc 1 1045 7 view .LVU538
1046:Src/main.c    ****       current = calc_current(adc_val);
 1601              		.loc 1 1046 7 view .LVU539
1046:Src/main.c    ****       current = calc_current(adc_val);
 1602              		.loc 1 1046 17 is_stmt 0 view .LVU540
 1603 001a FFF7FEFF 		bl	HAL_ADC_GetValue
 1604              	.LVL53:
1047:Src/main.c    ****       push_into_array(current);
 1605              		.loc 1 1047 7 is_stmt 1 view .LVU541
1047:Src/main.c    ****       push_into_array(current);
 1606              		.loc 1 1047 17 is_stmt 0 view .LVU542
 1607 001e FFF7FEFF 		bl	calc_current
 1608              	.LVL54:
1048:Src/main.c    ****       mean_current();
 1609              		.loc 1 1048 7 is_stmt 1 view .LVU543
 1610 0022 FFF7FEFF 		bl	push_into_array
 1611              	.LVL55:
1049:Src/main.c    ****     }
 1612              		.loc 1 1049 7 view .LVU544
 1613 0026 FFF7FEFF 		bl	mean_current
 1614              	.LVL56:
 1615 002a F2E7     		b	.L58
 1616              	.L63:
 1617              		.align	2
 1618              	.L62:
 1619 002c 00000000 		.word	hadc1
 1620 0030 00000000 		.word	.LANCHOR0
 1621              	.LBE18:
 1622              		.cfi_endproc
 1623              	.LFE168:
 1625              		.section	.text.write_error_led,"ax",%progbits
 1626              		.align	1
 1627              		.global	write_error_led
 1628              		.syntax unified
 1629              		.thumb
 1630              		.thumb_func
 1631              		.fpu fpv5-d16
 1633              	write_error_led:
 1634              	.LFB169:
1054:Src/main.c    **** 
1055:Src/main.c    **** void write_error_led()
1056:Src/main.c    **** {
 1635              		.loc 1 1056 1 view -0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 0
 1638              		@ frame_needed = 0, uses_anonymous_args = 0
 1639 0000 08B5     		push	{r3, lr}
 1640              	.LCFI32:
 1641              		.cfi_def_cfa_offset 8
 1642              		.cfi_offset 3, -8
 1643              		.cfi_offset 14, -4
1057:Src/main.c    ****   switch (led_state)
 1644              		.loc 1 1057 3 view .LVU546
 1645 0002 3B4B     		ldr	r3, .L76
 1646 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1647 0006 042B     		cmp	r3, #4
ARM GAS  /tmp/ccrJKlhm.s 			page 56


 1648 0008 6CD8     		bhi	.L65
 1649 000a DFE803F0 		tbb	[pc, r3]
 1650              	.L67:
 1651 000e 03       		.byte	(.L71-.L67)/2
 1652 000f 65       		.byte	(.L70-.L67)/2
 1653 0010 09       		.byte	(.L69-.L67)/2
 1654 0011 3F       		.byte	(.L68-.L67)/2
 1655 0012 19       		.byte	(.L66-.L67)/2
 1656 0013 00       		.p2align 1
 1657              	.L71:
1058:Src/main.c    ****   {
1059:Src/main.c    ****   case ON:
1060:Src/main.c    ****     HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 1658              		.loc 1 1060 5 view .LVU547
 1659 0014 0122     		movs	r2, #1
 1660 0016 8021     		movs	r1, #128
 1661 0018 3648     		ldr	r0, .L76+4
 1662 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1663              	.LVL57:
1061:Src/main.c    ****     break;
 1664              		.loc 1 1061 5 view .LVU548
 1665              	.L64:
1062:Src/main.c    **** 
1063:Src/main.c    ****   case BLINK_error:
1064:Src/main.c    ****     if (HAL_GetTick() - prev_toggle_msec > ERR_LED_BLINK_error_MSEC)
1065:Src/main.c    ****     {
1066:Src/main.c    ****       HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
1067:Src/main.c    ****       prev_toggle_msec = HAL_GetTick();
1068:Src/main.c    ****     }
1069:Src/main.c    ****     break;
1070:Src/main.c    **** 
1071:Src/main.c    ****   case BLINK_overT:
1072:Src/main.c    ****     if (HAL_GPIO_ReadPin(LED_ERR_GPIO_Port, LED_ERR_Pin))
1073:Src/main.c    ****     {
1074:Src/main.c    ****       if (HAL_GetTick() - prev_toggle_msec > ERR_LED_BLINK_overT_ON_MSEC)
1075:Src/main.c    ****       {
1076:Src/main.c    ****         HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
1077:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
1078:Src/main.c    ****       }
1079:Src/main.c    ****     }
1080:Src/main.c    ****     else
1081:Src/main.c    ****     {
1082:Src/main.c    ****       if (HAL_GetTick() - prev_toggle_msec > ERR_LED_BLINK_overT_OFF_MSEC)
1083:Src/main.c    ****       {
1084:Src/main.c    ****         HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
1085:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
1086:Src/main.c    ****       }
1087:Src/main.c    ****     }
1088:Src/main.c    ****     break;
1089:Src/main.c    **** 
1090:Src/main.c    ****   case BLINK_underV:
1091:Src/main.c    ****     if (HAL_GPIO_ReadPin(LED_ERR_GPIO_Port, LED_ERR_Pin))
1092:Src/main.c    ****     {
1093:Src/main.c    ****       if (HAL_GetTick() - prev_toggle_msec > ERR_LED_BLINK_underV_ON_MSEC)
1094:Src/main.c    ****       {
1095:Src/main.c    ****         HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
1096:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
ARM GAS  /tmp/ccrJKlhm.s 			page 57


1097:Src/main.c    ****       }
1098:Src/main.c    ****     }
1099:Src/main.c    ****     else
1100:Src/main.c    ****     {
1101:Src/main.c    ****       if (HAL_GetTick() - prev_toggle_msec > ERR_LED_BLINK_underV_OFF_MSEC)
1102:Src/main.c    ****       {
1103:Src/main.c    ****         HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
1104:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
1105:Src/main.c    ****       }
1106:Src/main.c    ****     }
1107:Src/main.c    ****     break;
1108:Src/main.c    **** 
1109:Src/main.c    ****   case OFF:
1110:Src/main.c    ****     HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
1111:Src/main.c    ****     break;
1112:Src/main.c    **** 
1113:Src/main.c    ****   default:
1114:Src/main.c    ****     HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
1115:Src/main.c    ****     break;
1116:Src/main.c    ****   }
1117:Src/main.c    **** }
 1666              		.loc 1 1117 1 is_stmt 0 view .LVU549
 1667 001e 08BD     		pop	{r3, pc}
 1668              	.L69:
1064:Src/main.c    ****     {
 1669              		.loc 1 1064 5 is_stmt 1 view .LVU550
1064:Src/main.c    ****     {
 1670              		.loc 1 1064 9 is_stmt 0 view .LVU551
 1671 0020 FFF7FEFF 		bl	HAL_GetTick
 1672              	.LVL58:
1064:Src/main.c    ****     {
 1673              		.loc 1 1064 23 view .LVU552
 1674 0024 344B     		ldr	r3, .L76+8
 1675 0026 1B68     		ldr	r3, [r3]
 1676 0028 C01A     		subs	r0, r0, r3
1064:Src/main.c    ****     {
 1677              		.loc 1 1064 8 view .LVU553
 1678 002a 6428     		cmp	r0, #100
 1679 002c F7D9     		bls	.L64
1066:Src/main.c    ****       prev_toggle_msec = HAL_GetTick();
 1680              		.loc 1 1066 7 is_stmt 1 view .LVU554
 1681 002e 8021     		movs	r1, #128
 1682 0030 3048     		ldr	r0, .L76+4
 1683 0032 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1684              	.LVL59:
1067:Src/main.c    ****     }
 1685              		.loc 1 1067 7 view .LVU555
1067:Src/main.c    ****     }
 1686              		.loc 1 1067 26 is_stmt 0 view .LVU556
 1687 0036 FFF7FEFF 		bl	HAL_GetTick
 1688              	.LVL60:
1067:Src/main.c    ****     }
 1689              		.loc 1 1067 24 view .LVU557
 1690 003a 2F4B     		ldr	r3, .L76+8
 1691 003c 1860     		str	r0, [r3]
 1692 003e EEE7     		b	.L64
 1693              	.L66:
ARM GAS  /tmp/ccrJKlhm.s 			page 58


1072:Src/main.c    ****     {
 1694              		.loc 1 1072 5 is_stmt 1 view .LVU558
1072:Src/main.c    ****     {
 1695              		.loc 1 1072 9 is_stmt 0 view .LVU559
 1696 0040 8021     		movs	r1, #128
 1697 0042 2C48     		ldr	r0, .L76+4
 1698 0044 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1699              	.LVL61:
1072:Src/main.c    ****     {
 1700              		.loc 1 1072 8 view .LVU560
 1701 0048 80B1     		cbz	r0, .L73
1074:Src/main.c    ****       {
 1702              		.loc 1 1074 7 is_stmt 1 view .LVU561
1074:Src/main.c    ****       {
 1703              		.loc 1 1074 11 is_stmt 0 view .LVU562
 1704 004a FFF7FEFF 		bl	HAL_GetTick
 1705              	.LVL62:
1074:Src/main.c    ****       {
 1706              		.loc 1 1074 25 view .LVU563
 1707 004e 2A4B     		ldr	r3, .L76+8
 1708 0050 1B68     		ldr	r3, [r3]
 1709 0052 C01A     		subs	r0, r0, r3
1074:Src/main.c    ****       {
 1710              		.loc 1 1074 10 view .LVU564
 1711 0054 B0F5487F 		cmp	r0, #800
 1712 0058 E1D9     		bls	.L64
1076:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
 1713              		.loc 1 1076 9 is_stmt 1 view .LVU565
 1714 005a 8021     		movs	r1, #128
 1715 005c 2548     		ldr	r0, .L76+4
 1716 005e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1717              	.LVL63:
1077:Src/main.c    ****       }
 1718              		.loc 1 1077 9 view .LVU566
1077:Src/main.c    ****       }
 1719              		.loc 1 1077 28 is_stmt 0 view .LVU567
 1720 0062 FFF7FEFF 		bl	HAL_GetTick
 1721              	.LVL64:
1077:Src/main.c    ****       }
 1722              		.loc 1 1077 26 view .LVU568
 1723 0066 244B     		ldr	r3, .L76+8
 1724 0068 1860     		str	r0, [r3]
 1725 006a D8E7     		b	.L64
 1726              	.L73:
1082:Src/main.c    ****       {
 1727              		.loc 1 1082 7 is_stmt 1 view .LVU569
1082:Src/main.c    ****       {
 1728              		.loc 1 1082 11 is_stmt 0 view .LVU570
 1729 006c FFF7FEFF 		bl	HAL_GetTick
 1730              	.LVL65:
1082:Src/main.c    ****       {
 1731              		.loc 1 1082 25 view .LVU571
 1732 0070 214B     		ldr	r3, .L76+8
 1733 0072 1B68     		ldr	r3, [r3]
 1734 0074 C01A     		subs	r0, r0, r3
1082:Src/main.c    ****       {
 1735              		.loc 1 1082 10 view .LVU572
ARM GAS  /tmp/ccrJKlhm.s 			page 59


 1736 0076 C828     		cmp	r0, #200
 1737 0078 D1D9     		bls	.L64
1084:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
 1738              		.loc 1 1084 9 is_stmt 1 view .LVU573
 1739 007a 8021     		movs	r1, #128
 1740 007c 1D48     		ldr	r0, .L76+4
 1741 007e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1742              	.LVL66:
1085:Src/main.c    ****       }
 1743              		.loc 1 1085 9 view .LVU574
1085:Src/main.c    ****       }
 1744              		.loc 1 1085 28 is_stmt 0 view .LVU575
 1745 0082 FFF7FEFF 		bl	HAL_GetTick
 1746              	.LVL67:
1085:Src/main.c    ****       }
 1747              		.loc 1 1085 26 view .LVU576
 1748 0086 1C4B     		ldr	r3, .L76+8
 1749 0088 1860     		str	r0, [r3]
 1750 008a C8E7     		b	.L64
 1751              	.L68:
1091:Src/main.c    ****     {
 1752              		.loc 1 1091 5 is_stmt 1 view .LVU577
1091:Src/main.c    ****     {
 1753              		.loc 1 1091 9 is_stmt 0 view .LVU578
 1754 008c 8021     		movs	r1, #128
 1755 008e 1948     		ldr	r0, .L76+4
 1756 0090 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1757              	.LVL68:
1091:Src/main.c    ****     {
 1758              		.loc 1 1091 8 view .LVU579
 1759 0094 78B1     		cbz	r0, .L74
1093:Src/main.c    ****       {
 1760              		.loc 1 1093 7 is_stmt 1 view .LVU580
1093:Src/main.c    ****       {
 1761              		.loc 1 1093 11 is_stmt 0 view .LVU581
 1762 0096 FFF7FEFF 		bl	HAL_GetTick
 1763              	.LVL69:
1093:Src/main.c    ****       {
 1764              		.loc 1 1093 25 view .LVU582
 1765 009a 174B     		ldr	r3, .L76+8
 1766 009c 1B68     		ldr	r3, [r3]
 1767 009e C01A     		subs	r0, r0, r3
1093:Src/main.c    ****       {
 1768              		.loc 1 1093 10 view .LVU583
 1769 00a0 6428     		cmp	r0, #100
 1770 00a2 BCD9     		bls	.L64
1095:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
 1771              		.loc 1 1095 9 is_stmt 1 view .LVU584
 1772 00a4 8021     		movs	r1, #128
 1773 00a6 1348     		ldr	r0, .L76+4
 1774 00a8 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1775              	.LVL70:
1096:Src/main.c    ****       }
 1776              		.loc 1 1096 9 view .LVU585
1096:Src/main.c    ****       }
 1777              		.loc 1 1096 28 is_stmt 0 view .LVU586
 1778 00ac FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccrJKlhm.s 			page 60


 1779              	.LVL71:
1096:Src/main.c    ****       }
 1780              		.loc 1 1096 26 view .LVU587
 1781 00b0 114B     		ldr	r3, .L76+8
 1782 00b2 1860     		str	r0, [r3]
 1783 00b4 B3E7     		b	.L64
 1784              	.L74:
1101:Src/main.c    ****       {
 1785              		.loc 1 1101 7 is_stmt 1 view .LVU588
1101:Src/main.c    ****       {
 1786              		.loc 1 1101 11 is_stmt 0 view .LVU589
 1787 00b6 FFF7FEFF 		bl	HAL_GetTick
 1788              	.LVL72:
1101:Src/main.c    ****       {
 1789              		.loc 1 1101 25 view .LVU590
 1790 00ba 0F4B     		ldr	r3, .L76+8
 1791 00bc 1B68     		ldr	r3, [r3]
 1792 00be C01A     		subs	r0, r0, r3
1101:Src/main.c    ****       {
 1793              		.loc 1 1101 10 view .LVU591
 1794 00c0 B0F5617F 		cmp	r0, #900
 1795 00c4 ABD9     		bls	.L64
1103:Src/main.c    ****         prev_toggle_msec = HAL_GetTick();
 1796              		.loc 1 1103 9 is_stmt 1 view .LVU592
 1797 00c6 8021     		movs	r1, #128
 1798 00c8 0A48     		ldr	r0, .L76+4
 1799 00ca FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1800              	.LVL73:
1104:Src/main.c    ****       }
 1801              		.loc 1 1104 9 view .LVU593
1104:Src/main.c    ****       }
 1802              		.loc 1 1104 28 is_stmt 0 view .LVU594
 1803 00ce FFF7FEFF 		bl	HAL_GetTick
 1804              	.LVL74:
1104:Src/main.c    ****       }
 1805              		.loc 1 1104 26 view .LVU595
 1806 00d2 094B     		ldr	r3, .L76+8
 1807 00d4 1860     		str	r0, [r3]
 1808 00d6 A2E7     		b	.L64
 1809              	.L70:
1110:Src/main.c    ****     break;
 1810              		.loc 1 1110 5 is_stmt 1 view .LVU596
 1811 00d8 0022     		movs	r2, #0
 1812 00da 8021     		movs	r1, #128
 1813 00dc 0548     		ldr	r0, .L76+4
 1814 00de FFF7FEFF 		bl	HAL_GPIO_WritePin
 1815              	.LVL75:
1111:Src/main.c    **** 
 1816              		.loc 1 1111 5 view .LVU597
 1817 00e2 9CE7     		b	.L64
 1818              	.L65:
1114:Src/main.c    ****     break;
 1819              		.loc 1 1114 5 view .LVU598
 1820 00e4 0022     		movs	r2, #0
 1821 00e6 8021     		movs	r1, #128
 1822 00e8 0248     		ldr	r0, .L76+4
 1823 00ea FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccrJKlhm.s 			page 61


 1824              	.LVL76:
1115:Src/main.c    ****   }
 1825              		.loc 1 1115 5 view .LVU599
 1826              		.loc 1 1117 1 is_stmt 0 view .LVU600
 1827 00ee 96E7     		b	.L64
 1828              	.L77:
 1829              		.align	2
 1830              	.L76:
 1831 00f0 00000000 		.word	led_state
 1832 00f4 00080240 		.word	1073874944
 1833 00f8 00000000 		.word	.LANCHOR1
 1834              		.cfi_endproc
 1835              	.LFE169:
 1837              		.section	.text.check_under_voltage,"ax",%progbits
 1838              		.align	1
 1839              		.global	check_under_voltage
 1840              		.syntax unified
 1841              		.thumb
 1842              		.thumb_func
 1843              		.fpu fpv5-d16
 1845              	check_under_voltage:
 1846              	.LFB170:
1118:Src/main.c    **** 
1119:Src/main.c    **** void check_under_voltage()
1120:Src/main.c    **** {
 1847              		.loc 1 1120 1 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851 0000 08B5     		push	{r3, lr}
 1852              	.LCFI33:
 1853              		.cfi_def_cfa_offset 8
 1854              		.cfi_offset 3, -8
 1855              		.cfi_offset 14, -4
1121:Src/main.c    ****   if (get_min_voltage(&ltc) < 10)
 1856              		.loc 1 1121 3 view .LVU602
 1857              		.loc 1 1121 7 is_stmt 0 view .LVU603
 1858 0002 0648     		ldr	r0, .L82
 1859 0004 FFF7FEFF 		bl	get_min_voltage
 1860              	.LVL77:
 1861              		.loc 1 1121 6 view .LVU604
 1862 0008 0928     		cmp	r0, #9
 1863 000a 03D8     		bhi	.L79
1122:Src/main.c    ****   {
1123:Src/main.c    ****     UNDER_VOLTAGE = 1;
 1864              		.loc 1 1123 5 is_stmt 1 view .LVU605
 1865              		.loc 1 1123 19 is_stmt 0 view .LVU606
 1866 000c 044B     		ldr	r3, .L82+4
 1867 000e 0122     		movs	r2, #1
 1868 0010 1A60     		str	r2, [r3]
 1869              	.L78:
1124:Src/main.c    ****   }
1125:Src/main.c    ****   else
1126:Src/main.c    ****   {
1127:Src/main.c    ****     UNDER_VOLTAGE = 0;
1128:Src/main.c    ****   }
1129:Src/main.c    **** }
ARM GAS  /tmp/ccrJKlhm.s 			page 62


 1870              		.loc 1 1129 1 view .LVU607
 1871 0012 08BD     		pop	{r3, pc}
 1872              	.L79:
1127:Src/main.c    ****   }
 1873              		.loc 1 1127 5 is_stmt 1 view .LVU608
1127:Src/main.c    ****   }
 1874              		.loc 1 1127 19 is_stmt 0 view .LVU609
 1875 0014 024B     		ldr	r3, .L82+4
 1876 0016 0022     		movs	r2, #0
 1877 0018 1A60     		str	r2, [r3]
 1878              		.loc 1 1129 1 view .LVU610
 1879 001a FAE7     		b	.L78
 1880              	.L83:
 1881              		.align	2
 1882              	.L82:
 1883 001c 00000000 		.word	ltc
 1884 0020 00000000 		.word	.LANCHOR2
 1885              		.cfi_endproc
 1886              	.LFE170:
 1888              		.section	.text.check_over_temperature,"ax",%progbits
 1889              		.align	1
 1890              		.global	check_over_temperature
 1891              		.syntax unified
 1892              		.thumb
 1893              		.thumb_func
 1894              		.fpu fpv5-d16
 1896              	check_over_temperature:
 1897              	.LFB171:
1130:Src/main.c    **** 
1131:Src/main.c    **** void check_over_temperature()
1132:Src/main.c    **** {
 1898              		.loc 1 1132 1 is_stmt 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902              		@ link register save eliminated.
1133:Src/main.c    ****   if (lv_temp.value > lv_temp.max_temp)
 1903              		.loc 1 1133 3 view .LVU612
 1904              		.loc 1 1133 14 is_stmt 0 view .LVU613
 1905 0000 064B     		ldr	r3, .L87
 1906 0002 1A68     		ldr	r2, [r3]
 1907              		.loc 1 1133 30 view .LVU614
 1908 0004 DB68     		ldr	r3, [r3, #12]
 1909              		.loc 1 1133 6 view .LVU615
 1910 0006 9A42     		cmp	r2, r3
 1911 0008 03D9     		bls	.L85
1134:Src/main.c    ****   {
1135:Src/main.c    ****     OVER_TEMPERATURE = 1;
 1912              		.loc 1 1135 5 is_stmt 1 view .LVU616
 1913              		.loc 1 1135 22 is_stmt 0 view .LVU617
 1914 000a 054B     		ldr	r3, .L87+4
 1915 000c 0122     		movs	r2, #1
 1916 000e 1A60     		str	r2, [r3]
 1917 0010 7047     		bx	lr
 1918              	.L85:
1136:Src/main.c    ****   }
1137:Src/main.c    ****   else
ARM GAS  /tmp/ccrJKlhm.s 			page 63


1138:Src/main.c    ****   {
1139:Src/main.c    ****     OVER_TEMPERATURE = 0;
 1919              		.loc 1 1139 5 is_stmt 1 view .LVU618
 1920              		.loc 1 1139 22 is_stmt 0 view .LVU619
 1921 0012 034B     		ldr	r3, .L87+4
 1922 0014 0022     		movs	r2, #0
 1923 0016 1A60     		str	r2, [r3]
1140:Src/main.c    ****   }
1141:Src/main.c    **** }
 1924              		.loc 1 1141 1 view .LVU620
 1925 0018 7047     		bx	lr
 1926              	.L88:
 1927 001a 00BF     		.align	2
 1928              	.L87:
 1929 001c 00000000 		.word	lv_temp
 1930 0020 00000000 		.word	.LANCHOR3
 1931              		.cfi_endproc
 1932              	.LFE171:
 1934              		.section	.text.BMS_ON_OFF,"ax",%progbits
 1935              		.align	1
 1936              		.global	BMS_ON_OFF
 1937              		.syntax unified
 1938              		.thumb
 1939              		.thumb_func
 1940              		.fpu fpv5-d16
 1942              	BMS_ON_OFF:
 1943              	.LFB172:
1142:Src/main.c    **** 
1143:Src/main.c    **** int BMS_ON_OFF()
1144:Src/main.c    **** {
 1944              		.loc 1 1144 1 is_stmt 1 view -0
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 0
 1947              		@ frame_needed = 0, uses_anonymous_args = 0
 1948              		@ link register save eliminated.
1145:Src/main.c    ****   if (BMS_ON_REQUEST == 1)
 1949              		.loc 1 1145 3 view .LVU622
 1950              		.loc 1 1145 22 is_stmt 0 view .LVU623
 1951 0000 0B4B     		ldr	r3, .L94
 1952 0002 1B68     		ldr	r3, [r3]
 1953              		.loc 1 1145 6 view .LVU624
 1954 0004 012B     		cmp	r3, #1
 1955 0006 05D0     		beq	.L93
1146:Src/main.c    ****   {
1147:Src/main.c    ****     if (!OVER_TEMPERATURE && !UNDER_VOLTAGE)
1148:Src/main.c    ****     {
1149:Src/main.c    ****       BMS_IS_ON = 1;
1150:Src/main.c    ****     }
1151:Src/main.c    ****     else
1152:Src/main.c    ****     {
1153:Src/main.c    ****       BMS_IS_ON = 0;
1154:Src/main.c    ****     }
1155:Src/main.c    ****   }
1156:Src/main.c    ****   else
1157:Src/main.c    ****   {
1158:Src/main.c    ****     BMS_IS_ON = 0;
 1956              		.loc 1 1158 5 is_stmt 1 view .LVU625
ARM GAS  /tmp/ccrJKlhm.s 			page 64


 1957              		.loc 1 1158 15 is_stmt 0 view .LVU626
 1958 0008 0A4B     		ldr	r3, .L94+4
 1959 000a 0022     		movs	r2, #0
 1960 000c 1A60     		str	r2, [r3]
 1961              	.L92:
1159:Src/main.c    ****   }
1160:Src/main.c    ****   return BMS_IS_ON;
 1962              		.loc 1 1160 3 is_stmt 1 view .LVU627
1161:Src/main.c    **** }
 1963              		.loc 1 1161 1 is_stmt 0 view .LVU628
 1964 000e 094B     		ldr	r3, .L94+4
 1965 0010 1868     		ldr	r0, [r3]
 1966 0012 7047     		bx	lr
 1967              	.L93:
1147:Src/main.c    ****     {
 1968              		.loc 1 1147 5 is_stmt 1 view .LVU629
1147:Src/main.c    ****     {
 1969              		.loc 1 1147 9 is_stmt 0 view .LVU630
 1970 0014 084B     		ldr	r3, .L94+8
 1971 0016 1B68     		ldr	r3, [r3]
1147:Src/main.c    ****     {
 1972              		.loc 1 1147 8 view .LVU631
 1973 0018 33B9     		cbnz	r3, .L91
1147:Src/main.c    ****     {
 1974              		.loc 1 1147 30 discriminator 1 view .LVU632
 1975 001a 084B     		ldr	r3, .L94+12
 1976 001c 1B68     		ldr	r3, [r3]
1147:Src/main.c    ****     {
 1977              		.loc 1 1147 27 discriminator 1 view .LVU633
 1978 001e 1BB9     		cbnz	r3, .L91
1149:Src/main.c    ****     }
 1979              		.loc 1 1149 7 is_stmt 1 view .LVU634
1149:Src/main.c    ****     }
 1980              		.loc 1 1149 17 is_stmt 0 view .LVU635
 1981 0020 044B     		ldr	r3, .L94+4
 1982 0022 0122     		movs	r2, #1
 1983 0024 1A60     		str	r2, [r3]
 1984 0026 F2E7     		b	.L92
 1985              	.L91:
1153:Src/main.c    ****     }
 1986              		.loc 1 1153 7 is_stmt 1 view .LVU636
1153:Src/main.c    ****     }
 1987              		.loc 1 1153 17 is_stmt 0 view .LVU637
 1988 0028 024B     		ldr	r3, .L94+4
 1989 002a 0022     		movs	r2, #0
 1990 002c 1A60     		str	r2, [r3]
 1991 002e EEE7     		b	.L92
 1992              	.L95:
 1993              		.align	2
 1994              	.L94:
 1995 0030 00000000 		.word	.LANCHOR4
 1996 0034 00000000 		.word	.LANCHOR5
 1997 0038 00000000 		.word	.LANCHOR3
 1998 003c 00000000 		.word	.LANCHOR2
 1999              		.cfi_endproc
 2000              	.LFE172:
 2002              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
ARM GAS  /tmp/ccrJKlhm.s 			page 65


 2003              		.align	1
 2004              		.global	HAL_TIM_PeriodElapsedCallback
 2005              		.syntax unified
 2006              		.thumb
 2007              		.thumb_func
 2008              		.fpu fpv5-d16
 2010              	HAL_TIM_PeriodElapsedCallback:
 2011              	.LVL78:
 2012              	.LFB173:
1162:Src/main.c    **** 
1163:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1164:Src/main.c    **** {
 2013              		.loc 1 1164 1 is_stmt 1 view -0
 2014              		.cfi_startproc
 2015              		@ args = 0, pretend = 0, frame = 0
 2016              		@ frame_needed = 0, uses_anonymous_args = 0
 2017              		@ link register save eliminated.
1165:Src/main.c    ****   if (htim == &htim5)
 2018              		.loc 1 1165 3 view .LVU639
 2019              		.loc 1 1165 6 is_stmt 0 view .LVU640
 2020 0000 1D4B     		ldr	r3, .L101
 2021 0002 9842     		cmp	r0, r3
 2022 0004 03D0     		beq	.L99
 2023              	.L97:
1166:Src/main.c    ****   {
1167:Src/main.c    ****     cont_ms++;
1168:Src/main.c    ****     if (cont_ms == 100)
1169:Src/main.c    ****     {
1170:Src/main.c    ****       cont_ms = 0;
1171:Src/main.c    ****       cont_dec++;
1172:Src/main.c    ****       if (cont_dec == 10)
1173:Src/main.c    ****       {
1174:Src/main.c    ****         cont_dec = 0;
1175:Src/main.c    ****         cont_sec++;
1176:Src/main.c    **** 
1177:Src/main.c    ****         debug_flag = 1;
1178:Src/main.c    **** 
1179:Src/main.c    ****         if (cont_sec == 60)
1180:Src/main.c    ****         {
1181:Src/main.c    ****           cont_sec = 0;
1182:Src/main.c    ****           cont_min++;
1183:Src/main.c    ****           if (cont_min == 60)
1184:Src/main.c    ****           {
1185:Src/main.c    ****             cont_min = 0;
1186:Src/main.c    ****             cont_hours++;
1187:Src/main.c    ****           }
1188:Src/main.c    ****         }
1189:Src/main.c    ****       }
1190:Src/main.c    ****     }
1191:Src/main.c    ****   }
1192:Src/main.c    ****   if (htim == &htim8)
 2024              		.loc 1 1192 3 is_stmt 1 view .LVU641
 2025              		.loc 1 1192 6 is_stmt 0 view .LVU642
 2026 0006 1D4B     		ldr	r3, .L101+4
 2027 0008 9842     		cmp	r0, r3
 2028 000a 30D0     		beq	.L100
 2029              	.L96:
ARM GAS  /tmp/ccrJKlhm.s 			page 66


1193:Src/main.c    ****   {
1194:Src/main.c    ****     sensor_update_flag = 1;
1195:Src/main.c    ****   }
1196:Src/main.c    **** }
 2030              		.loc 1 1196 1 view .LVU643
 2031 000c 7047     		bx	lr
 2032              	.L99:
1167:Src/main.c    ****     if (cont_ms == 100)
 2033              		.loc 1 1167 5 is_stmt 1 view .LVU644
1167:Src/main.c    ****     if (cont_ms == 100)
 2034              		.loc 1 1167 12 is_stmt 0 view .LVU645
 2035 000e 1C4A     		ldr	r2, .L101+8
 2036 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2037 0012 0133     		adds	r3, r3, #1
 2038 0014 DBB2     		uxtb	r3, r3
 2039 0016 1370     		strb	r3, [r2]
1168:Src/main.c    ****     {
 2040              		.loc 1 1168 5 is_stmt 1 view .LVU646
1168:Src/main.c    ****     {
 2041              		.loc 1 1168 8 is_stmt 0 view .LVU647
 2042 0018 642B     		cmp	r3, #100
 2043 001a F4D1     		bne	.L97
1170:Src/main.c    ****       cont_dec++;
 2044              		.loc 1 1170 7 is_stmt 1 view .LVU648
1170:Src/main.c    ****       cont_dec++;
 2045              		.loc 1 1170 15 is_stmt 0 view .LVU649
 2046 001c 1346     		mov	r3, r2
 2047 001e 0022     		movs	r2, #0
 2048 0020 1A70     		strb	r2, [r3]
1171:Src/main.c    ****       if (cont_dec == 10)
 2049              		.loc 1 1171 7 is_stmt 1 view .LVU650
1171:Src/main.c    ****       if (cont_dec == 10)
 2050              		.loc 1 1171 15 is_stmt 0 view .LVU651
 2051 0022 184A     		ldr	r2, .L101+12
 2052 0024 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2053 0026 0133     		adds	r3, r3, #1
 2054 0028 DBB2     		uxtb	r3, r3
 2055 002a 1370     		strb	r3, [r2]
1172:Src/main.c    ****       {
 2056              		.loc 1 1172 7 is_stmt 1 view .LVU652
1172:Src/main.c    ****       {
 2057              		.loc 1 1172 10 is_stmt 0 view .LVU653
 2058 002c 0A2B     		cmp	r3, #10
 2059 002e EAD1     		bne	.L97
1174:Src/main.c    ****         cont_sec++;
 2060              		.loc 1 1174 9 is_stmt 1 view .LVU654
1174:Src/main.c    ****         cont_sec++;
 2061              		.loc 1 1174 18 is_stmt 0 view .LVU655
 2062 0030 1346     		mov	r3, r2
 2063 0032 0022     		movs	r2, #0
 2064 0034 1A70     		strb	r2, [r3]
1175:Src/main.c    **** 
 2065              		.loc 1 1175 9 is_stmt 1 view .LVU656
1175:Src/main.c    **** 
 2066              		.loc 1 1175 17 is_stmt 0 view .LVU657
 2067 0036 144A     		ldr	r2, .L101+16
 2068 0038 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccrJKlhm.s 			page 67


 2069 003a 0133     		adds	r3, r3, #1
 2070 003c DBB2     		uxtb	r3, r3
 2071 003e 1370     		strb	r3, [r2]
1177:Src/main.c    **** 
 2072              		.loc 1 1177 9 is_stmt 1 view .LVU658
1177:Src/main.c    **** 
 2073              		.loc 1 1177 20 is_stmt 0 view .LVU659
 2074 0040 124A     		ldr	r2, .L101+20
 2075 0042 0121     		movs	r1, #1
 2076 0044 1160     		str	r1, [r2]
1179:Src/main.c    ****         {
 2077              		.loc 1 1179 9 is_stmt 1 view .LVU660
1179:Src/main.c    ****         {
 2078              		.loc 1 1179 12 is_stmt 0 view .LVU661
 2079 0046 3C2B     		cmp	r3, #60
 2080 0048 DDD1     		bne	.L97
1181:Src/main.c    ****           cont_min++;
 2081              		.loc 1 1181 11 is_stmt 1 view .LVU662
1181:Src/main.c    ****           cont_min++;
 2082              		.loc 1 1181 20 is_stmt 0 view .LVU663
 2083 004a 0F4B     		ldr	r3, .L101+16
 2084 004c 0022     		movs	r2, #0
 2085 004e 1A70     		strb	r2, [r3]
1182:Src/main.c    ****           if (cont_min == 60)
 2086              		.loc 1 1182 11 is_stmt 1 view .LVU664
1182:Src/main.c    ****           if (cont_min == 60)
 2087              		.loc 1 1182 19 is_stmt 0 view .LVU665
 2088 0050 0F4A     		ldr	r2, .L101+24
 2089 0052 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2090 0054 0B44     		add	r3, r3, r1
 2091 0056 DBB2     		uxtb	r3, r3
 2092 0058 1370     		strb	r3, [r2]
1183:Src/main.c    ****           {
 2093              		.loc 1 1183 11 is_stmt 1 view .LVU666
1183:Src/main.c    ****           {
 2094              		.loc 1 1183 14 is_stmt 0 view .LVU667
 2095 005a 3C2B     		cmp	r3, #60
 2096 005c D3D1     		bne	.L97
1185:Src/main.c    ****             cont_hours++;
 2097              		.loc 1 1185 13 is_stmt 1 view .LVU668
1185:Src/main.c    ****             cont_hours++;
 2098              		.loc 1 1185 22 is_stmt 0 view .LVU669
 2099 005e 1346     		mov	r3, r2
 2100 0060 0022     		movs	r2, #0
 2101 0062 1A70     		strb	r2, [r3]
1186:Src/main.c    ****           }
 2102              		.loc 1 1186 13 is_stmt 1 view .LVU670
1186:Src/main.c    ****           }
 2103              		.loc 1 1186 23 is_stmt 0 view .LVU671
 2104 0064 0B4A     		ldr	r2, .L101+28
 2105 0066 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2106 0068 0B44     		add	r3, r3, r1
 2107 006a 1370     		strb	r3, [r2]
 2108 006c CBE7     		b	.L97
 2109              	.L100:
1194:Src/main.c    ****   }
 2110              		.loc 1 1194 5 is_stmt 1 view .LVU672
ARM GAS  /tmp/ccrJKlhm.s 			page 68


1194:Src/main.c    ****   }
 2111              		.loc 1 1194 24 is_stmt 0 view .LVU673
 2112 006e 0A4B     		ldr	r3, .L101+32
 2113 0070 0122     		movs	r2, #1
 2114 0072 1A60     		str	r2, [r3]
 2115              		.loc 1 1196 1 view .LVU674
 2116 0074 CAE7     		b	.L96
 2117              	.L102:
 2118 0076 00BF     		.align	2
 2119              	.L101:
 2120 0078 00000000 		.word	htim5
 2121 007c 00000000 		.word	htim8
 2122 0080 00000000 		.word	cont_ms
 2123 0084 00000000 		.word	cont_dec
 2124 0088 00000000 		.word	cont_sec
 2125 008c 00000000 		.word	.LANCHOR6
 2126 0090 00000000 		.word	cont_min
 2127 0094 00000000 		.word	cont_hours
 2128 0098 00000000 		.word	.LANCHOR7
 2129              		.cfi_endproc
 2130              	.LFE173:
 2132              		.section	.text.send_CAN_data,"ax",%progbits
 2133              		.align	1
 2134              		.global	send_CAN_data
 2135              		.syntax unified
 2136              		.thumb
 2137              		.thumb_func
 2138              		.fpu fpv5-d16
 2140              	send_CAN_data:
 2141              	.LVL79:
 2142              	.LFB174:
1197:Src/main.c    **** 
1198:Src/main.c    **** int send_CAN_data(uint32_t tick)
1199:Src/main.c    **** {
 2143              		.loc 1 1199 1 is_stmt 1 view -0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 0
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 2147              		.loc 1 1199 1 is_stmt 0 view .LVU676
 2148 0000 08B5     		push	{r3, lr}
 2149              	.LCFI34:
 2150              		.cfi_def_cfa_offset 8
 2151              		.cfi_offset 3, -8
 2152              		.cfi_offset 14, -4
1200:Src/main.c    ****   int message_sent = 0;
 2153              		.loc 1 1200 3 is_stmt 1 view .LVU677
 2154              	.LVL80:
1201:Src/main.c    **** 
1202:Src/main.c    ****   if (tick % 200 == 0)
 2155              		.loc 1 1202 3 view .LVU678
 2156              		.loc 1 1202 12 is_stmt 0 view .LVU679
 2157 0002 0C4B     		ldr	r3, .L108
 2158 0004 A3FB0023 		umull	r2, r3, r3, r0
 2159 0008 9B09     		lsrs	r3, r3, #6
 2160 000a C822     		movs	r2, #200
 2161 000c 02FB1303 		mls	r3, r2, r3, r0
 2162              		.loc 1 1202 6 view .LVU680
ARM GAS  /tmp/ccrJKlhm.s 			page 69


 2163 0010 0BB1     		cbz	r3, .L107
1200:Src/main.c    ****   int message_sent = 0;
 2164              		.loc 1 1200 7 view .LVU681
 2165 0012 0020     		movs	r0, #0
 2166              	.LVL81:
1203:Src/main.c    ****   {
1204:Src/main.c    ****     can1.tx_id = 0x97;
1205:Src/main.c    ****     can1.dataTx[0] = ltc.voltage[0] >> 8;
1206:Src/main.c    ****     can1.dataTx[1] = (uint8_t)ltc.voltage[1];
1207:Src/main.c    ****     can1.tx_size = 2;
1208:Src/main.c    ****     CAN_Send(&can1);
1209:Src/main.c    ****     message_sent = 1;
1210:Src/main.c    ****   }
1211:Src/main.c    **** 
1212:Src/main.c    ****   return message_sent;
 2167              		.loc 1 1212 3 is_stmt 1 view .LVU682
 2168              	.L103:
1213:Src/main.c    **** }
 2169              		.loc 1 1213 1 is_stmt 0 view .LVU683
 2170 0014 08BD     		pop	{r3, pc}
 2171              	.LVL82:
 2172              	.L107:
1204:Src/main.c    ****     can1.dataTx[0] = ltc.voltage[0] >> 8;
 2173              		.loc 1 1204 5 is_stmt 1 view .LVU684
1204:Src/main.c    ****     can1.dataTx[0] = ltc.voltage[0] >> 8;
 2174              		.loc 1 1204 16 is_stmt 0 view .LVU685
 2175 0016 0848     		ldr	r0, .L108+4
 2176              	.LVL83:
1204:Src/main.c    ****     can1.dataTx[0] = ltc.voltage[0] >> 8;
 2177              		.loc 1 1204 16 view .LVU686
 2178 0018 9723     		movs	r3, #151
 2179 001a C362     		str	r3, [r0, #44]
1205:Src/main.c    ****     can1.dataTx[1] = (uint8_t)ltc.voltage[1];
 2180              		.loc 1 1205 5 is_stmt 1 view .LVU687
1205:Src/main.c    ****     can1.dataTx[1] = (uint8_t)ltc.voltage[1];
 2181              		.loc 1 1205 33 is_stmt 0 view .LVU688
 2182 001c 074A     		ldr	r2, .L108+8
 2183 001e D388     		ldrh	r3, [r2, #6]
1205:Src/main.c    ****     can1.dataTx[1] = (uint8_t)ltc.voltage[1];
 2184              		.loc 1 1205 20 view .LVU689
 2185 0020 1B0A     		lsrs	r3, r3, #8
 2186 0022 0373     		strb	r3, [r0, #12]
1206:Src/main.c    ****     can1.tx_size = 2;
 2187              		.loc 1 1206 5 is_stmt 1 view .LVU690
1206:Src/main.c    ****     can1.tx_size = 2;
 2188              		.loc 1 1206 22 is_stmt 0 view .LVU691
 2189 0024 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
1206:Src/main.c    ****     can1.tx_size = 2;
 2190              		.loc 1 1206 20 view .LVU692
 2191 0026 4373     		strb	r3, [r0, #13]
1207:Src/main.c    ****     CAN_Send(&can1);
 2192              		.loc 1 1207 5 is_stmt 1 view .LVU693
1207:Src/main.c    ****     CAN_Send(&can1);
 2193              		.loc 1 1207 18 is_stmt 0 view .LVU694
 2194 0028 0223     		movs	r3, #2
 2195 002a 0360     		str	r3, [r0]
1208:Src/main.c    ****     message_sent = 1;
ARM GAS  /tmp/ccrJKlhm.s 			page 70


 2196              		.loc 1 1208 5 is_stmt 1 view .LVU695
 2197 002c FFF7FEFF 		bl	CAN_Send
 2198              	.LVL84:
1209:Src/main.c    ****   }
 2199              		.loc 1 1209 5 view .LVU696
1209:Src/main.c    ****   }
 2200              		.loc 1 1209 18 is_stmt 0 view .LVU697
 2201 0030 0120     		movs	r0, #1
 2202 0032 EFE7     		b	.L103
 2203              	.L109:
 2204              		.align	2
 2205              	.L108:
 2206 0034 1F85EB51 		.word	1374389535
 2207 0038 00000000 		.word	can1
 2208 003c 00000000 		.word	ltc
 2209              		.cfi_endproc
 2210              	.LFE174:
 2212              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2213              		.align	2
 2214              	.LC0:
 2215 0000 0D0A0A0A 		.ascii	"\015\012\012\012\012\012\012\012\012\012\012\012\012"
 2215      0A0A0A0A 
 2215      0A0A0A0A 
 2215      0A
 2216 000d 0A0A0A0A 		.ascii	"\012\012\012\012\012\012\012\012\012\012\012\012\012"
 2216      0A0A0A0A 
 2216      0A0A0A0A 
 2216      0A
 2217 001a 0A0A0A00 		.ascii	"\012\012\012\000"
 2218 001e 0000     		.align	2
 2219              	.LC1:
 2220 0020 54657374 		.ascii	"Testing Buzzer\012\000"
 2220      696E6720 
 2220      42757A7A 
 2220      65720A00 
 2221              		.align	2
 2222              	.LC2:
 2223 0030 444F4E45 		.ascii	"DONE\012\000"
 2223      0A00
 2224 0036 0000     		.align	2
 2225              	.LC3:
 2226 0038 43414E20 		.ascii	"CAN initialization... \000"
 2226      696E6974 
 2226      69616C69 
 2226      7A617469 
 2226      6F6E2E2E 
 2227 004f 00       		.align	2
 2228              	.LC4:
 2229 0050 444F4E45 		.ascii	"DONE\015\012\000"
 2229      0D0A00
 2230 0057 00       		.align	2
 2231              	.LC5:
 2232 0058 4641494C 		.ascii	"FAILED\015\012\000"
 2232      45440D0A 
 2232      00
 2233 0061 000000   		.align	2
 2234              	.LC6:
ARM GAS  /tmp/ccrJKlhm.s 			page 71


 2235 0064 496E6974 		.ascii	"Initializing LTC\015\012\000"
 2235      69616C69 
 2235      7A696E67 
 2235      204C5443 
 2235      0D0A00
 2236 0077 00       		.align	2
 2237              	.LC7:
 2238 0078 424D535F 		.ascii	"BMS_IS_ON: %d, overT: %d, underV: %d\015\012\000"
 2238      49535F4F 
 2238      4E3A2025 
 2238      642C206F 
 2238      76657254 
 2239 009f 00       		.align	2
 2240              	.LC8:
 2241 00a0 50494420 		.ascii	"PID outputs lv: %d hv: %d pump: %d\015\012\000"
 2241      6F757470 
 2241      75747320 
 2241      6C763A20 
 2241      25642068 
 2242 00c5 000000   		.align	2
 2243              	.LC9:
 2244 00c8 566F6C74 		.ascii	"Voltages %d %d %d %d %d %d\015\012\000"
 2244      61676573 
 2244      20256420 
 2244      25642025 
 2244      64202564 
 2245 00e5 000000   		.align	2
 2246              	.LC10:
 2247 00e8 43757272 		.ascii	"Current from sensor: %lu\015\012\000"
 2247      656E7420 
 2247      66726F6D 
 2247      2073656E 
 2247      736F723A 
 2248              		.section	.text.main,"ax",%progbits
 2249              		.align	1
 2250              		.global	main
 2251              		.syntax unified
 2252              		.thumb
 2253              		.thumb_func
 2254              		.fpu fpv5-d16
 2256              	main:
 2257              	.LFB153:
 177:Src/main.c    ****   /* USER CODE BEGIN 1 */
 2258              		.loc 1 177 1 is_stmt 1 view -0
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 0
 2261              		@ frame_needed = 0, uses_anonymous_args = 0
 2262 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2263              	.LCFI35:
 2264              		.cfi_def_cfa_offset 32
 2265              		.cfi_offset 4, -32
 2266              		.cfi_offset 5, -28
 2267              		.cfi_offset 6, -24
 2268              		.cfi_offset 7, -20
 2269              		.cfi_offset 8, -16
 2270              		.cfi_offset 9, -12
 2271              		.cfi_offset 10, -8
ARM GAS  /tmp/ccrJKlhm.s 			page 72


 2272              		.cfi_offset 14, -4
 2273 0004 2DED048B 		vpush.64	{d8, d9}
 2274              	.LCFI36:
 2275              		.cfi_def_cfa_offset 48
 2276              		.cfi_offset 80, -48
 2277              		.cfi_offset 81, -44
 2278              		.cfi_offset 82, -40
 2279              		.cfi_offset 83, -36
 2280 0008 84B0     		sub	sp, sp, #16
 2281              	.LCFI37:
 2282              		.cfi_def_cfa_offset 64
 185:Src/main.c    **** 
 2283              		.loc 1 185 3 view .LVU699
 2284 000a FFF7FEFF 		bl	HAL_Init
 2285              	.LVL85:
 192:Src/main.c    **** 
 2286              		.loc 1 192 3 view .LVU700
 2287 000e FFF7FEFF 		bl	SystemClock_Config
 2288              	.LVL86:
 199:Src/main.c    ****   MX_DMA_Init();
 2289              		.loc 1 199 3 view .LVU701
 2290 0012 FFF7FEFF 		bl	MX_GPIO_Init
 2291              	.LVL87:
 200:Src/main.c    ****   MX_ADC1_Init();
 2292              		.loc 1 200 3 view .LVU702
 2293 0016 FFF7FEFF 		bl	MX_DMA_Init
 2294              	.LVL88:
 201:Src/main.c    ****   MX_CAN1_Init();
 2295              		.loc 1 201 3 view .LVU703
 2296 001a FFF7FEFF 		bl	MX_ADC1_Init
 2297              	.LVL89:
 202:Src/main.c    ****   MX_CAN3_Init();
 2298              		.loc 1 202 3 view .LVU704
 2299 001e FFF7FEFF 		bl	MX_CAN1_Init
 2300              	.LVL90:
 203:Src/main.c    ****   MX_SDMMC2_SD_Init();
 2301              		.loc 1 203 3 view .LVU705
 2302 0022 FFF7FEFF 		bl	MX_CAN3_Init
 2303              	.LVL91:
 204:Src/main.c    ****   MX_SPI2_Init();
 2304              		.loc 1 204 3 view .LVU706
 2305 0026 FFF7FEFF 		bl	MX_SDMMC2_SD_Init
 2306              	.LVL92:
 205:Src/main.c    ****   MX_TIM2_Init();
 2307              		.loc 1 205 3 view .LVU707
 2308 002a FFF7FEFF 		bl	MX_SPI2_Init
 2309              	.LVL93:
 206:Src/main.c    ****   MX_TIM3_Init();
 2310              		.loc 1 206 3 view .LVU708
 2311 002e FFF7FEFF 		bl	MX_TIM2_Init
 2312              	.LVL94:
 207:Src/main.c    ****   MX_TIM4_Init();
 2313              		.loc 1 207 3 view .LVU709
 2314 0032 FFF7FEFF 		bl	MX_TIM3_Init
 2315              	.LVL95:
 208:Src/main.c    ****   MX_TIM8_Init();
 2316              		.loc 1 208 3 view .LVU710
ARM GAS  /tmp/ccrJKlhm.s 			page 73


 2317 0036 FFF7FEFF 		bl	MX_TIM4_Init
 2318              	.LVL96:
 209:Src/main.c    ****   MX_UART4_Init();
 2319              		.loc 1 209 3 view .LVU711
 2320 003a FFF7FEFF 		bl	MX_TIM8_Init
 2321              	.LVL97:
 210:Src/main.c    ****   MX_FATFS_Init();
 2322              		.loc 1 210 3 view .LVU712
 2323 003e FFF7FEFF 		bl	MX_UART4_Init
 2324              	.LVL98:
 211:Src/main.c    ****   MX_TIM5_Init();
 2325              		.loc 1 211 3 view .LVU713
 2326 0042 FFF7FEFF 		bl	MX_FATFS_Init
 2327              	.LVL99:
 212:Src/main.c    ****   /* USER CODE BEGIN 2 */
 2328              		.loc 1 212 3 view .LVU714
 2329 0046 FFF7FEFF 		bl	MX_TIM5_Init
 2330              	.LVL100:
 215:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2331              		.loc 1 215 3 view .LVU715
 2332 004a CD4D     		ldr	r5, .L129
 2333 004c CD4C     		ldr	r4, .L129+4
 2334 004e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2335 0050 2860     		str	r0, [r5]	@ unaligned
 2336 0052 6960     		str	r1, [r5, #4]	@ unaligned
 2337 0054 AA60     		str	r2, [r5, #8]	@ unaligned
 2338 0056 EB60     		str	r3, [r5, #12]	@ unaligned
 2339 0058 07CC     		ldmia	r4!, {r0, r1, r2}
 2340 005a 2861     		str	r0, [r5, #16]	@ unaligned
 2341 005c 6961     		str	r1, [r5, #20]	@ unaligned
 2342 005e AA61     		str	r2, [r5, #24]	@ unaligned
 2343 0060 2388     		ldrh	r3, [r4]	@ unaligned
 2344 0062 AB83     		strh	r3, [r5, #28]	@ unaligned
 216:Src/main.c    **** 
 2345              		.loc 1 216 3 view .LVU716
 216:Src/main.c    **** 
 2346              		.loc 1 216 46 is_stmt 0 view .LVU717
 2347 0064 2846     		mov	r0, r5
 2348 0066 FFF7FEFF 		bl	strlen
 2349              	.LVL101:
 216:Src/main.c    **** 
 2350              		.loc 1 216 3 view .LVU718
 2351 006a 0A23     		movs	r3, #10
 2352 006c 82B2     		uxth	r2, r0
 2353 006e 2946     		mov	r1, r5
 2354 0070 C548     		ldr	r0, .L129+8
 2355 0072 FFF7FEFF 		bl	HAL_UART_Transmit
 2356              	.LVL102:
 219:Src/main.c    ****   {
 2357              		.loc 1 219 3 is_stmt 1 view .LVU719
 2358              	.LBB19:
 219:Src/main.c    ****   {
 2359              		.loc 1 219 8 view .LVU720
 219:Src/main.c    ****   {
 2360              		.loc 1 219 12 is_stmt 0 view .LVU721
 2361 0076 0024     		movs	r4, #0
 219:Src/main.c    ****   {
ARM GAS  /tmp/ccrJKlhm.s 			page 74


 2362              		.loc 1 219 3 view .LVU722
 2363 0078 07E0     		b	.L111
 2364              	.LVL103:
 2365              	.L112:
 221:Src/main.c    ****     HAL_Delay(100);
 2366              		.loc 1 221 5 is_stmt 1 discriminator 3 view .LVU723
 2367 007a 8021     		movs	r1, #128
 2368 007c C348     		ldr	r0, .L129+12
 2369 007e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 2370              	.LVL104:
 222:Src/main.c    ****   }
 2371              		.loc 1 222 5 discriminator 3 view .LVU724
 2372 0082 6420     		movs	r0, #100
 2373 0084 FFF7FEFF 		bl	HAL_Delay
 2374              	.LVL105:
 219:Src/main.c    ****   {
 2375              		.loc 1 219 26 discriminator 3 view .LVU725
 219:Src/main.c    ****   {
 2376              		.loc 1 219 27 is_stmt 0 discriminator 3 view .LVU726
 2377 0088 0134     		adds	r4, r4, #1
 2378              	.LVL106:
 2379              	.L111:
 219:Src/main.c    ****   {
 2380              		.loc 1 219 19 is_stmt 1 discriminator 1 view .LVU727
 219:Src/main.c    ****   {
 2381              		.loc 1 219 3 is_stmt 0 discriminator 1 view .LVU728
 2382 008a 082C     		cmp	r4, #8
 2383 008c F5DD     		ble	.L112
 2384              	.LBE19:
 225:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2385              		.loc 1 225 3 is_stmt 1 view .LVU729
 2386 008e BC4C     		ldr	r4, .L129
 2387              	.LVL107:
 225:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2388              		.loc 1 225 3 is_stmt 0 view .LVU730
 2389 0090 BF4D     		ldr	r5, .L129+16
 2390 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2391 0094 2060     		str	r0, [r4]	@ unaligned
 2392 0096 6160     		str	r1, [r4, #4]	@ unaligned
 2393 0098 A260     		str	r2, [r4, #8]	@ unaligned
 2394 009a E360     		str	r3, [r4, #12]	@ unaligned
 226:Src/main.c    ****   //BUZZER
 2395              		.loc 1 226 3 is_stmt 1 view .LVU731
 226:Src/main.c    ****   //BUZZER
 2396              		.loc 1 226 46 is_stmt 0 view .LVU732
 2397 009c 2046     		mov	r0, r4
 2398 009e FFF7FEFF 		bl	strlen
 2399              	.LVL108:
 226:Src/main.c    ****   //BUZZER
 2400              		.loc 1 226 3 view .LVU733
 2401 00a2 B94E     		ldr	r6, .L129+8
 2402 00a4 0A23     		movs	r3, #10
 2403 00a6 82B2     		uxth	r2, r0
 2404 00a8 2146     		mov	r1, r4
 2405 00aa 3046     		mov	r0, r6
 2406 00ac FFF7FEFF 		bl	HAL_UART_Transmit
 2407              	.LVL109:
ARM GAS  /tmp/ccrJKlhm.s 			page 75


 228:Src/main.c    ****   HAL_Delay(100);
 2408              		.loc 1 228 3 is_stmt 1 view .LVU734
 2409 00b0 B64D     		ldr	r5, .L129+12
 2410 00b2 0122     		movs	r2, #1
 2411 00b4 4021     		movs	r1, #64
 2412 00b6 2846     		mov	r0, r5
 2413 00b8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2414              	.LVL110:
 229:Src/main.c    ****   HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 2415              		.loc 1 229 3 view .LVU735
 2416 00bc 6420     		movs	r0, #100
 2417 00be FFF7FEFF 		bl	HAL_Delay
 2418              	.LVL111:
 230:Src/main.c    ****   sprintf(txt, "DONE\n");
 2419              		.loc 1 230 3 view .LVU736
 2420 00c2 0022     		movs	r2, #0
 2421 00c4 4021     		movs	r1, #64
 2422 00c6 2846     		mov	r0, r5
 2423 00c8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2424              	.LVL112:
 231:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2425              		.loc 1 231 3 view .LVU737
 2426 00cc B14B     		ldr	r3, .L129+20
 2427 00ce 1868     		ldr	r0, [r3]
 2428 00d0 2060     		str	r0, [r4]	@ unaligned
 2429 00d2 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 2430 00d4 A380     		strh	r3, [r4, #4]	@ unaligned
 232:Src/main.c    **** 
 2431              		.loc 1 232 3 view .LVU738
 232:Src/main.c    **** 
 2432              		.loc 1 232 46 is_stmt 0 view .LVU739
 2433 00d6 2046     		mov	r0, r4
 2434 00d8 FFF7FEFF 		bl	strlen
 2435              	.LVL113:
 232:Src/main.c    **** 
 2436              		.loc 1 232 3 view .LVU740
 2437 00dc 0A23     		movs	r3, #10
 2438 00de 82B2     		uxth	r2, r0
 2439 00e0 2146     		mov	r1, r4
 2440 00e2 3046     		mov	r0, r6
 2441 00e4 FFF7FEFF 		bl	HAL_UART_Transmit
 2442              	.LVL114:
 234:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 2443              		.loc 1 234 3 is_stmt 1 view .LVU741
 234:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 2444              		.loc 1 234 22 is_stmt 0 view .LVU742
 2445 00e8 AB4B     		ldr	r3, .L129+24
 2446 00ea 1422     		movs	r2, #20
 2447 00ec 83F8F42C 		strb	r2, [r3, #3316]
 235:Src/main.c    ****   can1.hcan = &hcan1;
 2448              		.loc 1 235 3 is_stmt 1 view .LVU743
 235:Src/main.c    ****   can1.hcan = &hcan1;
 2449              		.loc 1 235 21 is_stmt 0 view .LVU744
 2450 00f0 1322     		movs	r2, #19
 2451 00f2 83F8F52C 		strb	r2, [r3, #3317]
 236:Src/main.c    **** 
 2452              		.loc 1 236 3 is_stmt 1 view .LVU745
ARM GAS  /tmp/ccrJKlhm.s 			page 76


 236:Src/main.c    **** 
 2453              		.loc 1 236 13 is_stmt 0 view .LVU746
 2454 00f6 A94A     		ldr	r2, .L129+28
 2455 00f8 1A64     		str	r2, [r3, #64]
 238:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2456              		.loc 1 238 3 is_stmt 1 view .LVU747
 2457 00fa A94D     		ldr	r5, .L129+32
 2458 00fc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2459 00fe 2060     		str	r0, [r4]	@ unaligned
 2460 0100 6160     		str	r1, [r4, #4]	@ unaligned
 2461 0102 A260     		str	r2, [r4, #8]	@ unaligned
 2462 0104 E360     		str	r3, [r4, #12]	@ unaligned
 2463 0106 2868     		ldr	r0, [r5]
 2464 0108 2061     		str	r0, [r4, #16]	@ unaligned
 2465 010a AA88     		ldrh	r2, [r5, #4]	@ unaligned
 2466 010c AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 2467 010e A282     		strh	r2, [r4, #20]	@ unaligned
 2468 0110 A375     		strb	r3, [r4, #22]
 239:Src/main.c    ****   if (can_init())
 2469              		.loc 1 239 3 view .LVU748
 239:Src/main.c    ****   if (can_init())
 2470              		.loc 1 239 46 is_stmt 0 view .LVU749
 2471 0112 2046     		mov	r0, r4
 2472 0114 FFF7FEFF 		bl	strlen
 2473              	.LVL115:
 239:Src/main.c    ****   if (can_init())
 2474              		.loc 1 239 3 view .LVU750
 2475 0118 0A23     		movs	r3, #10
 2476 011a 82B2     		uxth	r2, r0
 2477 011c 2146     		mov	r1, r4
 2478 011e 3046     		mov	r0, r6
 2479 0120 FFF7FEFF 		bl	HAL_UART_Transmit
 2480              	.LVL116:
 240:Src/main.c    ****     sprintf(txt, "DONE\r\n");
 2481              		.loc 1 240 3 is_stmt 1 view .LVU751
 240:Src/main.c    ****     sprintf(txt, "DONE\r\n");
 2482              		.loc 1 240 7 is_stmt 0 view .LVU752
 2483 0124 FFF7FEFF 		bl	can_init
 2484              	.LVL117:
 240:Src/main.c    ****     sprintf(txt, "DONE\r\n");
 2485              		.loc 1 240 6 view .LVU753
 2486 0128 0028     		cmp	r0, #0
 2487 012a 00F0DF80 		beq	.L113
 241:Src/main.c    ****   else
 2488              		.loc 1 241 5 is_stmt 1 view .LVU754
 2489 012e 9D4A     		ldr	r2, .L129+36
 2490 0130 1068     		ldr	r0, [r2]
 2491 0132 2060     		str	r0, [r4]	@ unaligned
 2492 0134 9188     		ldrh	r1, [r2, #4]	@ unaligned
 2493 0136 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 2494 0138 A180     		strh	r1, [r4, #4]	@ unaligned
 2495 013a A271     		strb	r2, [r4, #6]
 2496              	.L114:
 244:Src/main.c    **** 
 2497              		.loc 1 244 3 view .LVU755
 244:Src/main.c    **** 
 2498              		.loc 1 244 46 is_stmt 0 view .LVU756
ARM GAS  /tmp/ccrJKlhm.s 			page 77


 2499 013c 904C     		ldr	r4, .L129
 2500 013e 2046     		mov	r0, r4
 2501 0140 FFF7FEFF 		bl	strlen
 2502              	.LVL118:
 244:Src/main.c    **** 
 2503              		.loc 1 244 3 view .LVU757
 2504 0144 904E     		ldr	r6, .L129+8
 2505 0146 0A23     		movs	r3, #10
 2506 0148 82B2     		uxth	r2, r0
 2507 014a 2146     		mov	r1, r4
 2508 014c 3046     		mov	r0, r6
 2509 014e FFF7FEFF 		bl	HAL_UART_Transmit
 2510              	.LVL119:
 246:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2511              		.loc 1 246 3 is_stmt 1 view .LVU758
 2512 0152 954D     		ldr	r5, .L129+40
 2513 0154 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2514 0156 2060     		str	r0, [r4]	@ unaligned
 2515 0158 6160     		str	r1, [r4, #4]	@ unaligned
 2516 015a A260     		str	r2, [r4, #8]	@ unaligned
 2517 015c E360     		str	r3, [r4, #12]	@ unaligned
 2518 015e 2A88     		ldrh	r2, [r5]	@ unaligned
 2519 0160 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2520 0162 2282     		strh	r2, [r4, #16]	@ unaligned
 2521 0164 A374     		strb	r3, [r4, #18]
 247:Src/main.c    ****   LTC_init(&ltc, &hspi2, 0, GPIOD, GPIO_PIN_4); //init function of LTC_6810
 2522              		.loc 1 247 3 view .LVU759
 247:Src/main.c    ****   LTC_init(&ltc, &hspi2, 0, GPIOD, GPIO_PIN_4); //init function of LTC_6810
 2523              		.loc 1 247 46 is_stmt 0 view .LVU760
 2524 0166 2046     		mov	r0, r4
 2525 0168 FFF7FEFF 		bl	strlen
 2526              	.LVL120:
 247:Src/main.c    ****   LTC_init(&ltc, &hspi2, 0, GPIOD, GPIO_PIN_4); //init function of LTC_6810
 2527              		.loc 1 247 3 view .LVU761
 2528 016c 0A23     		movs	r3, #10
 2529 016e 82B2     		uxth	r2, r0
 2530 0170 2146     		mov	r1, r4
 2531 0172 3046     		mov	r0, r6
 2532 0174 FFF7FEFF 		bl	HAL_UART_Transmit
 2533              	.LVL121:
 248:Src/main.c    ****   sprintf(txt, "DONE\r\n");
 2534              		.loc 1 248 3 is_stmt 1 view .LVU762
 2535 0178 1023     		movs	r3, #16
 2536 017a 0093     		str	r3, [sp]
 2537 017c 8B4B     		ldr	r3, .L129+44
 2538 017e 0022     		movs	r2, #0
 2539 0180 8B49     		ldr	r1, .L129+48
 2540 0182 8C48     		ldr	r0, .L129+52
 2541 0184 FFF7FEFF 		bl	LTC_init
 2542              	.LVL122:
 249:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2543              		.loc 1 249 3 view .LVU763
 2544 0188 864B     		ldr	r3, .L129+36
 2545 018a 1868     		ldr	r0, [r3]
 2546 018c 2060     		str	r0, [r4]	@ unaligned
 2547 018e 9A88     		ldrh	r2, [r3, #4]	@ unaligned
 2548 0190 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
ARM GAS  /tmp/ccrJKlhm.s 			page 78


 2549 0192 A280     		strh	r2, [r4, #4]	@ unaligned
 2550 0194 A371     		strb	r3, [r4, #6]
 250:Src/main.c    **** 
 2551              		.loc 1 250 3 view .LVU764
 250:Src/main.c    **** 
 2552              		.loc 1 250 46 is_stmt 0 view .LVU765
 2553 0196 2046     		mov	r0, r4
 2554 0198 FFF7FEFF 		bl	strlen
 2555              	.LVL123:
 250:Src/main.c    **** 
 2556              		.loc 1 250 3 view .LVU766
 2557 019c 0A23     		movs	r3, #10
 2558 019e 82B2     		uxth	r2, r0
 2559 01a0 2146     		mov	r1, r4
 2560 01a2 3046     		mov	r0, r6
 2561 01a4 FFF7FEFF 		bl	HAL_UART_Transmit
 2562              	.LVL124:
 252:Src/main.c    ****   UserAdcConfig.Rank = ADC_REGULAR_RANK_1;
 2563              		.loc 1 252 3 is_stmt 1 view .LVU767
 252:Src/main.c    ****   UserAdcConfig.Rank = ADC_REGULAR_RANK_1;
 2564              		.loc 1 252 25 is_stmt 0 view .LVU768
 2565 01a8 8349     		ldr	r1, .L129+56
 2566 01aa 0223     		movs	r3, #2
 2567 01ac 0B60     		str	r3, [r1]
 253:Src/main.c    ****   UserAdcConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 2568              		.loc 1 253 3 is_stmt 1 view .LVU769
 253:Src/main.c    ****   UserAdcConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 2569              		.loc 1 253 22 is_stmt 0 view .LVU770
 2570 01ae 0124     		movs	r4, #1
 2571 01b0 4C60     		str	r4, [r1, #4]
 254:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &UserAdcConfig) != HAL_OK)
 2572              		.loc 1 254 3 is_stmt 1 view .LVU771
 254:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &UserAdcConfig) != HAL_OK)
 2573              		.loc 1 254 30 is_stmt 0 view .LVU772
 2574 01b2 0723     		movs	r3, #7
 2575 01b4 8B60     		str	r3, [r1, #8]
 255:Src/main.c    ****   {
 2576              		.loc 1 255 3 is_stmt 1 view .LVU773
 255:Src/main.c    ****   {
 2577              		.loc 1 255 7 is_stmt 0 view .LVU774
 2578 01b6 814D     		ldr	r5, .L129+60
 2579 01b8 2846     		mov	r0, r5
 2580 01ba FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2581              	.LVL125:
 259:Src/main.c    **** 
 2582              		.loc 1 259 3 is_stmt 1 view .LVU775
 2583 01be 2846     		mov	r0, r5
 2584 01c0 FFF7FEFF 		bl	HAL_ADC_Start_IT
 2585              	.LVL126:
 261:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim8);
 2586              		.loc 1 261 3 view .LVU776
 2587 01c4 7E4D     		ldr	r5, .L129+64
 2588 01c6 2846     		mov	r0, r5
 2589 01c8 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2590              	.LVL127:
 262:Src/main.c    ****   HAL_TIM_Base_Start(&htim5);
 2591              		.loc 1 262 3 view .LVU777
ARM GAS  /tmp/ccrJKlhm.s 			page 79


 2592 01cc DFF83C82 		ldr	r8, .L129+140
 2593 01d0 4046     		mov	r0, r8
 2594 01d2 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2595              	.LVL128:
 263:Src/main.c    ****   HAL_TIM_Base_Start(&htim8);
 2596              		.loc 1 263 3 view .LVU778
 2597 01d6 2846     		mov	r0, r5
 2598 01d8 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2599              	.LVL129:
 264:Src/main.c    **** 
 2600              		.loc 1 264 3 view .LVU779
 2601 01dc 4046     		mov	r0, r8
 2602 01de FFF7FEFF 		bl	HAL_TIM_Base_Start
 2603              	.LVL130:
 267:Src/main.c    ****   Init_pwm(&lv_pwm, &htim3, TIM_CHANNEL_1);
 2604              		.loc 1 267 3 view .LVU780
 2605 01e2 0022     		movs	r2, #0
 2606 01e4 7749     		ldr	r1, .L129+68
 2607 01e6 7848     		ldr	r0, .L129+72
 2608 01e8 FFF7FEFF 		bl	Init_pwm
 2609              	.LVL131:
 268:Src/main.c    ****   Init_pwm(&pump_pwm, &htim4, TIM_CHANNEL_1);
 2610              		.loc 1 268 3 view .LVU781
 2611 01ec 0022     		movs	r2, #0
 2612 01ee 7749     		ldr	r1, .L129+76
 2613 01f0 7748     		ldr	r0, .L129+80
 2614 01f2 FFF7FEFF 		bl	Init_pwm
 2615              	.LVL132:
 269:Src/main.c    **** 
 2616              		.loc 1 269 3 view .LVU782
 2617 01f6 0022     		movs	r2, #0
 2618 01f8 7649     		ldr	r1, .L129+84
 2619 01fa 7748     		ldr	r0, .L129+88
 2620 01fc FFF7FEFF 		bl	Init_pwm
 2621              	.LVL133:
 272:Src/main.c    ****   hv_temp.desired = 45;
 2622              		.loc 1 272 3 view .LVU783
 272:Src/main.c    ****   hv_temp.desired = 45;
 2623              		.loc 1 272 19 is_stmt 0 view .LVU784
 2624 0200 764F     		ldr	r7, .L129+92
 2625 0202 2D23     		movs	r3, #45
 2626 0204 BB60     		str	r3, [r7, #8]
 273:Src/main.c    ****   pump_temp.desired = 45;
 2627              		.loc 1 273 3 is_stmt 1 view .LVU785
 273:Src/main.c    ****   pump_temp.desired = 45;
 2628              		.loc 1 273 19 is_stmt 0 view .LVU786
 2629 0206 764E     		ldr	r6, .L129+96
 2630 0208 B360     		str	r3, [r6, #8]
 274:Src/main.c    **** 
 2631              		.loc 1 274 3 is_stmt 1 view .LVU787
 274:Src/main.c    **** 
 2632              		.loc 1 274 21 is_stmt 0 view .LVU788
 2633 020a 764D     		ldr	r5, .L129+100
 2634 020c AB60     		str	r3, [r5, #8]
 276:Src/main.c    ****   hv_temp.max_temp = 70;
 2635              		.loc 1 276 3 is_stmt 1 view .LVU789
 276:Src/main.c    ****   hv_temp.max_temp = 70;
ARM GAS  /tmp/ccrJKlhm.s 			page 80


 2636              		.loc 1 276 20 is_stmt 0 view .LVU790
 2637 020e 4623     		movs	r3, #70
 2638 0210 FB60     		str	r3, [r7, #12]
 277:Src/main.c    ****   pump_temp.max_temp = 70;
 2639              		.loc 1 277 3 is_stmt 1 view .LVU791
 277:Src/main.c    ****   pump_temp.max_temp = 70;
 2640              		.loc 1 277 20 is_stmt 0 view .LVU792
 2641 0212 F360     		str	r3, [r6, #12]
 278:Src/main.c    **** 
 2642              		.loc 1 278 3 is_stmt 1 view .LVU793
 278:Src/main.c    **** 
 2643              		.loc 1 278 22 is_stmt 0 view .LVU794
 2644 0214 EB60     		str	r3, [r5, #12]
 281:Src/main.c    ****   PIDInit(&lv_pid, 10, 0.01, 0.01, (float)sample_time, 100, 1000, AUTOMATIC, REVERSE);
 2645              		.loc 1 281 3 is_stmt 1 view .LVU795
 281:Src/main.c    ****   PIDInit(&lv_pid, 10, 0.01, 0.01, (float)sample_time, 100, 1000, AUTOMATIC, REVERSE);
 2646              		.loc 1 281 35 is_stmt 0 view .LVU796
 2647 0216 D8F80420 		ldr	r2, [r8, #4]
 281:Src/main.c    ****   PIDInit(&lv_pid, 10, 0.01, 0.01, (float)sample_time, 100, 1000, AUTOMATIC, REVERSE);
 2648              		.loc 1 281 58 view .LVU797
 2649 021a D8F80C30 		ldr	r3, [r8, #12]
 281:Src/main.c    ****   PIDInit(&lv_pid, 10, 0.01, 0.01, (float)sample_time, 100, 1000, AUTOMATIC, REVERSE);
 2650              		.loc 1 281 46 view .LVU798
 2651 021e 03FB02F3 		mul	r3, r3, r2
 281:Src/main.c    ****   PIDInit(&lv_pid, 10, 0.01, 0.01, (float)sample_time, 100, 1000, AUTOMATIC, REVERSE);
 2652              		.loc 1 281 67 view .LVU799
 2653 0222 1B0A     		lsrs	r3, r3, #8
 2654 0224 704A     		ldr	r2, .L129+104
 2655 0226 A2FB0323 		umull	r2, r3, r2, r3
 2656 022a DB0A     		lsrs	r3, r3, #11
 2657 022c 01EE903A 		vmov	s3, r3	@ int
 2658              	.LVL134:
 282:Src/main.c    ****   PIDInit(&hv_pid, 10, 0.01, 0.01, 0.5, 100, 1000, AUTOMATIC, REVERSE);
 2659              		.loc 1 282 3 is_stmt 1 view .LVU800
 2660 0230 9FED6E9A 		vldr.32	s18, .L129+108
 2661 0234 DFED6E8A 		vldr.32	s17, .L129+112
 2662 0238 9FED6E8A 		vldr.32	s16, .L129+116
 2663 023c DFF8D0A1 		ldr	r10, .L129+144
 2664 0240 2246     		mov	r2, r4
 2665 0242 2146     		mov	r1, r4
 2666 0244 F0EE492A 		vmov.f32	s5, s18
 2667 0248 B0EE682A 		vmov.f32	s4, s17
 2668 024c F8EE611A 		vcvt.f32.u32	s3, s3
 2669 0250 B0EE481A 		vmov.f32	s2, s16
 2670 0254 F0EE480A 		vmov.f32	s1, s16
 2671 0258 B2EE040A 		vmov.f32	s0, #1.0e+1
 2672 025c 5046     		mov	r0, r10
 2673 025e FFF7FEFF 		bl	PIDInit
 2674              	.LVL135:
 283:Src/main.c    ****   PIDInit(&pump_pid, 10, 0.01, 0.01, 0.5, 100, 1000, AUTOMATIC, REVERSE);
 2675              		.loc 1 283 3 view .LVU801
 2676 0262 DFF8A091 		ldr	r9, .L129+132
 2677 0266 2246     		mov	r2, r4
 2678 0268 2146     		mov	r1, r4
 2679 026a F0EE492A 		vmov.f32	s5, s18
 2680 026e B0EE682A 		vmov.f32	s4, s17
 2681 0272 F6EE001A 		vmov.f32	s3, #5.0e-1
ARM GAS  /tmp/ccrJKlhm.s 			page 81


 2682 0276 B0EE481A 		vmov.f32	s2, s16
 2683 027a F0EE480A 		vmov.f32	s1, s16
 2684 027e B2EE040A 		vmov.f32	s0, #1.0e+1
 2685 0282 4846     		mov	r0, r9
 2686 0284 FFF7FEFF 		bl	PIDInit
 2687              	.LVL136:
 284:Src/main.c    **** 
 2688              		.loc 1 284 3 view .LVU802
 2689 0288 DFF87C81 		ldr	r8, .L129+136
 2690 028c 2246     		mov	r2, r4
 2691 028e 2146     		mov	r1, r4
 2692 0290 F0EE492A 		vmov.f32	s5, s18
 2693 0294 B0EE682A 		vmov.f32	s4, s17
 2694 0298 F6EE001A 		vmov.f32	s3, #5.0e-1
 2695 029c B0EE481A 		vmov.f32	s2, s16
 2696 02a0 F0EE480A 		vmov.f32	s1, s16
 2697 02a4 B2EE040A 		vmov.f32	s0, #1.0e+1
 2698 02a8 4046     		mov	r0, r8
 2699 02aa FFF7FEFF 		bl	PIDInit
 2700              	.LVL137:
 286:Src/main.c    ****   hv_pid.setpoint = hv_temp.desired;
 2701              		.loc 1 286 3 view .LVU803
 286:Src/main.c    ****   hv_pid.setpoint = hv_temp.desired;
 2702              		.loc 1 286 19 is_stmt 0 view .LVU804
 2703 02ae D7ED027A 		vldr.32	s15, [r7, #8]	@ int
 2704 02b2 F8EE677A 		vcvt.f32.u32	s15, s15
 2705 02b6 CAED0D7A 		vstr.32	s15, [r10, #52]
 287:Src/main.c    ****   pump_pid.setpoint = pump_temp.desired;
 2706              		.loc 1 287 3 is_stmt 1 view .LVU805
 287:Src/main.c    ****   pump_pid.setpoint = pump_temp.desired;
 2707              		.loc 1 287 19 is_stmt 0 view .LVU806
 2708 02ba D6ED027A 		vldr.32	s15, [r6, #8]	@ int
 2709 02be F8EE677A 		vcvt.f32.u32	s15, s15
 2710 02c2 C9ED0D7A 		vstr.32	s15, [r9, #52]
 288:Src/main.c    **** 
 2711              		.loc 1 288 3 is_stmt 1 view .LVU807
 288:Src/main.c    **** 
 2712              		.loc 1 288 21 is_stmt 0 view .LVU808
 2713 02c6 D5ED027A 		vldr.32	s15, [r5, #8]	@ int
 2714 02ca F8EE677A 		vcvt.f32.u32	s15, s15
 2715 02ce C8ED0D7A 		vstr.32	s15, [r8, #52]
 290:Src/main.c    ****   hv_temp.value = 50;
 2716              		.loc 1 290 3 is_stmt 1 view .LVU809
 290:Src/main.c    ****   hv_temp.value = 50;
 2717              		.loc 1 290 17 is_stmt 0 view .LVU810
 2718 02d2 4123     		movs	r3, #65
 2719 02d4 3B60     		str	r3, [r7]
 291:Src/main.c    ****   pump_temp.value = 50;
 2720              		.loc 1 291 3 is_stmt 1 view .LVU811
 291:Src/main.c    ****   pump_temp.value = 50;
 2721              		.loc 1 291 17 is_stmt 0 view .LVU812
 2722 02d6 3223     		movs	r3, #50
 2723 02d8 3360     		str	r3, [r6]
 292:Src/main.c    **** 
 2724              		.loc 1 292 3 is_stmt 1 view .LVU813
 292:Src/main.c    **** 
 2725              		.loc 1 292 19 is_stmt 0 view .LVU814
ARM GAS  /tmp/ccrJKlhm.s 			page 82


 2726 02da 2B60     		str	r3, [r5]
 298:Src/main.c    ****   int currentTick = m_sec_timer;
 2727              		.loc 1 298 3 is_stmt 1 view .LVU815
 298:Src/main.c    ****   int currentTick = m_sec_timer;
 2728              		.loc 1 298 17 is_stmt 0 view .LVU816
 2729 02dc FFF7FEFF 		bl	HAL_GetTick
 2730              	.LVL138:
 298:Src/main.c    ****   int currentTick = m_sec_timer;
 2731              		.loc 1 298 15 view .LVU817
 2732 02e0 454B     		ldr	r3, .L129+120
 2733 02e2 1860     		str	r0, [r3]
 299:Src/main.c    ****   int previous_millis = HAL_GetTick();
 2734              		.loc 1 299 3 is_stmt 1 view .LVU818
 2735              	.LVL139:
 300:Src/main.c    ****   while (1)
 2736              		.loc 1 300 3 view .LVU819
 300:Src/main.c    ****   while (1)
 2737              		.loc 1 300 25 is_stmt 0 view .LVU820
 2738 02e4 FFF7FEFF 		bl	HAL_GetTick
 2739              	.LVL140:
 300:Src/main.c    ****   while (1)
 2740              		.loc 1 300 25 view .LVU821
 2741 02e8 0746     		mov	r7, r0
 2742              	.LVL141:
 300:Src/main.c    ****   while (1)
 2743              		.loc 1 300 25 view .LVU822
 2744 02ea 2DE1     		b	.L123
 2745              	.LVL142:
 2746              	.L113:
 243:Src/main.c    ****   HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2747              		.loc 1 243 5 is_stmt 1 view .LVU823
 2748 02ec 244A     		ldr	r2, .L129
 2749 02ee 434B     		ldr	r3, .L129+124
 2750 02f0 03CB     		ldmia	r3!, {r0, r1}
 2751 02f2 1060     		str	r0, [r2]	@ unaligned
 2752 02f4 5160     		str	r1, [r2, #4]	@ unaligned
 2753 02f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2754 02f8 1372     		strb	r3, [r2, #8]
 2755 02fa 1FE7     		b	.L114
 2756              	.LVL143:
 2757              	.L125:
 307:Src/main.c    **** 
 2758              		.loc 1 307 7 view .LVU824
 307:Src/main.c    **** 
 2759              		.loc 1 307 26 is_stmt 0 view .LVU825
 2760 02fc 404B     		ldr	r3, .L129+128
 2761 02fe 0022     		movs	r2, #0
 2762 0300 1A60     		str	r2, [r3]
 310:Src/main.c    **** 
 2763              		.loc 1 310 7 is_stmt 1 view .LVU826
 2764 0302 2C48     		ldr	r0, .L129+52
 2765              	.LVL144:
 310:Src/main.c    **** 
 2766              		.loc 1 310 7 is_stmt 0 view .LVU827
 2767 0304 FFF7FEFF 		bl	read_voltages
 2768              	.LVL145:
 315:Src/main.c    ****       hv_pid.input = hv_temp.value;
ARM GAS  /tmp/ccrJKlhm.s 			page 83


 2769              		.loc 1 315 7 is_stmt 1 view .LVU828
 315:Src/main.c    ****       hv_pid.input = hv_temp.value;
 2770              		.loc 1 315 29 is_stmt 0 view .LVU829
 2771 0308 344B     		ldr	r3, .L129+92
 2772 030a D3ED007A 		vldr.32	s15, [r3]	@ int
 315:Src/main.c    ****       hv_pid.input = hv_temp.value;
 2773              		.loc 1 315 20 view .LVU830
 2774 030e DFF80081 		ldr	r8, .L129+144
 2775 0312 F8EE677A 		vcvt.f32.u32	s15, s15
 2776 0316 C8ED007A 		vstr.32	s15, [r8]
 316:Src/main.c    ****       pump_pid.input = pump_temp.value;
 2777              		.loc 1 316 7 is_stmt 1 view .LVU831
 316:Src/main.c    ****       pump_pid.input = pump_temp.value;
 2778              		.loc 1 316 29 is_stmt 0 view .LVU832
 2779 031a 314B     		ldr	r3, .L129+96
 2780 031c D3ED007A 		vldr.32	s15, [r3]	@ int
 316:Src/main.c    ****       pump_pid.input = pump_temp.value;
 2781              		.loc 1 316 20 view .LVU833
 2782 0320 384E     		ldr	r6, .L129+132
 2783 0322 F8EE677A 		vcvt.f32.u32	s15, s15
 2784 0326 C6ED007A 		vstr.32	s15, [r6]
 317:Src/main.c    **** 
 2785              		.loc 1 317 7 is_stmt 1 view .LVU834
 317:Src/main.c    **** 
 2786              		.loc 1 317 33 is_stmt 0 view .LVU835
 2787 032a 2E4B     		ldr	r3, .L129+100
 2788 032c D3ED007A 		vldr.32	s15, [r3]	@ int
 317:Src/main.c    **** 
 2789              		.loc 1 317 22 view .LVU836
 2790 0330 354D     		ldr	r5, .L129+136
 2791 0332 F8EE677A 		vcvt.f32.u32	s15, s15
 2792 0336 C5ED007A 		vstr.32	s15, [r5]
 320:Src/main.c    ****       PIDCompute(&hv_pid);
 2793              		.loc 1 320 7 is_stmt 1 view .LVU837
 2794 033a 4046     		mov	r0, r8
 2795 033c FFF7FEFF 		bl	PIDCompute
 2796              	.LVL146:
 321:Src/main.c    ****       PIDCompute(&pump_pid);
 2797              		.loc 1 321 7 view .LVU838
 2798 0340 3046     		mov	r0, r6
 2799 0342 FFF7FEFF 		bl	PIDCompute
 2800              	.LVL147:
 322:Src/main.c    **** 
 2801              		.loc 1 322 7 view .LVU839
 2802 0346 2846     		mov	r0, r5
 2803 0348 FFF7FEFF 		bl	PIDCompute
 2804              	.LVL148:
 325:Src/main.c    ****       hv_pwm.value = hv_pid.output;
 2805              		.loc 1 325 7 view .LVU840
 325:Src/main.c    ****       hv_pwm.value = hv_pid.output;
 2806              		.loc 1 325 28 is_stmt 0 view .LVU841
 2807 034c D8ED027A 		vldr.32	s15, [r8, #8]
 325:Src/main.c    ****       hv_pwm.value = hv_pid.output;
 2808              		.loc 1 325 20 view .LVU842
 2809 0350 FCEEE77A 		vcvt.u32.f32	s15, s15
 2810 0354 1E4B     		ldr	r3, .L129+80
 2811 0356 C3ED007A 		vstr.32	s15, [r3]	@ int
ARM GAS  /tmp/ccrJKlhm.s 			page 84


 326:Src/main.c    ****       pump_pwm.value = pump_pid.output;
 2812              		.loc 1 326 7 is_stmt 1 view .LVU843
 326:Src/main.c    ****       pump_pwm.value = pump_pid.output;
 2813              		.loc 1 326 28 is_stmt 0 view .LVU844
 2814 035a D6ED027A 		vldr.32	s15, [r6, #8]
 326:Src/main.c    ****       pump_pwm.value = pump_pid.output;
 2815              		.loc 1 326 20 view .LVU845
 2816 035e FCEEE77A 		vcvt.u32.f32	s15, s15
 2817 0362 194B     		ldr	r3, .L129+72
 2818 0364 C3ED007A 		vstr.32	s15, [r3]	@ int
 327:Src/main.c    **** 
 2819              		.loc 1 327 7 is_stmt 1 view .LVU846
 327:Src/main.c    **** 
 2820              		.loc 1 327 32 is_stmt 0 view .LVU847
 2821 0368 D5ED027A 		vldr.32	s15, [r5, #8]
 327:Src/main.c    **** 
 2822              		.loc 1 327 22 view .LVU848
 2823 036c FCEEE77A 		vcvt.u32.f32	s15, s15
 2824 0370 194B     		ldr	r3, .L129+88
 2825 0372 C3ED007A 		vstr.32	s15, [r3]	@ int
 329:Src/main.c    ****       check_under_voltage();
 2826              		.loc 1 329 7 is_stmt 1 view .LVU849
 2827 0376 FFF7FEFF 		bl	check_over_temperature
 2828              	.LVL149:
 330:Src/main.c    ****     }
 2829              		.loc 1 330 7 view .LVU850
 2830 037a FFF7FEFF 		bl	check_under_voltage
 2831              	.LVL150:
 2832 037e EBE0     		b	.L115
 2833              	.L130:
 2834              		.align	2
 2835              	.L129:
 2836 0380 00000000 		.word	txt
 2837 0384 00000000 		.word	.LC0
 2838 0388 00000000 		.word	huart4
 2839 038c 00080240 		.word	1073874944
 2840 0390 20000000 		.word	.LC1
 2841 0394 30000000 		.word	.LC2
 2842 0398 00000000 		.word	can1
 2843 039c 00000000 		.word	hcan1
 2844 03a0 38000000 		.word	.LC3
 2845 03a4 50000000 		.word	.LC4
 2846 03a8 64000000 		.word	.LC6
 2847 03ac 000C0240 		.word	1073875968
 2848 03b0 00000000 		.word	hspi2
 2849 03b4 00000000 		.word	ltc
 2850 03b8 00000000 		.word	.LANCHOR0
 2851 03bc 00000000 		.word	hadc1
 2852 03c0 00000000 		.word	htim5
 2853 03c4 00000000 		.word	htim2
 2854 03c8 00000000 		.word	hv_pwm
 2855 03cc 00000000 		.word	htim3
 2856 03d0 00000000 		.word	lv_pwm
 2857 03d4 00000000 		.word	htim4
 2858 03d8 00000000 		.word	pump_pwm
 2859 03dc 00000000 		.word	lv_temp
 2860 03e0 00000000 		.word	hv_temp
ARM GAS  /tmp/ccrJKlhm.s 			page 85


 2861 03e4 00000000 		.word	pump_temp
 2862 03e8 4F253E01 		.word	20849999
 2863 03ec 00007A44 		.word	1148846080
 2864 03f0 0000C842 		.word	1120403456
 2865 03f4 0AD7233C 		.word	1008981770
 2866 03f8 00000000 		.word	.LANCHOR8
 2867 03fc 58000000 		.word	.LC5
 2868 0400 00000000 		.word	.LANCHOR7
 2869 0404 00000000 		.word	hv_pid
 2870 0408 00000000 		.word	pump_pid
 2871 040c 00000000 		.word	htim8
 2872 0410 00000000 		.word	lv_pid
 2873              	.L126:
 335:Src/main.c    ****       write_pwm_value(&hv_pwm);
 2874              		.loc 1 335 7 view .LVU851
 2875 0414 6948     		ldr	r0, .L131
 2876 0416 FFF7FEFF 		bl	write_pwm_value
 2877              	.LVL151:
 336:Src/main.c    ****       write_pwm_value(&pump_pwm);
 2878              		.loc 1 336 7 view .LVU852
 2879 041a 6948     		ldr	r0, .L131+4
 2880 041c FFF7FEFF 		bl	write_pwm_value
 2881              	.LVL152:
 337:Src/main.c    ****     }
 2882              		.loc 1 337 7 view .LVU853
 2883 0420 6848     		ldr	r0, .L131+8
 2884 0422 FFF7FEFF 		bl	write_pwm_value
 2885              	.LVL153:
 2886 0426 A3E0     		b	.L116
 2887              	.L127:
 342:Src/main.c    ****       {
 2888              		.loc 1 342 7 view .LVU854
 344:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2889              		.loc 1 344 9 view .LVU855
 2890 0428 674D     		ldr	r5, .L131+12
 2891 042a 684E     		ldr	r6, .L131+16
 2892 042c 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 2893 042e 2860     		str	r0, [r5]	@ unaligned
 2894 0430 6960     		str	r1, [r5, #4]	@ unaligned
 2895 0432 AA60     		str	r2, [r5, #8]	@ unaligned
 2896 0434 EB60     		str	r3, [r5, #12]	@ unaligned
 2897 0436 07CE     		ldmia	r6!, {r0, r1, r2}
 2898 0438 2861     		str	r0, [r5, #16]	@ unaligned
 2899 043a 6961     		str	r1, [r5, #20]	@ unaligned
 2900 043c AA61     		str	r2, [r5, #24]	@ unaligned
 2901 043e 3388     		ldrh	r3, [r6]	@ unaligned
 2902 0440 AB83     		strh	r3, [r5, #28]	@ unaligned
 345:Src/main.c    ****         sprintf(txt, "BMS_IS_ON: %d, overT: %d, underV: %d\r\n", BMS_IS_ON, OVER_TEMPERATURE, UNDER
 2903              		.loc 1 345 9 view .LVU856
 345:Src/main.c    ****         sprintf(txt, "BMS_IS_ON: %d, overT: %d, underV: %d\r\n", BMS_IS_ON, OVER_TEMPERATURE, UNDER
 2904              		.loc 1 345 52 is_stmt 0 view .LVU857
 2905 0442 2846     		mov	r0, r5
 2906 0444 FFF7FEFF 		bl	strlen
 2907              	.LVL154:
 345:Src/main.c    ****         sprintf(txt, "BMS_IS_ON: %d, overT: %d, underV: %d\r\n", BMS_IS_ON, OVER_TEMPERATURE, UNDER
 2908              		.loc 1 345 9 view .LVU858
 2909 0448 614E     		ldr	r6, .L131+20
ARM GAS  /tmp/ccrJKlhm.s 			page 86


 2910 044a 0A23     		movs	r3, #10
 2911 044c 82B2     		uxth	r2, r0
 2912 044e 2946     		mov	r1, r5
 2913 0450 3046     		mov	r0, r6
 2914 0452 FFF7FEFF 		bl	HAL_UART_Transmit
 2915              	.LVL155:
 346:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2916              		.loc 1 346 9 is_stmt 1 view .LVU859
 2917 0456 5F4B     		ldr	r3, .L131+24
 2918 0458 1B68     		ldr	r3, [r3]
 2919 045a 0093     		str	r3, [sp]
 2920 045c 5E4B     		ldr	r3, .L131+28
 2921 045e 1B68     		ldr	r3, [r3]
 2922 0460 5E4A     		ldr	r2, .L131+32
 2923 0462 1268     		ldr	r2, [r2]
 2924 0464 5E49     		ldr	r1, .L131+36
 2925 0466 2846     		mov	r0, r5
 2926 0468 FFF7FEFF 		bl	sprintf
 2927              	.LVL156:
 347:Src/main.c    ****         sprintf(txt, "PID outputs lv: %d hv: %d pump: %d\r\n", (int)PIDOutputGet(&lv_pid), (int)PID
 2928              		.loc 1 347 9 view .LVU860
 347:Src/main.c    ****         sprintf(txt, "PID outputs lv: %d hv: %d pump: %d\r\n", (int)PIDOutputGet(&lv_pid), (int)PID
 2929              		.loc 1 347 52 is_stmt 0 view .LVU861
 2930 046c 2846     		mov	r0, r5
 2931 046e FFF7FEFF 		bl	strlen
 2932              	.LVL157:
 347:Src/main.c    ****         sprintf(txt, "PID outputs lv: %d hv: %d pump: %d\r\n", (int)PIDOutputGet(&lv_pid), (int)PID
 2933              		.loc 1 347 9 view .LVU862
 2934 0472 0A23     		movs	r3, #10
 2935 0474 82B2     		uxth	r2, r0
 2936 0476 2946     		mov	r1, r5
 2937 0478 3046     		mov	r0, r6
 2938 047a FFF7FEFF 		bl	HAL_UART_Transmit
 2939              	.LVL158:
 348:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2940              		.loc 1 348 9 is_stmt 1 view .LVU863
 2941              	.LBB20:
 2942              	.LBI20:
 2943              		.file 2 "Inc/pid_controller.h"
   1:Inc/pid_controller.h **** //*********************************************************************************
   2:Inc/pid_controller.h **** // Daniele Facinelli   Eagle-TRT  27/04/18
   3:Inc/pid_controller.h **** //
   4:Inc/pid_controller.h **** // PID library for Pumps and fan control of cooling system developed for Chimera Evo
   5:Inc/pid_controller.h **** //
   6:Inc/pid_controller.h **** //
   7:Inc/pid_controller.h **** //*********************************************************************************
   8:Inc/pid_controller.h **** 
   9:Inc/pid_controller.h **** //
  10:Inc/pid_controller.h **** // Header Guard
  11:Inc/pid_controller.h **** //
  12:Inc/pid_controller.h **** #ifndef PID_CONTROLLER_H_
  13:Inc/pid_controller.h **** #define PID_CONTROLLER_H_
  14:Inc/pid_controller.h **** 
  15:Inc/pid_controller.h **** //*********************************************************************************
  16:Inc/pid_controller.h **** // Headers
  17:Inc/pid_controller.h **** //*********************************************************************************
  18:Inc/pid_controller.h **** #include <stdint.h>
ARM GAS  /tmp/ccrJKlhm.s 			page 87


  19:Inc/pid_controller.h **** #include <stdbool.h>
  20:Inc/pid_controller.h **** 
  21:Inc/pid_controller.h **** //*********************************************************************************
  22:Inc/pid_controller.h **** // Macros and Globals
  23:Inc/pid_controller.h **** //*********************************************************************************
  24:Inc/pid_controller.h **** 
  25:Inc/pid_controller.h **** typedef enum
  26:Inc/pid_controller.h **** {
  27:Inc/pid_controller.h ****     MANUAL,
  28:Inc/pid_controller.h ****     AUTOMATIC
  29:Inc/pid_controller.h **** } PIDMode;
  30:Inc/pid_controller.h **** 
  31:Inc/pid_controller.h **** typedef enum
  32:Inc/pid_controller.h **** {
  33:Inc/pid_controller.h ****     DIRECT,
  34:Inc/pid_controller.h ****     REVERSE
  35:Inc/pid_controller.h **** } PIDDirection;
  36:Inc/pid_controller.h **** 
  37:Inc/pid_controller.h **** typedef struct
  38:Inc/pid_controller.h **** {
  39:Inc/pid_controller.h ****     //
  40:Inc/pid_controller.h ****     // Input to the PID Controller
  41:Inc/pid_controller.h ****     //
  42:Inc/pid_controller.h ****     float input;
  43:Inc/pid_controller.h **** 
  44:Inc/pid_controller.h ****     //
  45:Inc/pid_controller.h ****     // Previous input to the PID Controller
  46:Inc/pid_controller.h ****     //
  47:Inc/pid_controller.h ****     float lastInput;
  48:Inc/pid_controller.h **** 
  49:Inc/pid_controller.h ****     //
  50:Inc/pid_controller.h ****     // Output of the PID Controller
  51:Inc/pid_controller.h ****     //
  52:Inc/pid_controller.h ****     float output;
  53:Inc/pid_controller.h **** 
  54:Inc/pid_controller.h ****     //
  55:Inc/pid_controller.h ****     // Gain constant values that were passed by the user
  56:Inc/pid_controller.h ****     // These are for display purposes
  57:Inc/pid_controller.h ****     //
  58:Inc/pid_controller.h ****     float dispKp;
  59:Inc/pid_controller.h ****     float dispKi;
  60:Inc/pid_controller.h ****     float dispKd;
  61:Inc/pid_controller.h **** 
  62:Inc/pid_controller.h ****     //
  63:Inc/pid_controller.h ****     // Gain constant values that the controller alters for
  64:Inc/pid_controller.h ****     // its own use
  65:Inc/pid_controller.h ****     //
  66:Inc/pid_controller.h ****     float alteredKp;
  67:Inc/pid_controller.h ****     float alteredKi;
  68:Inc/pid_controller.h ****     float alteredKd;
  69:Inc/pid_controller.h **** 
  70:Inc/pid_controller.h ****     //
  71:Inc/pid_controller.h ****     // The Integral Term
  72:Inc/pid_controller.h ****     //
  73:Inc/pid_controller.h ****     float iTerm;
  74:Inc/pid_controller.h **** 
  75:Inc/pid_controller.h ****     //
ARM GAS  /tmp/ccrJKlhm.s 			page 88


  76:Inc/pid_controller.h ****     // The interval (in seconds) on which the PID controller
  77:Inc/pid_controller.h ****     // will be called
  78:Inc/pid_controller.h ****     //
  79:Inc/pid_controller.h ****     float sampleTime;
  80:Inc/pid_controller.h **** 
  81:Inc/pid_controller.h ****     //
  82:Inc/pid_controller.h ****     // The values that the output will be constrained to
  83:Inc/pid_controller.h ****     //
  84:Inc/pid_controller.h ****     float outMin;
  85:Inc/pid_controller.h ****     float outMax;
  86:Inc/pid_controller.h **** 
  87:Inc/pid_controller.h ****     //
  88:Inc/pid_controller.h ****     // The user chosen operating point
  89:Inc/pid_controller.h ****     //
  90:Inc/pid_controller.h ****     float setpoint;
  91:Inc/pid_controller.h **** 
  92:Inc/pid_controller.h ****     //
  93:Inc/pid_controller.h ****     // The sense of direction of the controller
  94:Inc/pid_controller.h ****     // DIRECT:  A positive setpoint gives a positive output
  95:Inc/pid_controller.h ****     // REVERSE: A positive setpoint gives a negative output
  96:Inc/pid_controller.h ****     //
  97:Inc/pid_controller.h ****     PIDDirection controllerDirection;
  98:Inc/pid_controller.h **** 
  99:Inc/pid_controller.h ****     //
 100:Inc/pid_controller.h ****     // Tells how the controller should respond if the user has
 101:Inc/pid_controller.h ****     // taken over manual control or not
 102:Inc/pid_controller.h ****     // MANUAL:    PID controller is off.
 103:Inc/pid_controller.h ****     // AUTOMATIC: PID controller is on.
 104:Inc/pid_controller.h ****     //
 105:Inc/pid_controller.h ****     PIDMode mode;
 106:Inc/pid_controller.h **** } PIDControl;
 107:Inc/pid_controller.h **** 
 108:Inc/pid_controller.h **** //*********************************************************************************
 109:Inc/pid_controller.h **** // Prototypes
 110:Inc/pid_controller.h **** //*********************************************************************************
 111:Inc/pid_controller.h **** 
 112:Inc/pid_controller.h **** //
 113:Inc/pid_controller.h **** // PID Initialize
 114:Inc/pid_controller.h **** // Description:
 115:Inc/pid_controller.h **** //      Initializes a PIDControl instantiation. This should be called at least once
 116:Inc/pid_controller.h **** //      before any other PID functions are called.
 117:Inc/pid_controller.h **** // Parameters:
 118:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 119:Inc/pid_controller.h **** //      kp - Positive P gain constant value.
 120:Inc/pid_controller.h **** //      ki - Positive I gain constant value.
 121:Inc/pid_controller.h **** //      kd - Positive D gain constant value.
 122:Inc/pid_controller.h **** //      sampleTimeSeconds - Interval in seconds on which PIDCompute will be called.
 123:Inc/pid_controller.h **** //      minOutput - Constrain PID output to this minimum value.
 124:Inc/pid_controller.h **** //      maxOutput - Constrain PID output to this maximum value.
 125:Inc/pid_controller.h **** //      mode - Tells how the controller should respond if the user has taken over
 126:Inc/pid_controller.h **** //             manual control or not.
 127:Inc/pid_controller.h **** //             MANUAL:    PID controller is off. User can manually control the
 128:Inc/pid_controller.h **** //                        output.
 129:Inc/pid_controller.h **** //             AUTOMATIC: PID controller is on. PID controller controls the output.
 130:Inc/pid_controller.h **** //      controllerDirection - The sense of direction of the controller
 131:Inc/pid_controller.h **** //                            DIRECT:  A positive setpoint gives a positive output.
 132:Inc/pid_controller.h **** //                            REVERSE: A positive setpoint gives a negative output.
ARM GAS  /tmp/ccrJKlhm.s 			page 89


 133:Inc/pid_controller.h **** // Returns:
 134:Inc/pid_controller.h **** //      Nothing.
 135:Inc/pid_controller.h **** //
 136:Inc/pid_controller.h **** extern void PIDInit(PIDControl *pid, float kp, float ki, float kd,
 137:Inc/pid_controller.h ****                     float sampleTimeSeconds, float minOutput, float maxOutput,
 138:Inc/pid_controller.h ****                     PIDMode mode, PIDDirection controllerDirection);
 139:Inc/pid_controller.h **** 
 140:Inc/pid_controller.h **** //
 141:Inc/pid_controller.h **** // PID Compute
 142:Inc/pid_controller.h **** // Description:
 143:Inc/pid_controller.h **** //      Should be called on a regular interval defined by sampleTimeSeconds.
 144:Inc/pid_controller.h **** //      Typically, PIDSetpointSet and PIDInputSet should be called immediately
 145:Inc/pid_controller.h **** //      before PIDCompute.
 146:Inc/pid_controller.h **** // Parameters:
 147:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 148:Inc/pid_controller.h **** // Returns:
 149:Inc/pid_controller.h **** //      True if in AUTOMATIC. False if in MANUAL.
 150:Inc/pid_controller.h **** //
 151:Inc/pid_controller.h **** extern bool PIDCompute(PIDControl *pid);
 152:Inc/pid_controller.h **** 
 153:Inc/pid_controller.h **** //
 154:Inc/pid_controller.h **** // PID Mode Set
 155:Inc/pid_controller.h **** // Description:
 156:Inc/pid_controller.h **** //      Sets the PID controller to a new mode.
 157:Inc/pid_controller.h **** // Parameters:
 158:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 159:Inc/pid_controller.h **** //      mode - Tells how the controller should respond if the user has taken over
 160:Inc/pid_controller.h **** //             manual control or not.
 161:Inc/pid_controller.h **** //             MANUAL:    PID controller is off. User can manually control the
 162:Inc/pid_controller.h **** //                        output.
 163:Inc/pid_controller.h **** //             AUTOMATIC: PID controller is on. PID controller controls the output.
 164:Inc/pid_controller.h **** // Returns:
 165:Inc/pid_controller.h **** //      Nothing.
 166:Inc/pid_controller.h **** //
 167:Inc/pid_controller.h **** extern void PIDModeSet(PIDControl *pid, PIDMode mode);
 168:Inc/pid_controller.h **** 
 169:Inc/pid_controller.h **** //
 170:Inc/pid_controller.h **** // PID Output Limits Set
 171:Inc/pid_controller.h **** // Description:
 172:Inc/pid_controller.h **** //      Sets the new output limits. The new limits are applied to the PID
 173:Inc/pid_controller.h **** //      immediately.
 174:Inc/pid_controller.h **** // Parameters:
 175:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 176:Inc/pid_controller.h **** //      min - Constrain PID output to this minimum value.
 177:Inc/pid_controller.h **** //      max - Constrain PID output to this maximum value.
 178:Inc/pid_controller.h **** // Returns:
 179:Inc/pid_controller.h **** //      Nothing.
 180:Inc/pid_controller.h **** //
 181:Inc/pid_controller.h **** extern void PIDOutputLimitsSet(PIDControl *pid, float min, float max);
 182:Inc/pid_controller.h **** 
 183:Inc/pid_controller.h **** //
 184:Inc/pid_controller.h **** // PID Tunings Set
 185:Inc/pid_controller.h **** // Description:
 186:Inc/pid_controller.h **** //      Sets the new gain constant values.
 187:Inc/pid_controller.h **** // Parameters:
 188:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 189:Inc/pid_controller.h **** //      kp - Positive P gain constant value.
ARM GAS  /tmp/ccrJKlhm.s 			page 90


 190:Inc/pid_controller.h **** //      ki - Positive I gain constant value.
 191:Inc/pid_controller.h **** //      kd - Positive D gain constant value.
 192:Inc/pid_controller.h **** // Returns:
 193:Inc/pid_controller.h **** //      Nothing.
 194:Inc/pid_controller.h **** //
 195:Inc/pid_controller.h **** extern void PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd);
 196:Inc/pid_controller.h **** 
 197:Inc/pid_controller.h **** //
 198:Inc/pid_controller.h **** // PID Tuning Gain Constant P Set
 199:Inc/pid_controller.h **** // Description:
 200:Inc/pid_controller.h **** //      Sets the proportional gain constant value.
 201:Inc/pid_controller.h **** // Parameters:
 202:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 203:Inc/pid_controller.h **** //      kp - Positive P gain constant value.
 204:Inc/pid_controller.h **** // Returns:
 205:Inc/pid_controller.h **** //      Nothing.
 206:Inc/pid_controller.h **** //
 207:Inc/pid_controller.h **** extern void PIDTuningKpSet(PIDControl *pid, float kp);
 208:Inc/pid_controller.h **** 
 209:Inc/pid_controller.h **** //
 210:Inc/pid_controller.h **** // PID Tuning Gain Constant I Set
 211:Inc/pid_controller.h **** // Description:
 212:Inc/pid_controller.h **** //      Sets the proportional gain constant value.
 213:Inc/pid_controller.h **** // Parameters:
 214:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 215:Inc/pid_controller.h **** //      ki - Positive I gain constant value.
 216:Inc/pid_controller.h **** // Returns:
 217:Inc/pid_controller.h **** //      Nothing.
 218:Inc/pid_controller.h **** //
 219:Inc/pid_controller.h **** extern void PIDTuningKiSet(PIDControl *pid, float ki);
 220:Inc/pid_controller.h **** 
 221:Inc/pid_controller.h **** //
 222:Inc/pid_controller.h **** // PID Tuning Gain Constant D Set
 223:Inc/pid_controller.h **** // Description:
 224:Inc/pid_controller.h **** //      Sets the proportional gain constant value.
 225:Inc/pid_controller.h **** // Parameters:
 226:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 227:Inc/pid_controller.h **** //      kd - Positive D gain constant value.
 228:Inc/pid_controller.h **** // Returns:
 229:Inc/pid_controller.h **** //      Nothing.
 230:Inc/pid_controller.h **** //
 231:Inc/pid_controller.h **** extern void PIDTuningKdSet(PIDControl *pid, float kd);
 232:Inc/pid_controller.h **** 
 233:Inc/pid_controller.h **** //
 234:Inc/pid_controller.h **** // PID Controller Direction Set
 235:Inc/pid_controller.h **** // Description:
 236:Inc/pid_controller.h **** //      Sets the new controller direction.
 237:Inc/pid_controller.h **** // Parameters:
 238:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 239:Inc/pid_controller.h **** //      controllerDirection - The sense of direction of the controller
 240:Inc/pid_controller.h **** //                            DIRECT:  A positive setpoint gives a positive output
 241:Inc/pid_controller.h **** //                            REVERSE: A positive setpoint gives a negative output
 242:Inc/pid_controller.h **** // Returns:
 243:Inc/pid_controller.h **** //      Nothing.
 244:Inc/pid_controller.h **** //
 245:Inc/pid_controller.h **** extern void PIDControllerDirectionSet(PIDControl *pid,
 246:Inc/pid_controller.h ****                                       PIDDirection controllerDirection);
ARM GAS  /tmp/ccrJKlhm.s 			page 91


 247:Inc/pid_controller.h **** 
 248:Inc/pid_controller.h **** //
 249:Inc/pid_controller.h **** // PID Sample Time Set
 250:Inc/pid_controller.h **** // Description:
 251:Inc/pid_controller.h **** //      Sets the new sampling time (in seconds).
 252:Inc/pid_controller.h **** // Parameters:
 253:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 254:Inc/pid_controller.h **** //      sampleTimeSeconds - Interval in seconds on which PIDCompute will be called.
 255:Inc/pid_controller.h **** // Returns:
 256:Inc/pid_controller.h **** //      Nothing.
 257:Inc/pid_controller.h **** //
 258:Inc/pid_controller.h **** extern void PIDSampleTimeSet(PIDControl *pid, float sampleTimeSeconds);
 259:Inc/pid_controller.h **** 
 260:Inc/pid_controller.h **** //
 261:Inc/pid_controller.h **** // Basic Set and Get Functions for PID Parameters
 262:Inc/pid_controller.h **** //
 263:Inc/pid_controller.h **** 
 264:Inc/pid_controller.h **** //
 265:Inc/pid_controller.h **** // PID Setpoint Set
 266:Inc/pid_controller.h **** // Description:
 267:Inc/pid_controller.h **** //      Alters the setpoint the PID controller will try to achieve.
 268:Inc/pid_controller.h **** // Parameters:
 269:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 270:Inc/pid_controller.h **** //      setpoint - The desired setpoint the PID controller will try to obtain.
 271:Inc/pid_controller.h **** // Returns:
 272:Inc/pid_controller.h **** //      Nothing.
 273:Inc/pid_controller.h **** //
 274:Inc/pid_controller.h **** inline void
 275:Inc/pid_controller.h **** PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 276:Inc/pid_controller.h **** 
 277:Inc/pid_controller.h **** //
 278:Inc/pid_controller.h **** // PID Input Set
 279:Inc/pid_controller.h **** // Description:
 280:Inc/pid_controller.h **** //      Should be called before calling PIDCompute so the PID controller will
 281:Inc/pid_controller.h **** //      have an updated input value to work with.
 282:Inc/pid_controller.h **** // Parameters:
 283:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 284:Inc/pid_controller.h **** //      input - The value the controller will work with.
 285:Inc/pid_controller.h **** // Returns:
 286:Inc/pid_controller.h **** //      Nothing.
 287:Inc/pid_controller.h **** //
 288:Inc/pid_controller.h **** inline void
 289:Inc/pid_controller.h **** PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 290:Inc/pid_controller.h **** 
 291:Inc/pid_controller.h **** //
 292:Inc/pid_controller.h **** // PID Output Get
 293:Inc/pid_controller.h **** // Description:
 294:Inc/pid_controller.h **** //      Typically, this function is called after PIDCompute in order to
 295:Inc/pid_controller.h **** //      retrieve the output of the controller.
 296:Inc/pid_controller.h **** // Parameters:
 297:Inc/pid_controller.h **** //      pid - The address of a PIDControl instantiation.
 298:Inc/pid_controller.h **** // Returns:
 299:Inc/pid_controller.h **** //      The output of the specific PID controller.
 300:Inc/pid_controller.h **** //
 301:Inc/pid_controller.h **** inline float
 302:Inc/pid_controller.h **** PIDOutputGet(PIDControl *pid) { return pid->output; }
 2944              		.loc 2 302 1 view .LVU864
ARM GAS  /tmp/ccrJKlhm.s 			page 92


 2945              	.LBB21:
 2946              		.loc 2 302 33 view .LVU865
 2947              		.loc 2 302 43 is_stmt 0 view .LVU866
 2948 047e 594B     		ldr	r3, .L131+40
 2949 0480 93ED027A 		vldr.32	s14, [r3, #8]
 2950              	.LVL159:
 2951              		.loc 2 302 43 view .LVU867
 2952              	.LBE21:
 2953              	.LBE20:
 2954              	.LBB22:
 2955              	.LBI22:
 2956              		.loc 2 302 1 is_stmt 1 view .LVU868
 2957              	.LBB23:
 2958              		.loc 2 302 33 view .LVU869
 2959              		.loc 2 302 43 is_stmt 0 view .LVU870
 2960 0484 584B     		ldr	r3, .L131+44
 2961 0486 D3ED026A 		vldr.32	s13, [r3, #8]
 2962              	.LVL160:
 2963              		.loc 2 302 43 view .LVU871
 2964              	.LBE23:
 2965              	.LBE22:
 2966              	.LBB24:
 2967              	.LBI24:
 2968              		.loc 2 302 1 is_stmt 1 view .LVU872
 2969              	.LBB25:
 2970              		.loc 2 302 33 view .LVU873
 2971              		.loc 2 302 43 is_stmt 0 view .LVU874
 2972 048a 584B     		ldr	r3, .L131+48
 2973 048c D3ED027A 		vldr.32	s15, [r3, #8]
 2974              	.LVL161:
 2975              		.loc 2 302 43 view .LVU875
 2976              	.LBE25:
 2977              	.LBE24:
 348:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 2978              		.loc 1 348 9 view .LVU876
 2979 0490 FDEEE77A 		vcvt.s32.f32	s15, s15
 2980 0494 CDED007A 		vstr.32	s15, [sp]	@ int
 2981 0498 FDEEE67A 		vcvt.s32.f32	s15, s13
 2982 049c 17EE903A 		vmov	r3, s15	@ int
 2983 04a0 FDEEC77A 		vcvt.s32.f32	s15, s14
 2984 04a4 17EE902A 		vmov	r2, s15	@ int
 2985 04a8 5149     		ldr	r1, .L131+52
 2986 04aa 2846     		mov	r0, r5
 2987 04ac FFF7FEFF 		bl	sprintf
 2988              	.LVL162:
 349:Src/main.c    ****         sprintf(txt, "Voltages %d %d %d %d %d %d\r\n", ltc.voltage[0], ltc.voltage[1], ltc.voltage[
 2989              		.loc 1 349 9 is_stmt 1 view .LVU877
 349:Src/main.c    ****         sprintf(txt, "Voltages %d %d %d %d %d %d\r\n", ltc.voltage[0], ltc.voltage[1], ltc.voltage[
 2990              		.loc 1 349 52 is_stmt 0 view .LVU878
 2991 04b0 2846     		mov	r0, r5
 2992 04b2 FFF7FEFF 		bl	strlen
 2993              	.LVL163:
 349:Src/main.c    ****         sprintf(txt, "Voltages %d %d %d %d %d %d\r\n", ltc.voltage[0], ltc.voltage[1], ltc.voltage[
 2994              		.loc 1 349 9 view .LVU879
 2995 04b6 0A23     		movs	r3, #10
 2996 04b8 82B2     		uxth	r2, r0
 2997 04ba 2946     		mov	r1, r5
ARM GAS  /tmp/ccrJKlhm.s 			page 93


 2998 04bc 3046     		mov	r0, r6
 2999 04be FFF7FEFF 		bl	HAL_UART_Transmit
 3000              	.LVL164:
 350:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3001              		.loc 1 350 9 is_stmt 1 view .LVU880
 350:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3002              		.loc 1 350 67 is_stmt 0 view .LVU881
 3003 04c2 4C4A     		ldr	r2, .L131+56
 350:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3004              		.loc 1 350 99 view .LVU882
 3005 04c4 5389     		ldrh	r3, [r2, #10]
 350:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3006              		.loc 1 350 115 view .LVU883
 3007 04c6 9189     		ldrh	r1, [r2, #12]
 350:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3008              		.loc 1 350 131 view .LVU884
 3009 04c8 D089     		ldrh	r0, [r2, #14]
 350:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3010              		.loc 1 350 147 view .LVU885
 3011 04ca B2F810C0 		ldrh	ip, [r2, #16]
 350:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3012              		.loc 1 350 9 view .LVU886
 3013 04ce CDF80CC0 		str	ip, [sp, #12]
 3014 04d2 0290     		str	r0, [sp, #8]
 3015 04d4 0191     		str	r1, [sp, #4]
 3016 04d6 0093     		str	r3, [sp]
 3017 04d8 1389     		ldrh	r3, [r2, #8]
 3018 04da D288     		ldrh	r2, [r2, #6]
 3019 04dc 4649     		ldr	r1, .L131+60
 3020 04de 2846     		mov	r0, r5
 3021 04e0 FFF7FEFF 		bl	sprintf
 3022              	.LVL165:
 351:Src/main.c    ****         sprintf(txt, "Current from sensor: %lu\r\n", get_current());
 3023              		.loc 1 351 9 is_stmt 1 view .LVU887
 351:Src/main.c    ****         sprintf(txt, "Current from sensor: %lu\r\n", get_current());
 3024              		.loc 1 351 52 is_stmt 0 view .LVU888
 3025 04e4 2846     		mov	r0, r5
 3026 04e6 FFF7FEFF 		bl	strlen
 3027              	.LVL166:
 351:Src/main.c    ****         sprintf(txt, "Current from sensor: %lu\r\n", get_current());
 3028              		.loc 1 351 9 view .LVU889
 3029 04ea 0A23     		movs	r3, #10
 3030 04ec 82B2     		uxth	r2, r0
 3031 04ee 2946     		mov	r1, r5
 3032 04f0 3046     		mov	r0, r6
 3033 04f2 FFF7FEFF 		bl	HAL_UART_Transmit
 3034              	.LVL167:
 352:Src/main.c    ****         HAL_UART_Transmit(&huart4, (uint8_t *)txt, strlen(txt), 10);
 3035              		.loc 1 352 9 is_stmt 1 view .LVU890
 3036 04f6 FFF7FEFF 		bl	get_current
 3037              	.LVL168:
 3038 04fa 0246     		mov	r2, r0
 3039 04fc 3F49     		ldr	r1, .L131+64
 3040 04fe 2846     		mov	r0, r5
 3041 0500 FFF7FEFF 		bl	sprintf
 3042              	.LVL169:
 353:Src/main.c    ****       }
ARM GAS  /tmp/ccrJKlhm.s 			page 94


 3043              		.loc 1 353 9 view .LVU891
 353:Src/main.c    ****       }
 3044              		.loc 1 353 52 is_stmt 0 view .LVU892
 3045 0504 2846     		mov	r0, r5
 3046 0506 FFF7FEFF 		bl	strlen
 3047              	.LVL170:
 353:Src/main.c    ****       }
 3048              		.loc 1 353 9 view .LVU893
 3049 050a 0A23     		movs	r3, #10
 3050 050c 82B2     		uxth	r2, r0
 3051 050e 2946     		mov	r1, r5
 3052 0510 3046     		mov	r0, r6
 3053 0512 FFF7FEFF 		bl	HAL_UART_Transmit
 3054              	.LVL171:
 355:Src/main.c    ****     }
 3055              		.loc 1 355 7 is_stmt 1 view .LVU894
 355:Src/main.c    ****     }
 3056              		.loc 1 355 18 is_stmt 0 view .LVU895
 3057 0516 3A4B     		ldr	r3, .L131+68
 3058 0518 0022     		movs	r2, #0
 3059 051a 1A60     		str	r2, [r3]
 3060 051c 2DE0     		b	.L117
 3061              	.L128:
 3062              	.LBB26:
 360:Src/main.c    ****       previous_millis = currentTick;
 3063              		.loc 1 360 7 is_stmt 1 view .LVU896
 360:Src/main.c    ****       previous_millis = currentTick;
 3064              		.loc 1 360 18 is_stmt 0 view .LVU897
 3065 051e 2046     		mov	r0, r4
 3066 0520 FFF7FEFF 		bl	send_CAN_data
 3067              	.LVL172:
 361:Src/main.c    ****       if (sent != 0 && DEBUG_CAN_SEND)
 3068              		.loc 1 361 7 is_stmt 1 view .LVU898
 362:Src/main.c    ****       {
 3069              		.loc 1 362 7 view .LVU899
 361:Src/main.c    ****       if (sent != 0 && DEBUG_CAN_SEND)
 3070              		.loc 1 361 23 is_stmt 0 view .LVU900
 3071 0524 2746     		mov	r7, r4
 3072              	.LVL173:
 3073              	.L118:
 361:Src/main.c    ****       if (sent != 0 && DEBUG_CAN_SEND)
 3074              		.loc 1 361 23 view .LVU901
 3075              	.LBE26:
 369:Src/main.c    ****     {
 3076              		.loc 1 369 5 is_stmt 1 view .LVU902
 369:Src/main.c    ****     {
 3077              		.loc 1 369 9 is_stmt 0 view .LVU903
 3078 0526 2D4B     		ldr	r3, .L131+32
 3079 0528 1B68     		ldr	r3, [r3]
 369:Src/main.c    ****     {
 3080              		.loc 1 369 8 view .LVU904
 3081 052a 4BB3     		cbz	r3, .L119
 371:Src/main.c    ****       led_state = ON;
 3082              		.loc 1 371 7 is_stmt 1 view .LVU905
 3083 052c 0122     		movs	r2, #1
 3084 052e 2021     		movs	r1, #32
 3085 0530 3448     		ldr	r0, .L131+72
ARM GAS  /tmp/ccrJKlhm.s 			page 95


 3086 0532 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3087              	.LVL174:
 372:Src/main.c    ****     }
 3088              		.loc 1 372 7 view .LVU906
 372:Src/main.c    ****     }
 3089              		.loc 1 372 17 is_stmt 0 view .LVU907
 3090 0536 344B     		ldr	r3, .L131+76
 3091 0538 0022     		movs	r2, #0
 3092 053a 1A70     		strb	r2, [r3]
 3093              	.L120:
 391:Src/main.c    **** 
 3094              		.loc 1 391 5 is_stmt 1 view .LVU908
 3095 053c 324B     		ldr	r3, .L131+76
 3096 053e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3097 0540 FFF7FEFF 		bl	write_error_led
 3098              	.LVL175:
 393:Src/main.c    **** 
 3099              		.loc 1 393 5 view .LVU909
 3100 0544 FFF7FEFF 		bl	BMS_ON_OFF
 3101              	.LVL176:
 301:Src/main.c    ****   {
 3102              		.loc 1 301 9 view .LVU910
 3103              	.L123:
 301:Src/main.c    ****   {
 3104              		.loc 1 301 3 view .LVU911
 303:Src/main.c    **** 
 3105              		.loc 1 303 5 view .LVU912
 303:Src/main.c    **** 
 3106              		.loc 1 303 19 is_stmt 0 view .LVU913
 3107 0548 FFF7FEFF 		bl	HAL_GetTick
 3108              	.LVL177:
 3109 054c 0446     		mov	r4, r0
 3110              	.LVL178:
 305:Src/main.c    ****     {
 3111              		.loc 1 305 5 is_stmt 1 view .LVU914
 305:Src/main.c    ****     {
 3112              		.loc 1 305 28 is_stmt 0 view .LVU915
 3113 054e 2F4B     		ldr	r3, .L131+80
 3114 0550 1B68     		ldr	r3, [r3]
 305:Src/main.c    ****     {
 3115              		.loc 1 305 8 view .LVU916
 3116 0552 012B     		cmp	r3, #1
 3117 0554 3FF4D2AE 		beq	.L125
 3118              	.LVL179:
 3119              	.L115:
 333:Src/main.c    ****     {
 3120              		.loc 1 333 5 is_stmt 1 view .LVU917
 333:Src/main.c    ****     {
 3121              		.loc 1 333 21 is_stmt 0 view .LVU918
 3122 0558 2D4A     		ldr	r2, .L131+84
 3123 055a 82FB0432 		smull	r3, r2, r2, r4
 3124 055e E317     		asrs	r3, r4, #31
 3125 0560 C3EBA213 		rsb	r3, r3, r2, asr #6
 3126 0564 C822     		movs	r2, #200
 3127 0566 02FB1343 		mls	r3, r2, r3, r4
 333:Src/main.c    ****     {
 3128              		.loc 1 333 8 view .LVU919
ARM GAS  /tmp/ccrJKlhm.s 			page 96


 3129 056a 002B     		cmp	r3, #0
 3130 056c 3FF452AF 		beq	.L126
 3131              	.L116:
 340:Src/main.c    ****     {
 3132              		.loc 1 340 5 is_stmt 1 view .LVU920
 340:Src/main.c    ****     {
 3133              		.loc 1 340 9 is_stmt 0 view .LVU921
 3134 0570 234B     		ldr	r3, .L131+68
 3135 0572 1B68     		ldr	r3, [r3]
 340:Src/main.c    ****     {
 3136              		.loc 1 340 8 view .LVU922
 3137 0574 002B     		cmp	r3, #0
 3138 0576 7FF457AF 		bne	.L127
 3139              	.L117:
 358:Src/main.c    ****     {
 3140              		.loc 1 358 5 is_stmt 1 view .LVU923
 358:Src/main.c    ****     {
 3141              		.loc 1 358 8 is_stmt 0 view .LVU924
 3142 057a A742     		cmp	r7, r4
 3143 057c D3D0     		beq	.L118
 3144 057e CEE7     		b	.L128
 3145              	.L119:
 376:Src/main.c    ****       if (UNDER_VOLTAGE)
 3146              		.loc 1 376 7 is_stmt 1 view .LVU925
 3147 0580 0022     		movs	r2, #0
 3148 0582 2021     		movs	r1, #32
 3149 0584 1F48     		ldr	r0, .L131+72
 3150 0586 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3151              	.LVL180:
 377:Src/main.c    ****       {
 3152              		.loc 1 377 7 view .LVU926
 377:Src/main.c    ****       {
 3153              		.loc 1 377 11 is_stmt 0 view .LVU927
 3154 058a 124B     		ldr	r3, .L131+24
 3155 058c 1B68     		ldr	r3, [r3]
 377:Src/main.c    ****       {
 3156              		.loc 1 377 10 view .LVU928
 3157 058e 53B1     		cbz	r3, .L121
 379:Src/main.c    ****         if (OVER_TEMPERATURE)
 3158              		.loc 1 379 9 is_stmt 1 view .LVU929
 379:Src/main.c    ****         if (OVER_TEMPERATURE)
 3159              		.loc 1 379 19 is_stmt 0 view .LVU930
 3160 0590 1D4B     		ldr	r3, .L131+76
 3161 0592 0322     		movs	r2, #3
 3162 0594 1A70     		strb	r2, [r3]
 380:Src/main.c    ****           led_state = BLINK_error;
 3163              		.loc 1 380 9 is_stmt 1 view .LVU931
 380:Src/main.c    ****           led_state = BLINK_error;
 3164              		.loc 1 380 13 is_stmt 0 view .LVU932
 3165 0596 104B     		ldr	r3, .L131+28
 3166 0598 1B68     		ldr	r3, [r3]
 380:Src/main.c    ****           led_state = BLINK_error;
 3167              		.loc 1 380 12 view .LVU933
 3168 059a 002B     		cmp	r3, #0
 3169 059c CED0     		beq	.L120
 381:Src/main.c    ****       }
 3170              		.loc 1 381 11 is_stmt 1 view .LVU934
ARM GAS  /tmp/ccrJKlhm.s 			page 97


 381:Src/main.c    ****       }
 3171              		.loc 1 381 21 is_stmt 0 view .LVU935
 3172 059e 1A4B     		ldr	r3, .L131+76
 3173 05a0 0222     		movs	r2, #2
 3174 05a2 1A70     		strb	r2, [r3]
 3175 05a4 CAE7     		b	.L120
 3176              	.L121:
 385:Src/main.c    ****           led_state = BLINK_overT;
 3177              		.loc 1 385 9 is_stmt 1 view .LVU936
 385:Src/main.c    ****           led_state = BLINK_overT;
 3178              		.loc 1 385 13 is_stmt 0 view .LVU937
 3179 05a6 0C4B     		ldr	r3, .L131+28
 3180 05a8 1B68     		ldr	r3, [r3]
 385:Src/main.c    ****           led_state = BLINK_overT;
 3181              		.loc 1 385 12 view .LVU938
 3182 05aa 1BB1     		cbz	r3, .L122
 386:Src/main.c    ****         else
 3183              		.loc 1 386 11 is_stmt 1 view .LVU939
 386:Src/main.c    ****         else
 3184              		.loc 1 386 21 is_stmt 0 view .LVU940
 3185 05ac 164B     		ldr	r3, .L131+76
 3186 05ae 0422     		movs	r2, #4
 3187 05b0 1A70     		strb	r2, [r3]
 3188 05b2 C3E7     		b	.L120
 3189              	.L122:
 388:Src/main.c    ****       }
 3190              		.loc 1 388 11 is_stmt 1 view .LVU941
 388:Src/main.c    ****       }
 3191              		.loc 1 388 21 is_stmt 0 view .LVU942
 3192 05b4 144B     		ldr	r3, .L131+76
 3193 05b6 0122     		movs	r2, #1
 3194 05b8 1A70     		strb	r2, [r3]
 3195 05ba BFE7     		b	.L120
 3196              	.L132:
 3197              		.align	2
 3198              	.L131:
 3199 05bc 00000000 		.word	lv_pwm
 3200 05c0 00000000 		.word	hv_pwm
 3201 05c4 00000000 		.word	pump_pwm
 3202 05c8 00000000 		.word	txt
 3203 05cc 00000000 		.word	.LC0
 3204 05d0 00000000 		.word	huart4
 3205 05d4 00000000 		.word	.LANCHOR2
 3206 05d8 00000000 		.word	.LANCHOR3
 3207 05dc 00000000 		.word	.LANCHOR5
 3208 05e0 78000000 		.word	.LC7
 3209 05e4 00000000 		.word	lv_pid
 3210 05e8 00000000 		.word	hv_pid
 3211 05ec 00000000 		.word	pump_pid
 3212 05f0 A0000000 		.word	.LC8
 3213 05f4 00000000 		.word	ltc
 3214 05f8 C8000000 		.word	.LC9
 3215 05fc E8000000 		.word	.LC10
 3216 0600 00000000 		.word	.LANCHOR6
 3217 0604 00080240 		.word	1073874944
 3218 0608 00000000 		.word	led_state
 3219 060c 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccrJKlhm.s 			page 98


 3220 0610 1F85EB51 		.word	1374389535
 3221              		.cfi_endproc
 3222              	.LFE153:
 3224              		.section	.text.CAN_Read_Message,"ax",%progbits
 3225              		.align	1
 3226              		.global	CAN_Read_Message
 3227              		.syntax unified
 3228              		.thumb
 3229              		.thumb_func
 3230              		.fpu fpv5-d16
 3232              	CAN_Read_Message:
 3233              	.LFB175:
1214:Src/main.c    **** 
1215:Src/main.c    **** int CAN_Read_Message()
1216:Src/main.c    **** {
 3234              		.loc 1 1216 1 is_stmt 1 view -0
 3235              		.cfi_startproc
 3236              		@ args = 0, pretend = 0, frame = 0
 3237              		@ frame_needed = 0, uses_anonymous_args = 0
 3238 0000 08B5     		push	{r3, lr}
 3239              	.LCFI38:
 3240              		.cfi_def_cfa_offset 8
 3241              		.cfi_offset 3, -8
 3242              		.cfi_offset 14, -4
1217:Src/main.c    ****   if (fifoRxDataCAN_pop(&can1))
 3243              		.loc 1 1217 3 view .LVU944
 3244              		.loc 1 1217 7 is_stmt 0 view .LVU945
 3245 0002 0348     		ldr	r0, .L137
 3246 0004 FFF7FEFF 		bl	fifoRxDataCAN_pop
 3247              	.LVL181:
 3248              		.loc 1 1217 6 view .LVU946
 3249 0008 00B9     		cbnz	r0, .L136
 3250              	.L133:
1218:Src/main.c    ****   {
1219:Src/main.c    ****     switch (can1.rx_id)
1220:Src/main.c    ****     {
1221:Src/main.c    ****     case INV_LEFT_ASK_ID:
1222:Src/main.c    ****       if (can1.dataRx[0] == 0x4A)
1223:Src/main.c    ****       { // Inverter left temperature
1224:Src/main.c    ****         // invLeftTemp = can->dataRx[1] + (can->dataRx[2] << 8);
1225:Src/main.c    ****         // inverterLeftTemp = (invLeftTemp - 15797) / 112.12;
1226:Src/main.c    ****       }
1227:Src/main.c    ****       else if (can1.dataRx[0] == 0x49)
1228:Src/main.c    ****       { // Motor left temperature
1229:Src/main.c    ****         // motLeftTemp = can->dataRx[1] + (can->dataRx[2] << 8);
1230:Src/main.c    ****         // motorLeftTemp = (motLeftTemp - 9394) / 55.10;
1231:Src/main.c    ****       }
1232:Src/main.c    ****       break;
1233:Src/main.c    ****     case INV_RIGHT_ASK_ID:
1234:Src/main.c    ****       if (can1.dataRx[0] == 0x4A)
1235:Src/main.c    ****       { // Inverter right temperature
1236:Src/main.c    ****         // invRightTemp = can->dataRx[1] + (can->dataRx[2] << 8);
1237:Src/main.c    ****         // inverterRightTemp = (invLeftTemp - 15797) / 112.12;
1238:Src/main.c    ****       }
1239:Src/main.c    ****       else if (can1.dataRx[0] == 0x49)
1240:Src/main.c    ****       { // Motor right temperature
1241:Src/main.c    ****         // motRightTemp = can->dataRx[1] + (can->dataRx[2] << 8);
ARM GAS  /tmp/ccrJKlhm.s 			page 99


1242:Src/main.c    ****         // motorRightTemp = (motLeftTemp - 9394) / 55.10;
1243:Src/main.c    ****       }
1244:Src/main.c    ****       break;
1245:Src/main.c    ****     case STEER_ASK_ID:
1246:Src/main.c    ****       if (can1.dataRx[0] == 0)
1247:Src/main.c    ****       {
1248:Src/main.c    ****         // overridePID = RxData[1]; // 1 - override PID
1249:Src/main.c    ****       }
1250:Src/main.c    ****       else if (can1.dataRx[0] == 1)
1251:Src/main.c    ****       {
1252:Src/main.c    ****         // overridePID = RxData[1];
1253:Src/main.c    ****         // pumpRequest = RxData[2];
1254:Src/main.c    ****       }
1255:Src/main.c    ****       else if (can1.dataRx[0] == 2)
1256:Src/main.c    ****       {
1257:Src/main.c    ****         // overridePID = RxData[1];
1258:Src/main.c    ****         // fanRequest = RxData[2];
1259:Src/main.c    ****       }
1260:Src/main.c    ****       else if (can1.dataRx[0] == 3 && can1.dataRx[1] == 1)
1261:Src/main.c    ****       {
1262:Src/main.c    ****         // overridePID = 2;
1263:Src/main.c    ****       }
1264:Src/main.c    ****       break;
1265:Src/main.c    ****     case ACC_TEMP_ASK_ID:
1266:Src/main.c    ****       if (can1.dataRx[0] == 6)
1267:Src/main.c    ****       { // Little endian
1268:Src/main.c    ****         // tmpHvAvgTemp = can->dataRx[5] + (can->dataRx[4] << 8);
1269:Src/main.c    ****         // hvAvgTemp = tmpHvAvgTemp / 100.0;
1270:Src/main.c    ****       }
1271:Src/main.c    ****       else if (can1.dataRx[0] == 6)
1272:Src/main.c    ****       {
1273:Src/main.c    ****         // tmpHvMaxTemp = can->dataRx[7] + (can->dataRx[6] << 8);
1274:Src/main.c    ****         // hvMaxTemp = tmpHvMaxTemp / 100.0;
1275:Src/main.c    ****       }
1276:Src/main.c    ****       break;
1277:Src/main.c    ****     case ECU_ASK_ID:
1278:Src/main.c    ****       break;
1279:Src/main.c    ****     case BMS_LV_ASK_ID:
1280:Src/main.c    ****       break;
1281:Src/main.c    **** 
1282:Src/main.c    ****     default:
1283:Src/main.c    ****       break;
1284:Src/main.c    ****     }
1285:Src/main.c    ****     return 0;
1286:Src/main.c    ****   }
1287:Src/main.c    **** }
 3251              		.loc 1 1287 1 view .LVU947
 3252 000a 08BD     		pop	{r3, pc}
 3253              	.L136:
1219:Src/main.c    ****     {
 3254              		.loc 1 1219 5 is_stmt 1 view .LVU948
1285:Src/main.c    ****   }
 3255              		.loc 1 1285 5 view .LVU949
1285:Src/main.c    ****   }
 3256              		.loc 1 1285 12 is_stmt 0 view .LVU950
 3257 000c 0020     		movs	r0, #0
 3258 000e FCE7     		b	.L133
ARM GAS  /tmp/ccrJKlhm.s 			page 100


 3259              	.L138:
 3260              		.align	2
 3261              	.L137:
 3262 0010 00000000 		.word	can1
 3263              		.cfi_endproc
 3264              	.LFE175:
 3266              		.section	.text.print_uart,"ax",%progbits
 3267              		.align	1
 3268              		.global	print_uart
 3269              		.syntax unified
 3270              		.thumb
 3271              		.thumb_func
 3272              		.fpu fpv5-d16
 3274              	print_uart:
 3275              	.LVL182:
 3276              	.LFB176:
1288:Src/main.c    **** 
1289:Src/main.c    **** void print_uart(char *txt)
1290:Src/main.c    **** {
 3277              		.loc 1 1290 1 is_stmt 1 view -0
 3278              		.cfi_startproc
 3279              		@ args = 0, pretend = 0, frame = 0
 3280              		@ frame_needed = 0, uses_anonymous_args = 0
 3281              		@ link register save eliminated.
1291:Src/main.c    **** }
 3282              		.loc 1 1291 1 view .LVU952
 3283 0000 7047     		bx	lr
 3284              		.cfi_endproc
 3285              	.LFE176:
 3287              		.section	.text.Error_Handler,"ax",%progbits
 3288              		.align	1
 3289              		.global	Error_Handler
 3290              		.syntax unified
 3291              		.thumb
 3292              		.thumb_func
 3293              		.fpu fpv5-d16
 3295              	Error_Handler:
 3296              	.LFB177:
1292:Src/main.c    **** 
1293:Src/main.c    **** /* USER CODE END 4 */
1294:Src/main.c    **** 
1295:Src/main.c    **** /**
1296:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1297:Src/main.c    ****   * @retval None
1298:Src/main.c    ****   */
1299:Src/main.c    **** void Error_Handler(void)
1300:Src/main.c    **** {
 3297              		.loc 1 1300 1 view -0
 3298              		.cfi_startproc
 3299              		@ args = 0, pretend = 0, frame = 0
 3300              		@ frame_needed = 0, uses_anonymous_args = 0
 3301              		@ link register save eliminated.
1301:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
1302:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
1303:Src/main.c    **** 
1304:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
1305:Src/main.c    **** }
ARM GAS  /tmp/ccrJKlhm.s 			page 101


 3302              		.loc 1 1305 1 view .LVU954
 3303 0000 7047     		bx	lr
 3304              		.cfi_endproc
 3305              	.LFE177:
 3307              		.global	m_sec_timer
 3308              		.global	debug_flag
 3309              		.global	sensor_update_flag
 3310              		.comm	under_volt_start_msec,4,4
 3311              		.comm	over_temp_start_msec,4,4
 3312              		.comm	cont_hours,1,1
 3313              		.comm	cont_min,1,1
 3314              		.comm	cont_sec,1,1
 3315              		.comm	cont_dec,1,1
 3316              		.comm	cont_ms,1,1
 3317              		.global	UserAdcConfig
 3318              		.comm	txt,100,4
 3319              		.comm	led_state,1,1
 3320              		.comm	ltc,44,4
 3321              		.comm	pump_temp,16,4
 3322              		.comm	hv_temp,16,4
 3323              		.comm	lv_temp,16,4
 3324              		.comm	pump_pid,60,4
 3325              		.comm	hv_pid,60,4
 3326              		.comm	lv_pid,60,4
 3327              		.comm	pump_pwm,16,4
 3328              		.comm	hv_pwm,16,4
 3329              		.comm	lv_pwm,16,4
 3330              		.global	prev_toggle_msec
 3331              		.global	ERR_LED_BLINK_underV_OFF_MSEC
 3332              		.global	ERR_LED_BLINK_underV_ON_MSEC
 3333              		.global	ERR_LED_BLINK_overT_OFF_MSEC
 3334              		.global	ERR_LED_BLINK_overT_ON_MSEC
 3335              		.global	ERR_LED_BLINK_error_MSEC
 3336              		.global	DEBUG_LTC
 3337              		.global	DEBUG_SENSOR_CURRENT
 3338              		.global	DEBUG_VALUES
 3339              		.global	DEBUG_CAN_SEND
 3340              		.comm	huart4,128,4
 3341              		.comm	htim8,64,4
 3342              		.comm	htim5,64,4
 3343              		.comm	htim4,64,4
 3344              		.comm	htim3,64,4
 3345              		.comm	htim2,64,4
 3346              		.comm	hspi2,100,4
 3347              		.comm	hsd2,132,4
 3348              		.comm	hcan3,40,4
 3349              		.comm	hcan1,40,4
 3350              		.comm	hdma_adc1,96,4
 3351              		.comm	hadc1,72,4
 3352              		.global	OVER_TEMPERATURE
 3353              		.global	UNDER_VOLTAGE
 3354              		.global	BMS_IS_ON
 3355              		.global	BMS_ON_REQUEST
 3356              		.section	.bss.BMS_IS_ON,"aw",%nobits
 3357              		.align	2
 3358              		.set	.LANCHOR5,. + 0
 3361              	BMS_IS_ON:
ARM GAS  /tmp/ccrJKlhm.s 			page 102


 3362 0000 00000000 		.space	4
 3363              		.section	.bss.OVER_TEMPERATURE,"aw",%nobits
 3364              		.align	2
 3365              		.set	.LANCHOR3,. + 0
 3368              	OVER_TEMPERATURE:
 3369 0000 00000000 		.space	4
 3370              		.section	.bss.UNDER_VOLTAGE,"aw",%nobits
 3371              		.align	2
 3372              		.set	.LANCHOR2,. + 0
 3375              	UNDER_VOLTAGE:
 3376 0000 00000000 		.space	4
 3377              		.section	.bss.UserAdcConfig,"aw",%nobits
 3378              		.align	2
 3379              		.set	.LANCHOR0,. + 0
 3382              	UserAdcConfig:
 3383 0000 00000000 		.space	16
 3383      00000000 
 3383      00000000 
 3383      00000000 
 3384              		.section	.bss.debug_flag,"aw",%nobits
 3385              		.align	2
 3386              		.set	.LANCHOR6,. + 0
 3389              	debug_flag:
 3390 0000 00000000 		.space	4
 3391              		.section	.bss.m_sec_timer,"aw",%nobits
 3392              		.align	2
 3393              		.set	.LANCHOR8,. + 0
 3396              	m_sec_timer:
 3397 0000 00000000 		.space	4
 3398              		.section	.bss.prev_toggle_msec,"aw",%nobits
 3399              		.align	2
 3400              		.set	.LANCHOR1,. + 0
 3403              	prev_toggle_msec:
 3404 0000 00000000 		.space	4
 3405              		.section	.bss.sensor_update_flag,"aw",%nobits
 3406              		.align	2
 3407              		.set	.LANCHOR7,. + 0
 3410              	sensor_update_flag:
 3411 0000 00000000 		.space	4
 3412              		.section	.data.BMS_ON_REQUEST,"aw"
 3413              		.align	2
 3414              		.set	.LANCHOR4,. + 0
 3417              	BMS_ON_REQUEST:
 3418 0000 01000000 		.word	1
 3419              		.section	.rodata.DEBUG_CAN_SEND,"a"
 3422              	DEBUG_CAN_SEND:
 3423 0000 00       		.space	1
 3424              		.section	.rodata.DEBUG_LTC,"a"
 3427              	DEBUG_LTC:
 3428 0000 00       		.space	1
 3429              		.section	.rodata.DEBUG_SENSOR_CURRENT,"a"
 3432              	DEBUG_SENSOR_CURRENT:
 3433 0000 00       		.space	1
 3434              		.section	.rodata.DEBUG_VALUES,"a"
 3437              	DEBUG_VALUES:
 3438 0000 01       		.byte	1
 3439              		.section	.rodata.ERR_LED_BLINK_error_MSEC,"a"
ARM GAS  /tmp/ccrJKlhm.s 			page 103


 3440              		.align	2
 3443              	ERR_LED_BLINK_error_MSEC:
 3444 0000 64000000 		.word	100
 3445              		.section	.rodata.ERR_LED_BLINK_overT_OFF_MSEC,"a"
 3446              		.align	2
 3449              	ERR_LED_BLINK_overT_OFF_MSEC:
 3450 0000 C8000000 		.word	200
 3451              		.section	.rodata.ERR_LED_BLINK_overT_ON_MSEC,"a"
 3452              		.align	2
 3455              	ERR_LED_BLINK_overT_ON_MSEC:
 3456 0000 20030000 		.word	800
 3457              		.section	.rodata.ERR_LED_BLINK_underV_OFF_MSEC,"a"
 3458              		.align	2
 3461              	ERR_LED_BLINK_underV_OFF_MSEC:
 3462 0000 84030000 		.word	900
 3463              		.section	.rodata.ERR_LED_BLINK_underV_ON_MSEC,"a"
 3464              		.align	2
 3467              	ERR_LED_BLINK_underV_ON_MSEC:
 3468 0000 64000000 		.word	100
 3469              		.text
 3470              	.Letext0:
 3471              		.file 3 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f765xx.h"
 3472              		.file 4 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/machine/_default_types.h"
 3473              		.file 5 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/sys/_stdint.h"
 3474              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 3475              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 3476              		.file 8 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 3477              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 3478              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 3479              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 3480              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 3481              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 3482              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc.h"
 3483              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 3484              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 3485              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 3486              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 3487              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 3488              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 3489              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 3490              		.file 22 "Inc/main.h"
 3491              		.file 23 "Middlewares/Third_Party/FatFs/src/integer.h"
 3492              		.file 24 "/home/alex/Mass Storage/ARM-GCC/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h"
 3493              		.file 25 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/sys/_types.h"
 3494              		.file 26 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/sys/reent.h"
 3495              		.file 27 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/sys/lock.h"
 3496              		.file 28 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/stdlib.h"
 3497              		.file 29 "Middlewares/Third_Party/FatFs/src/ff.h"
 3498              		.file 30 "Middlewares/Third_Party/FatFs/src/diskio.h"
 3499              		.file 31 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 3500              		.file 32 "Inc/sd_diskio.h"
 3501              		.file 33 "Inc/fatfs.h"
 3502              		.file 34 "Inc/ltc.h"
 3503              		.file 35 "Inc/can.h"
 3504              		.file 36 "Inc/pwm.h"
 3505              		.file 37 "Inc/current_sensor.h"
 3506              		.file 38 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
ARM GAS  /tmp/ccrJKlhm.s 			page 104


 3507              		.file 39 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 3508              		.file 40 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
 3509              		.file 41 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/string.h"
 3510              		.file 42 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/stdio.h"
 3511              		.file 43 "<built-in>"
ARM GAS  /tmp/ccrJKlhm.s 			page 105


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccrJKlhm.s:17     .text.MX_SDMMC2_SD_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:24     .text.MX_SDMMC2_SD_Init:0000000000000000 MX_SDMMC2_SD_Init
     /tmp/ccrJKlhm.s:61     .text.MX_SDMMC2_SD_Init:0000000000000018 $d
                            *COM*:0000000000000084 hsd2
     /tmp/ccrJKlhm.s:67     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:73     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccrJKlhm.s:249    .text.MX_GPIO_Init:00000000000000c4 $d
     /tmp/ccrJKlhm.s:256    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:262    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccrJKlhm.s:310    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccrJKlhm.s:315    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:321    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccrJKlhm.s:415    .text.MX_ADC1_Init:0000000000000050 $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccrJKlhm.s:422    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:428    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccrJKlhm.s:490    .text.MX_CAN1_Init:0000000000000030 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccrJKlhm.s:496    .text.MX_CAN3_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:502    .text.MX_CAN3_Init:0000000000000000 MX_CAN3_Init
     /tmp/ccrJKlhm.s:564    .text.MX_CAN3_Init:0000000000000030 $d
                            *COM*:0000000000000028 hcan3
     /tmp/ccrJKlhm.s:570    .text.MX_SPI2_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:576    .text.MX_SPI2_Init:0000000000000000 MX_SPI2_Init
     /tmp/ccrJKlhm.s:647    .text.MX_SPI2_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi2
     /tmp/ccrJKlhm.s:653    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:659    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccrJKlhm.s:780    .text.MX_TIM2_Init:000000000000007c $d
                            *COM*:0000000000000040 htim2
     /tmp/ccrJKlhm.s:785    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:791    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccrJKlhm.s:898    .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccrJKlhm.s:904    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:910    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccrJKlhm.s:1031   .text.MX_TIM4_Init:0000000000000078 $d
                            *COM*:0000000000000040 htim4
     /tmp/ccrJKlhm.s:1037   .text.MX_TIM8_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:1043   .text.MX_TIM8_Init:0000000000000000 MX_TIM8_Init
     /tmp/ccrJKlhm.s:1206   .text.MX_TIM8_Init:0000000000000094 $d
                            *COM*:0000000000000040 htim8
     /tmp/ccrJKlhm.s:1212   .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:1218   .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccrJKlhm.s:1273   .text.MX_UART4_Init:0000000000000028 $d
                            *COM*:0000000000000080 huart4
     /tmp/ccrJKlhm.s:1279   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccrJKlhm.s:1285   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccrJKlhm.s:1370   .text.MX_TIM5_Init:0000000000000050 $d
                            *COM*:0000000000000040 htim5
     /tmp/ccrJKlhm.s:1376   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccrJKlhm.s:1383   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccrJKlhm.s:1543   .text.SystemClock_Config:00000000000000a8 $d
     /tmp/ccrJKlhm.s:1550   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccrJKlhm.s:1557   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
ARM GAS  /tmp/ccrJKlhm.s 			page 106


     /tmp/ccrJKlhm.s:1619   .text.HAL_ADC_ConvCpltCallback:000000000000002c $d
     /tmp/ccrJKlhm.s:1626   .text.write_error_led:0000000000000000 $t
     /tmp/ccrJKlhm.s:1633   .text.write_error_led:0000000000000000 write_error_led
     /tmp/ccrJKlhm.s:1651   .text.write_error_led:000000000000000e $d
     /tmp/ccrJKlhm.s:1831   .text.write_error_led:00000000000000f0 $d
                            *COM*:0000000000000001 led_state
     /tmp/ccrJKlhm.s:1838   .text.check_under_voltage:0000000000000000 $t
     /tmp/ccrJKlhm.s:1845   .text.check_under_voltage:0000000000000000 check_under_voltage
     /tmp/ccrJKlhm.s:1883   .text.check_under_voltage:000000000000001c $d
                            *COM*:000000000000002c ltc
     /tmp/ccrJKlhm.s:1889   .text.check_over_temperature:0000000000000000 $t
     /tmp/ccrJKlhm.s:1896   .text.check_over_temperature:0000000000000000 check_over_temperature
     /tmp/ccrJKlhm.s:1929   .text.check_over_temperature:000000000000001c $d
                            *COM*:0000000000000010 lv_temp
     /tmp/ccrJKlhm.s:1935   .text.BMS_ON_OFF:0000000000000000 $t
     /tmp/ccrJKlhm.s:1942   .text.BMS_ON_OFF:0000000000000000 BMS_ON_OFF
     /tmp/ccrJKlhm.s:1995   .text.BMS_ON_OFF:0000000000000030 $d
     /tmp/ccrJKlhm.s:2003   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccrJKlhm.s:2010   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccrJKlhm.s:2120   .text.HAL_TIM_PeriodElapsedCallback:0000000000000078 $d
                            *COM*:0000000000000001 cont_ms
                            *COM*:0000000000000001 cont_dec
                            *COM*:0000000000000001 cont_sec
                            *COM*:0000000000000001 cont_min
                            *COM*:0000000000000001 cont_hours
     /tmp/ccrJKlhm.s:2133   .text.send_CAN_data:0000000000000000 $t
     /tmp/ccrJKlhm.s:2140   .text.send_CAN_data:0000000000000000 send_CAN_data
     /tmp/ccrJKlhm.s:2206   .text.send_CAN_data:0000000000000034 $d
     /tmp/ccrJKlhm.s:2213   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccrJKlhm.s:2249   .text.main:0000000000000000 $t
     /tmp/ccrJKlhm.s:2256   .text.main:0000000000000000 main
     /tmp/ccrJKlhm.s:2836   .text.main:0000000000000380 $d
                            *COM*:0000000000000064 txt
                            *COM*:0000000000000010 hv_pwm
                            *COM*:0000000000000010 lv_pwm
                            *COM*:0000000000000010 pump_pwm
                            *COM*:0000000000000010 hv_temp
                            *COM*:0000000000000010 pump_temp
                            *COM*:000000000000003c hv_pid
                            *COM*:000000000000003c pump_pid
                            *COM*:000000000000003c lv_pid
     /tmp/ccrJKlhm.s:2875   .text.main:0000000000000414 $t
     /tmp/ccrJKlhm.s:3199   .text.main:00000000000005bc $d
     /tmp/ccrJKlhm.s:3225   .text.CAN_Read_Message:0000000000000000 $t
     /tmp/ccrJKlhm.s:3232   .text.CAN_Read_Message:0000000000000000 CAN_Read_Message
     /tmp/ccrJKlhm.s:3262   .text.CAN_Read_Message:0000000000000010 $d
     /tmp/ccrJKlhm.s:3267   .text.print_uart:0000000000000000 $t
     /tmp/ccrJKlhm.s:3274   .text.print_uart:0000000000000000 print_uart
     /tmp/ccrJKlhm.s:3288   .text.Error_Handler:0000000000000000 $t
     /tmp/ccrJKlhm.s:3295   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccrJKlhm.s:3396   .bss.m_sec_timer:0000000000000000 m_sec_timer
     /tmp/ccrJKlhm.s:3389   .bss.debug_flag:0000000000000000 debug_flag
     /tmp/ccrJKlhm.s:3410   .bss.sensor_update_flag:0000000000000000 sensor_update_flag
                            *COM*:0000000000000004 under_volt_start_msec
                            *COM*:0000000000000004 over_temp_start_msec
     /tmp/ccrJKlhm.s:3382   .bss.UserAdcConfig:0000000000000000 UserAdcConfig
     /tmp/ccrJKlhm.s:3403   .bss.prev_toggle_msec:0000000000000000 prev_toggle_msec
ARM GAS  /tmp/ccrJKlhm.s 			page 107


     /tmp/ccrJKlhm.s:3461   .rodata.ERR_LED_BLINK_underV_OFF_MSEC:0000000000000000 ERR_LED_BLINK_underV_OFF_MSEC
     /tmp/ccrJKlhm.s:3467   .rodata.ERR_LED_BLINK_underV_ON_MSEC:0000000000000000 ERR_LED_BLINK_underV_ON_MSEC
     /tmp/ccrJKlhm.s:3449   .rodata.ERR_LED_BLINK_overT_OFF_MSEC:0000000000000000 ERR_LED_BLINK_overT_OFF_MSEC
     /tmp/ccrJKlhm.s:3455   .rodata.ERR_LED_BLINK_overT_ON_MSEC:0000000000000000 ERR_LED_BLINK_overT_ON_MSEC
     /tmp/ccrJKlhm.s:3443   .rodata.ERR_LED_BLINK_error_MSEC:0000000000000000 ERR_LED_BLINK_error_MSEC
     /tmp/ccrJKlhm.s:3427   .rodata.DEBUG_LTC:0000000000000000 DEBUG_LTC
     /tmp/ccrJKlhm.s:3432   .rodata.DEBUG_SENSOR_CURRENT:0000000000000000 DEBUG_SENSOR_CURRENT
     /tmp/ccrJKlhm.s:3437   .rodata.DEBUG_VALUES:0000000000000000 DEBUG_VALUES
     /tmp/ccrJKlhm.s:3422   .rodata.DEBUG_CAN_SEND:0000000000000000 DEBUG_CAN_SEND
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccrJKlhm.s:3368   .bss.OVER_TEMPERATURE:0000000000000000 OVER_TEMPERATURE
     /tmp/ccrJKlhm.s:3375   .bss.UNDER_VOLTAGE:0000000000000000 UNDER_VOLTAGE
     /tmp/ccrJKlhm.s:3361   .bss.BMS_IS_ON:0000000000000000 BMS_IS_ON
     /tmp/ccrJKlhm.s:3417   .data.BMS_ON_REQUEST:0000000000000000 BMS_ON_REQUEST
     /tmp/ccrJKlhm.s:3357   .bss.BMS_IS_ON:0000000000000000 $d
     /tmp/ccrJKlhm.s:3364   .bss.OVER_TEMPERATURE:0000000000000000 $d
     /tmp/ccrJKlhm.s:3371   .bss.UNDER_VOLTAGE:0000000000000000 $d
     /tmp/ccrJKlhm.s:3378   .bss.UserAdcConfig:0000000000000000 $d
     /tmp/ccrJKlhm.s:3385   .bss.debug_flag:0000000000000000 $d
     /tmp/ccrJKlhm.s:3392   .bss.m_sec_timer:0000000000000000 $d
     /tmp/ccrJKlhm.s:3399   .bss.prev_toggle_msec:0000000000000000 $d
     /tmp/ccrJKlhm.s:3406   .bss.sensor_update_flag:0000000000000000 $d
     /tmp/ccrJKlhm.s:3413   .data.BMS_ON_REQUEST:0000000000000000 $d
     /tmp/ccrJKlhm.s:3423   .rodata.DEBUG_CAN_SEND:0000000000000000 $d
     /tmp/ccrJKlhm.s:3428   .rodata.DEBUG_LTC:0000000000000000 $d
     /tmp/ccrJKlhm.s:3433   .rodata.DEBUG_SENSOR_CURRENT:0000000000000000 $d
     /tmp/ccrJKlhm.s:3440   .rodata.ERR_LED_BLINK_error_MSEC:0000000000000000 $d
     /tmp/ccrJKlhm.s:3446   .rodata.ERR_LED_BLINK_overT_OFF_MSEC:0000000000000000 $d
     /tmp/ccrJKlhm.s:3452   .rodata.ERR_LED_BLINK_overT_ON_MSEC:0000000000000000 $d
     /tmp/ccrJKlhm.s:3458   .rodata.ERR_LED_BLINK_underV_OFF_MSEC:0000000000000000 $d
     /tmp/ccrJKlhm.s:3464   .rodata.ERR_LED_BLINK_underV_ON_MSEC:0000000000000000 $d
     /tmp/ccrJKlhm.s:1656   .text.write_error_led:0000000000000013 $d
     /tmp/ccrJKlhm.s:1656   .text.write_error_led:0000000000000014 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_SPI_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIMEx_ConfigBreakDeadTime
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start_IT
ARM GAS  /tmp/ccrJKlhm.s 			page 108


HAL_ADC_GetValue
calc_current
push_into_array
mean_current
HAL_GetTick
HAL_GPIO_TogglePin
HAL_GPIO_ReadPin
get_min_voltage
CAN_Send
can1
HAL_Init
MX_FATFS_Init
strlen
HAL_UART_Transmit
HAL_Delay
can_init
LTC_init
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Start
Init_pwm
PIDInit
read_voltages
PIDCompute
write_pwm_value
sprintf
get_current
fifoRxDataCAN_pop
