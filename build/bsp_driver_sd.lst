ARM GAS  /tmp/ccHQKr2Y.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"bsp_driver_sd.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.BSP_SD_ITConfig,"ax",%progbits
  17              		.align	1
  18              		.weak	BSP_SD_ITConfig
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	BSP_SD_ITConfig:
  26              	.LFB142:
  27              		.file 1 "Src/bsp_driver_sd.c"
   1:Src/bsp_driver_sd.c **** /* USER CODE BEGIN Header */
   2:Src/bsp_driver_sd.c **** /**
   3:Src/bsp_driver_sd.c ****  ******************************************************************************
   4:Src/bsp_driver_sd.c ****  * @file    bsp_driver_sd.c for F7 (based on stm32756g_eval_sd.c)
   5:Src/bsp_driver_sd.c ****  * @brief   This file includes a generic uSD card driver.
   6:Src/bsp_driver_sd.c ****  *          To be completed by the user according to the board used for the project.
   7:Src/bsp_driver_sd.c ****  * @note    Functions generated as weak: they can be overriden by
   8:Src/bsp_driver_sd.c ****  *          - code in user files
   9:Src/bsp_driver_sd.c ****  *          - or BSP code from the FW pack files
  10:Src/bsp_driver_sd.c ****  *          if such files are added to the generated project (by the user).
  11:Src/bsp_driver_sd.c ****  ******************************************************************************
  12:Src/bsp_driver_sd.c ****   * @attention
  13:Src/bsp_driver_sd.c ****   *
  14:Src/bsp_driver_sd.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  15:Src/bsp_driver_sd.c ****   * All rights reserved.</center></h2>
  16:Src/bsp_driver_sd.c ****   *
  17:Src/bsp_driver_sd.c ****   * This software component is licensed by ST under Ultimate Liberty license
  18:Src/bsp_driver_sd.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  19:Src/bsp_driver_sd.c ****   * the License. You may obtain a copy of the License at:
  20:Src/bsp_driver_sd.c ****   *                             www.st.com/SLA0044
  21:Src/bsp_driver_sd.c ****   *
  22:Src/bsp_driver_sd.c ****  ******************************************************************************
  23:Src/bsp_driver_sd.c ****  */
  24:Src/bsp_driver_sd.c **** /* USER CODE END Header */
  25:Src/bsp_driver_sd.c **** 
  26:Src/bsp_driver_sd.c **** #ifdef OLD_API
  27:Src/bsp_driver_sd.c **** /* kept to avoid issue when migrating old projects. */
  28:Src/bsp_driver_sd.c **** /* USER CODE BEGIN 0 */
  29:Src/bsp_driver_sd.c **** 
  30:Src/bsp_driver_sd.c **** /* USER CODE END 0 */
  31:Src/bsp_driver_sd.c **** #else
ARM GAS  /tmp/ccHQKr2Y.s 			page 2


  32:Src/bsp_driver_sd.c **** /* USER CODE BEGIN FirstSection */
  33:Src/bsp_driver_sd.c **** /* can be used to modify / undefine following code or add new definitions */
  34:Src/bsp_driver_sd.c **** /* USER CODE END FirstSection */
  35:Src/bsp_driver_sd.c **** /* Includes ------------------------------------------------------------------*/
  36:Src/bsp_driver_sd.c **** #include "bsp_driver_sd.h"
  37:Src/bsp_driver_sd.c **** 
  38:Src/bsp_driver_sd.c **** /* Extern variables ---------------------------------------------------------*/ 
  39:Src/bsp_driver_sd.c ****   
  40:Src/bsp_driver_sd.c **** extern SD_HandleTypeDef hsd2;
  41:Src/bsp_driver_sd.c **** 
  42:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeInitSection */
  43:Src/bsp_driver_sd.c **** /* can be used to modify / undefine following code or add code */
  44:Src/bsp_driver_sd.c **** /* USER CODE END BeforeInitSection */
  45:Src/bsp_driver_sd.c **** /**
  46:Src/bsp_driver_sd.c ****   * @brief  Initializes the SD card device.
  47:Src/bsp_driver_sd.c ****   * @retval SD status
  48:Src/bsp_driver_sd.c ****   */
  49:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_Init(void)
  50:Src/bsp_driver_sd.c **** {
  51:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
  52:Src/bsp_driver_sd.c ****   /* Check if the SD card is plugged in the slot */
  53:Src/bsp_driver_sd.c ****   if (BSP_SD_IsDetected() != SD_PRESENT)
  54:Src/bsp_driver_sd.c ****   {
  55:Src/bsp_driver_sd.c ****     return MSD_ERROR_SD_NOT_PRESENT;
  56:Src/bsp_driver_sd.c ****   }
  57:Src/bsp_driver_sd.c ****   /* HAL SD initialization */
  58:Src/bsp_driver_sd.c ****   sd_state = HAL_SD_Init(&hsd2);
  59:Src/bsp_driver_sd.c **** 
  60:Src/bsp_driver_sd.c ****   return sd_state;
  61:Src/bsp_driver_sd.c **** }
  62:Src/bsp_driver_sd.c **** /* USER CODE BEGIN AfterInitSection */
  63:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
  64:Src/bsp_driver_sd.c **** /* USER CODE END AfterInitSection */
  65:Src/bsp_driver_sd.c **** 
  66:Src/bsp_driver_sd.c **** /* USER CODE BEGIN InterruptMode */
  67:Src/bsp_driver_sd.c **** /**
  68:Src/bsp_driver_sd.c ****   * @brief  Configures Interrupt mode for SD detection pin.
  69:Src/bsp_driver_sd.c ****   * @retval Returns 0
  70:Src/bsp_driver_sd.c ****   */
  71:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_ITConfig(void)
  72:Src/bsp_driver_sd.c **** {  
  28              		.loc 1 72 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  73:Src/bsp_driver_sd.c ****   /* Code to be updated by the user or replaced by one from the FW pack (in a stmxxxx_sd.c file) */
  74:Src/bsp_driver_sd.c ****   
  75:Src/bsp_driver_sd.c ****   return (uint8_t)0;
  33              		.loc 1 75 3 view .LVU1
  76:Src/bsp_driver_sd.c **** }
  34              		.loc 1 76 1 is_stmt 0 view .LVU2
  35 0000 0020     		movs	r0, #0
  36 0002 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE142:
  40              		.section	.text.BSP_SD_ReadBlocks,"ax",%progbits
ARM GAS  /tmp/ccHQKr2Y.s 			page 3


  41              		.align	1
  42              		.weak	BSP_SD_ReadBlocks
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu fpv5-d16
  48              	BSP_SD_ReadBlocks:
  49              	.LVL0:
  50              	.LFB143:
  77:Src/bsp_driver_sd.c **** 
  78:Src/bsp_driver_sd.c **** /* USER CODE END InterruptMode */
  79:Src/bsp_driver_sd.c **** 
  80:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeReadBlocksSection */
  81:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
  82:Src/bsp_driver_sd.c **** /* USER CODE END BeforeReadBlocksSection */
  83:Src/bsp_driver_sd.c **** /**
  84:Src/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in polling mode.
  85:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
  86:Src/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read
  87:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
  88:Src/bsp_driver_sd.c ****   * @param  Timeout: Timeout for read operation
  89:Src/bsp_driver_sd.c ****   * @retval SD status
  90:Src/bsp_driver_sd.c ****   */
  91:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t
  92:Src/bsp_driver_sd.c **** {
  51              		.loc 1 92 1 is_stmt 1 view -0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		.loc 1 92 1 is_stmt 0 view .LVU4
  56 0000 00B5     		push	{lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 4
  59              		.cfi_offset 14, -4
  60 0002 83B0     		sub	sp, sp, #12
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 16
  93:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
  63              		.loc 1 93 3 is_stmt 1 view .LVU5
  64              	.LVL1:
  94:Src/bsp_driver_sd.c **** 
  95:Src/bsp_driver_sd.c ****   if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
  65              		.loc 1 95 3 view .LVU6
  66              		.loc 1 95 7 is_stmt 0 view .LVU7
  67 0004 0093     		str	r3, [sp]
  68 0006 1346     		mov	r3, r2
  69              	.LVL2:
  70              		.loc 1 95 7 view .LVU8
  71 0008 0A46     		mov	r2, r1
  72              	.LVL3:
  73              		.loc 1 95 7 view .LVU9
  74 000a 0146     		mov	r1, r0
  75              	.LVL4:
  76              		.loc 1 95 7 view .LVU10
  77 000c 0348     		ldr	r0, .L6
  78              	.LVL5:
  79              		.loc 1 95 7 view .LVU11
ARM GAS  /tmp/ccHQKr2Y.s 			page 4


  80 000e FFF7FEFF 		bl	HAL_SD_ReadBlocks
  81              	.LVL6:
  82              		.loc 1 95 6 view .LVU12
  83 0012 00B1     		cbz	r0, .L3
  96:Src/bsp_driver_sd.c ****   {
  97:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
  84              		.loc 1 97 14 view .LVU13
  85 0014 0120     		movs	r0, #1
  86              	.L3:
  87              	.LVL7:
  98:Src/bsp_driver_sd.c ****   }
  99:Src/bsp_driver_sd.c **** 
 100:Src/bsp_driver_sd.c ****   return sd_state;  
  88              		.loc 1 100 3 is_stmt 1 view .LVU14
 101:Src/bsp_driver_sd.c **** }
  89              		.loc 1 101 1 is_stmt 0 view .LVU15
  90 0016 03B0     		add	sp, sp, #12
  91              	.LCFI2:
  92              		.cfi_def_cfa_offset 4
  93              		@ sp needed
  94 0018 5DF804FB 		ldr	pc, [sp], #4
  95              	.L7:
  96              		.align	2
  97              	.L6:
  98 001c 00000000 		.word	hsd2
  99              		.cfi_endproc
 100              	.LFE143:
 102              		.section	.text.BSP_SD_WriteBlocks,"ax",%progbits
 103              		.align	1
 104              		.weak	BSP_SD_WriteBlocks
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv5-d16
 110              	BSP_SD_WriteBlocks:
 111              	.LVL8:
 112              	.LFB144:
 102:Src/bsp_driver_sd.c **** 
 103:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeWriteBlocksSection */
 104:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 105:Src/bsp_driver_sd.c **** /* USER CODE END BeforeWriteBlocksSection */
 106:Src/bsp_driver_sd.c **** /**
 107:Src/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in polling mode.
 108:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 109:Src/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 110:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 111:Src/bsp_driver_sd.c ****   * @param  Timeout: Timeout for write operation
 112:Src/bsp_driver_sd.c ****   * @retval SD status
 113:Src/bsp_driver_sd.c ****   */
 114:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32
 115:Src/bsp_driver_sd.c **** {
 113              		.loc 1 115 1 is_stmt 1 view -0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		.loc 1 115 1 is_stmt 0 view .LVU17
 118 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccHQKr2Y.s 			page 5


 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 14, -4
 122 0002 83B0     		sub	sp, sp, #12
 123              	.LCFI4:
 124              		.cfi_def_cfa_offset 16
 116:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 125              		.loc 1 116 3 is_stmt 1 view .LVU18
 126              	.LVL9:
 117:Src/bsp_driver_sd.c **** 
 118:Src/bsp_driver_sd.c ****   if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 127              		.loc 1 118 3 view .LVU19
 128              		.loc 1 118 7 is_stmt 0 view .LVU20
 129 0004 0093     		str	r3, [sp]
 130 0006 1346     		mov	r3, r2
 131              	.LVL10:
 132              		.loc 1 118 7 view .LVU21
 133 0008 0A46     		mov	r2, r1
 134              	.LVL11:
 135              		.loc 1 118 7 view .LVU22
 136 000a 0146     		mov	r1, r0
 137              	.LVL12:
 138              		.loc 1 118 7 view .LVU23
 139 000c 0348     		ldr	r0, .L12
 140              	.LVL13:
 141              		.loc 1 118 7 view .LVU24
 142 000e FFF7FEFF 		bl	HAL_SD_WriteBlocks
 143              	.LVL14:
 144              		.loc 1 118 6 view .LVU25
 145 0012 00B1     		cbz	r0, .L9
 119:Src/bsp_driver_sd.c ****   {
 120:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 146              		.loc 1 120 14 view .LVU26
 147 0014 0120     		movs	r0, #1
 148              	.L9:
 149              	.LVL15:
 121:Src/bsp_driver_sd.c ****   }
 122:Src/bsp_driver_sd.c **** 
 123:Src/bsp_driver_sd.c ****   return sd_state;  
 150              		.loc 1 123 3 is_stmt 1 view .LVU27
 124:Src/bsp_driver_sd.c **** }
 151              		.loc 1 124 1 is_stmt 0 view .LVU28
 152 0016 03B0     		add	sp, sp, #12
 153              	.LCFI5:
 154              		.cfi_def_cfa_offset 4
 155              		@ sp needed
 156 0018 5DF804FB 		ldr	pc, [sp], #4
 157              	.L13:
 158              		.align	2
 159              	.L12:
 160 001c 00000000 		.word	hsd2
 161              		.cfi_endproc
 162              	.LFE144:
 164              		.section	.text.BSP_SD_ReadBlocks_DMA,"ax",%progbits
 165              		.align	1
 166              		.weak	BSP_SD_ReadBlocks_DMA
 167              		.syntax unified
ARM GAS  /tmp/ccHQKr2Y.s 			page 6


 168              		.thumb
 169              		.thumb_func
 170              		.fpu fpv5-d16
 172              	BSP_SD_ReadBlocks_DMA:
 173              	.LVL16:
 174              	.LFB145:
 125:Src/bsp_driver_sd.c **** 
 126:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeReadDMABlocksSection */
 127:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 128:Src/bsp_driver_sd.c **** /* USER CODE END BeforeReadDMABlocksSection */
 129:Src/bsp_driver_sd.c **** /**
 130:Src/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in DMA mode.
 131:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 132:Src/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read
 133:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
 134:Src/bsp_driver_sd.c ****   * @retval SD status
 135:Src/bsp_driver_sd.c ****   */
 136:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
 137:Src/bsp_driver_sd.c **** {
 175              		.loc 1 137 1 is_stmt 1 view -0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		.loc 1 137 1 is_stmt 0 view .LVU30
 180 0000 08B5     		push	{r3, lr}
 181              	.LCFI6:
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 3, -8
 184              		.cfi_offset 14, -4
 185 0002 1346     		mov	r3, r2
 138:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 186              		.loc 1 138 3 is_stmt 1 view .LVU31
 187              	.LVL17:
 139:Src/bsp_driver_sd.c ****   
 140:Src/bsp_driver_sd.c ****   /* Read block(s) in DMA transfer mode */
 141:Src/bsp_driver_sd.c ****   if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 188              		.loc 1 141 3 view .LVU32
 189              		.loc 1 141 7 is_stmt 0 view .LVU33
 190 0004 0A46     		mov	r2, r1
 191              	.LVL18:
 192              		.loc 1 141 7 view .LVU34
 193 0006 0146     		mov	r1, r0
 194              	.LVL19:
 195              		.loc 1 141 7 view .LVU35
 196 0008 0248     		ldr	r0, .L18
 197              	.LVL20:
 198              		.loc 1 141 7 view .LVU36
 199 000a FFF7FEFF 		bl	HAL_SD_ReadBlocks_DMA
 200              	.LVL21:
 201              		.loc 1 141 6 view .LVU37
 202 000e 00B1     		cbz	r0, .L15
 142:Src/bsp_driver_sd.c ****   {
 143:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 203              		.loc 1 143 14 view .LVU38
 204 0010 0120     		movs	r0, #1
 205              	.L15:
 206              	.LVL22:
ARM GAS  /tmp/ccHQKr2Y.s 			page 7


 144:Src/bsp_driver_sd.c ****   }
 145:Src/bsp_driver_sd.c ****   
 146:Src/bsp_driver_sd.c ****   return sd_state; 
 207              		.loc 1 146 3 is_stmt 1 view .LVU39
 147:Src/bsp_driver_sd.c **** }
 208              		.loc 1 147 1 is_stmt 0 view .LVU40
 209 0012 08BD     		pop	{r3, pc}
 210              	.L19:
 211              		.align	2
 212              	.L18:
 213 0014 00000000 		.word	hsd2
 214              		.cfi_endproc
 215              	.LFE145:
 217              		.section	.text.BSP_SD_WriteBlocks_DMA,"ax",%progbits
 218              		.align	1
 219              		.weak	BSP_SD_WriteBlocks_DMA
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 223              		.fpu fpv5-d16
 225              	BSP_SD_WriteBlocks_DMA:
 226              	.LVL23:
 227              	.LFB146:
 148:Src/bsp_driver_sd.c **** 
 149:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeWriteDMABlocksSection */
 150:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 151:Src/bsp_driver_sd.c **** /* USER CODE END BeforeWriteDMABlocksSection */
 152:Src/bsp_driver_sd.c **** /**
 153:Src/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in DMA mode.
 154:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 155:Src/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 156:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write 
 157:Src/bsp_driver_sd.c ****   * @retval SD status
 158:Src/bsp_driver_sd.c ****   */
 159:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
 160:Src/bsp_driver_sd.c **** {
 228              		.loc 1 160 1 is_stmt 1 view -0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              		.loc 1 160 1 is_stmt 0 view .LVU42
 233 0000 08B5     		push	{r3, lr}
 234              	.LCFI7:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 3, -8
 237              		.cfi_offset 14, -4
 238 0002 1346     		mov	r3, r2
 161:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 239              		.loc 1 161 3 is_stmt 1 view .LVU43
 240              	.LVL24:
 162:Src/bsp_driver_sd.c ****   
 163:Src/bsp_driver_sd.c ****   /* Write block(s) in DMA transfer mode */
 164:Src/bsp_driver_sd.c ****   if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 241              		.loc 1 164 3 view .LVU44
 242              		.loc 1 164 7 is_stmt 0 view .LVU45
 243 0004 0A46     		mov	r2, r1
 244              	.LVL25:
ARM GAS  /tmp/ccHQKr2Y.s 			page 8


 245              		.loc 1 164 7 view .LVU46
 246 0006 0146     		mov	r1, r0
 247              	.LVL26:
 248              		.loc 1 164 7 view .LVU47
 249 0008 0248     		ldr	r0, .L24
 250              	.LVL27:
 251              		.loc 1 164 7 view .LVU48
 252 000a FFF7FEFF 		bl	HAL_SD_WriteBlocks_DMA
 253              	.LVL28:
 254              		.loc 1 164 6 view .LVU49
 255 000e 00B1     		cbz	r0, .L21
 165:Src/bsp_driver_sd.c ****   {
 166:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 256              		.loc 1 166 14 view .LVU50
 257 0010 0120     		movs	r0, #1
 258              	.L21:
 259              	.LVL29:
 167:Src/bsp_driver_sd.c ****   }
 168:Src/bsp_driver_sd.c ****   
 169:Src/bsp_driver_sd.c ****   return sd_state; 
 260              		.loc 1 169 3 is_stmt 1 view .LVU51
 170:Src/bsp_driver_sd.c **** }
 261              		.loc 1 170 1 is_stmt 0 view .LVU52
 262 0012 08BD     		pop	{r3, pc}
 263              	.L25:
 264              		.align	2
 265              	.L24:
 266 0014 00000000 		.word	hsd2
 267              		.cfi_endproc
 268              	.LFE146:
 270              		.section	.text.BSP_SD_Erase,"ax",%progbits
 271              		.align	1
 272              		.weak	BSP_SD_Erase
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu fpv5-d16
 278              	BSP_SD_Erase:
 279              	.LVL30:
 280              	.LFB147:
 171:Src/bsp_driver_sd.c **** 
 172:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeEraseSection */
 173:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 174:Src/bsp_driver_sd.c **** /* USER CODE END BeforeEraseSection */
 175:Src/bsp_driver_sd.c **** /**
 176:Src/bsp_driver_sd.c ****   * @brief  Erases the specified memory area of the given SD card. 
 177:Src/bsp_driver_sd.c ****   * @param  StartAddr: Start byte address
 178:Src/bsp_driver_sd.c ****   * @param  EndAddr: End byte address
 179:Src/bsp_driver_sd.c ****   * @retval SD status
 180:Src/bsp_driver_sd.c ****   */
 181:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
 182:Src/bsp_driver_sd.c **** {
 281              		.loc 1 182 1 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		.loc 1 182 1 is_stmt 0 view .LVU54
ARM GAS  /tmp/ccHQKr2Y.s 			page 9


 286 0000 08B5     		push	{r3, lr}
 287              	.LCFI8:
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 3, -8
 290              		.cfi_offset 14, -4
 291 0002 0A46     		mov	r2, r1
 183:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 292              		.loc 1 183 3 is_stmt 1 view .LVU55
 293              	.LVL31:
 184:Src/bsp_driver_sd.c **** 
 185:Src/bsp_driver_sd.c ****   if (HAL_SD_Erase(&hsd2, StartAddr, EndAddr) != HAL_OK)  
 294              		.loc 1 185 3 view .LVU56
 295              		.loc 1 185 7 is_stmt 0 view .LVU57
 296 0004 0146     		mov	r1, r0
 297              	.LVL32:
 298              		.loc 1 185 7 view .LVU58
 299 0006 0348     		ldr	r0, .L30
 300              	.LVL33:
 301              		.loc 1 185 7 view .LVU59
 302 0008 FFF7FEFF 		bl	HAL_SD_Erase
 303              	.LVL34:
 304              		.loc 1 185 6 view .LVU60
 305 000c 00B1     		cbz	r0, .L27
 186:Src/bsp_driver_sd.c ****   {
 187:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 306              		.loc 1 187 14 view .LVU61
 307 000e 0120     		movs	r0, #1
 308              	.L27:
 309              	.LVL35:
 188:Src/bsp_driver_sd.c ****   }
 189:Src/bsp_driver_sd.c **** 
 190:Src/bsp_driver_sd.c ****   return sd_state; 
 310              		.loc 1 190 3 is_stmt 1 view .LVU62
 191:Src/bsp_driver_sd.c **** }
 311              		.loc 1 191 1 is_stmt 0 view .LVU63
 312 0010 08BD     		pop	{r3, pc}
 313              	.L31:
 314 0012 00BF     		.align	2
 315              	.L30:
 316 0014 00000000 		.word	hsd2
 317              		.cfi_endproc
 318              	.LFE147:
 320              		.section	.text.BSP_SD_GetCardState,"ax",%progbits
 321              		.align	1
 322              		.weak	BSP_SD_GetCardState
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu fpv5-d16
 328              	BSP_SD_GetCardState:
 329              	.LFB148:
 192:Src/bsp_driver_sd.c **** 
 193:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeGetCardStateSection */
 194:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 195:Src/bsp_driver_sd.c **** /* USER CODE END BeforeGetCardStateSection */
 196:Src/bsp_driver_sd.c **** 
 197:Src/bsp_driver_sd.c **** /**
ARM GAS  /tmp/ccHQKr2Y.s 			page 10


 198:Src/bsp_driver_sd.c ****   * @brief  Gets the current SD card data status.
 199:Src/bsp_driver_sd.c ****   * @param  None
 200:Src/bsp_driver_sd.c ****   * @retval Data transfer state.
 201:Src/bsp_driver_sd.c ****   *          This value can be one of the following values:
 202:Src/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_OK: No data transfer is acting
 203:Src/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 204:Src/bsp_driver_sd.c ****   */
 205:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_GetCardState(void)
 206:Src/bsp_driver_sd.c **** {
 330              		.loc 1 206 1 is_stmt 1 view -0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334 0000 08B5     		push	{r3, lr}
 335              	.LCFI9:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 3, -8
 338              		.cfi_offset 14, -4
 207:Src/bsp_driver_sd.c ****   return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY
 339              		.loc 1 207 3 view .LVU65
 340              		.loc 1 207 12 is_stmt 0 view .LVU66
 341 0002 0348     		ldr	r0, .L34
 342 0004 FFF7FEFF 		bl	HAL_SD_GetCardState
 343              	.LVL36:
 208:Src/bsp_driver_sd.c **** }
 344              		.loc 1 208 1 view .LVU67
 345 0008 0438     		subs	r0, r0, #4
 346 000a 18BF     		it	ne
 347 000c 0120     		movne	r0, #1
 348 000e 08BD     		pop	{r3, pc}
 349              	.L35:
 350              		.align	2
 351              	.L34:
 352 0010 00000000 		.word	hsd2
 353              		.cfi_endproc
 354              	.LFE148:
 356              		.section	.text.BSP_SD_GetCardInfo,"ax",%progbits
 357              		.align	1
 358              		.weak	BSP_SD_GetCardInfo
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu fpv5-d16
 364              	BSP_SD_GetCardInfo:
 365              	.LVL37:
 366              	.LFB149:
 209:Src/bsp_driver_sd.c **** 
 210:Src/bsp_driver_sd.c **** /**
 211:Src/bsp_driver_sd.c ****   * @brief  Get SD information about specific SD card.
 212:Src/bsp_driver_sd.c ****   * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 213:Src/bsp_driver_sd.c ****   * @retval None 
 214:Src/bsp_driver_sd.c ****   */
 215:Src/bsp_driver_sd.c **** __weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
 216:Src/bsp_driver_sd.c **** {
 367              		.loc 1 216 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccHQKr2Y.s 			page 11


 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		.loc 1 216 1 is_stmt 0 view .LVU69
 372 0000 08B5     		push	{r3, lr}
 373              	.LCFI10:
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 3, -8
 376              		.cfi_offset 14, -4
 377 0002 0146     		mov	r1, r0
 217:Src/bsp_driver_sd.c ****   /* Get SD card Information */
 218:Src/bsp_driver_sd.c ****   HAL_SD_GetCardInfo(&hsd2, CardInfo);
 378              		.loc 1 218 3 is_stmt 1 view .LVU70
 379 0004 0148     		ldr	r0, .L38
 380              	.LVL38:
 381              		.loc 1 218 3 is_stmt 0 view .LVU71
 382 0006 FFF7FEFF 		bl	HAL_SD_GetCardInfo
 383              	.LVL39:
 219:Src/bsp_driver_sd.c **** }
 384              		.loc 1 219 1 view .LVU72
 385 000a 08BD     		pop	{r3, pc}
 386              	.L39:
 387              		.align	2
 388              	.L38:
 389 000c 00000000 		.word	hsd2
 390              		.cfi_endproc
 391              	.LFE149:
 393              		.section	.text.BSP_SD_AbortCallback,"ax",%progbits
 394              		.align	1
 395              		.weak	BSP_SD_AbortCallback
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv5-d16
 401              	BSP_SD_AbortCallback:
 402              	.LFB153:
 220:Src/bsp_driver_sd.c **** 
 221:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeCallBacksSection */
 222:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 223:Src/bsp_driver_sd.c **** /* USER CODE END BeforeCallBacksSection */
 224:Src/bsp_driver_sd.c **** /**
 225:Src/bsp_driver_sd.c ****   * @brief SD Abort callbacks
 226:Src/bsp_driver_sd.c ****   * @param hsd: SD handle
 227:Src/bsp_driver_sd.c ****   * @retval None
 228:Src/bsp_driver_sd.c ****   */
 229:Src/bsp_driver_sd.c **** void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
 230:Src/bsp_driver_sd.c **** {
 231:Src/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 232:Src/bsp_driver_sd.c **** }
 233:Src/bsp_driver_sd.c **** 
 234:Src/bsp_driver_sd.c **** /**
 235:Src/bsp_driver_sd.c ****   * @brief Tx Transfer completed callback
 236:Src/bsp_driver_sd.c ****   * @param hsd: SD handle
 237:Src/bsp_driver_sd.c ****   * @retval None
 238:Src/bsp_driver_sd.c ****   */
 239:Src/bsp_driver_sd.c **** void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
 240:Src/bsp_driver_sd.c **** {
 241:Src/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 242:Src/bsp_driver_sd.c **** }
ARM GAS  /tmp/ccHQKr2Y.s 			page 12


 243:Src/bsp_driver_sd.c **** 
 244:Src/bsp_driver_sd.c **** /**
 245:Src/bsp_driver_sd.c ****   * @brief Rx Transfer completed callback
 246:Src/bsp_driver_sd.c ****   * @param hsd: SD handle
 247:Src/bsp_driver_sd.c ****   * @retval None
 248:Src/bsp_driver_sd.c ****   */
 249:Src/bsp_driver_sd.c **** void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
 250:Src/bsp_driver_sd.c **** {
 251:Src/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 252:Src/bsp_driver_sd.c **** }
 253:Src/bsp_driver_sd.c **** 
 254:Src/bsp_driver_sd.c **** /* USER CODE BEGIN CallBacksSection_C */
 255:Src/bsp_driver_sd.c **** /**
 256:Src/bsp_driver_sd.c ****   * @brief BSP SD Abort callback
 257:Src/bsp_driver_sd.c ****   * @retval None
 258:Src/bsp_driver_sd.c ****   * @note empty (up to the user to fill it in or to remove it if useless)
 259:Src/bsp_driver_sd.c ****   */
 260:Src/bsp_driver_sd.c **** __weak void BSP_SD_AbortCallback(void)
 261:Src/bsp_driver_sd.c **** {
 403              		.loc 1 261 1 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 262:Src/bsp_driver_sd.c **** 
 263:Src/bsp_driver_sd.c **** }
 408              		.loc 1 263 1 view .LVU74
 409 0000 7047     		bx	lr
 410              		.cfi_endproc
 411              	.LFE153:
 413              		.section	.text.HAL_SD_AbortCallback,"ax",%progbits
 414              		.align	1
 415              		.global	HAL_SD_AbortCallback
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 419              		.fpu fpv5-d16
 421              	HAL_SD_AbortCallback:
 422              	.LVL40:
 423              	.LFB150:
 230:Src/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 424              		.loc 1 230 1 view -0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 230:Src/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 428              		.loc 1 230 1 is_stmt 0 view .LVU76
 429 0000 08B5     		push	{r3, lr}
 430              	.LCFI11:
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 3, -8
 433              		.cfi_offset 14, -4
 231:Src/bsp_driver_sd.c **** }
 434              		.loc 1 231 3 is_stmt 1 view .LVU77
 435 0002 FFF7FEFF 		bl	BSP_SD_AbortCallback
 436              	.LVL41:
 232:Src/bsp_driver_sd.c **** 
ARM GAS  /tmp/ccHQKr2Y.s 			page 13


 437              		.loc 1 232 1 is_stmt 0 view .LVU78
 438 0006 08BD     		pop	{r3, pc}
 439              		.cfi_endproc
 440              	.LFE150:
 442              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 443              		.align	1
 444              		.weak	BSP_SD_WriteCpltCallback
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu fpv5-d16
 450              	BSP_SD_WriteCpltCallback:
 451              	.LFB154:
 264:Src/bsp_driver_sd.c **** 
 265:Src/bsp_driver_sd.c **** /**
 266:Src/bsp_driver_sd.c ****   * @brief BSP Tx Transfer completed callback
 267:Src/bsp_driver_sd.c ****   * @retval None
 268:Src/bsp_driver_sd.c ****   * @note empty (up to the user to fill it in or to remove it if useless)
 269:Src/bsp_driver_sd.c ****   */
 270:Src/bsp_driver_sd.c **** __weak void BSP_SD_WriteCpltCallback(void)
 271:Src/bsp_driver_sd.c **** {
 452              		.loc 1 271 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 272:Src/bsp_driver_sd.c **** 
 273:Src/bsp_driver_sd.c **** }
 457              		.loc 1 273 1 view .LVU80
 458 0000 7047     		bx	lr
 459              		.cfi_endproc
 460              	.LFE154:
 462              		.section	.text.HAL_SD_TxCpltCallback,"ax",%progbits
 463              		.align	1
 464              		.global	HAL_SD_TxCpltCallback
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv5-d16
 470              	HAL_SD_TxCpltCallback:
 471              	.LVL42:
 472              	.LFB151:
 240:Src/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 473              		.loc 1 240 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 240:Src/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 477              		.loc 1 240 1 is_stmt 0 view .LVU82
 478 0000 08B5     		push	{r3, lr}
 479              	.LCFI12:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 3, -8
 482              		.cfi_offset 14, -4
 241:Src/bsp_driver_sd.c **** }
 483              		.loc 1 241 3 is_stmt 1 view .LVU83
 484 0002 FFF7FEFF 		bl	BSP_SD_WriteCpltCallback
ARM GAS  /tmp/ccHQKr2Y.s 			page 14


 485              	.LVL43:
 242:Src/bsp_driver_sd.c **** 
 486              		.loc 1 242 1 is_stmt 0 view .LVU84
 487 0006 08BD     		pop	{r3, pc}
 488              		.cfi_endproc
 489              	.LFE151:
 491              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 492              		.align	1
 493              		.weak	BSP_SD_ReadCpltCallback
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu fpv5-d16
 499              	BSP_SD_ReadCpltCallback:
 500              	.LFB155:
 274:Src/bsp_driver_sd.c **** 
 275:Src/bsp_driver_sd.c **** /**
 276:Src/bsp_driver_sd.c ****   * @brief BSP Rx Transfer completed callback
 277:Src/bsp_driver_sd.c ****   * @retval None
 278:Src/bsp_driver_sd.c ****   * @note empty (up to the user to fill it in or to remove it if useless)
 279:Src/bsp_driver_sd.c ****   */
 280:Src/bsp_driver_sd.c **** __weak void BSP_SD_ReadCpltCallback(void)
 281:Src/bsp_driver_sd.c **** {
 501              		.loc 1 281 1 is_stmt 1 view -0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 282:Src/bsp_driver_sd.c **** 
 283:Src/bsp_driver_sd.c **** }
 506              		.loc 1 283 1 view .LVU86
 507 0000 7047     		bx	lr
 508              		.cfi_endproc
 509              	.LFE155:
 511              		.section	.text.HAL_SD_RxCpltCallback,"ax",%progbits
 512              		.align	1
 513              		.global	HAL_SD_RxCpltCallback
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu fpv5-d16
 519              	HAL_SD_RxCpltCallback:
 520              	.LVL44:
 521              	.LFB152:
 250:Src/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 522              		.loc 1 250 1 view -0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 250:Src/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 526              		.loc 1 250 1 is_stmt 0 view .LVU88
 527 0000 08B5     		push	{r3, lr}
 528              	.LCFI13:
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 3, -8
 531              		.cfi_offset 14, -4
 251:Src/bsp_driver_sd.c **** }
ARM GAS  /tmp/ccHQKr2Y.s 			page 15


 532              		.loc 1 251 3 is_stmt 1 view .LVU89
 533 0002 FFF7FEFF 		bl	BSP_SD_ReadCpltCallback
 534              	.LVL45:
 252:Src/bsp_driver_sd.c **** 
 535              		.loc 1 252 1 is_stmt 0 view .LVU90
 536 0006 08BD     		pop	{r3, pc}
 537              		.cfi_endproc
 538              	.LFE152:
 540              		.section	.text.BSP_SD_IsDetected,"ax",%progbits
 541              		.align	1
 542              		.weak	BSP_SD_IsDetected
 543              		.syntax unified
 544              		.thumb
 545              		.thumb_func
 546              		.fpu fpv5-d16
 548              	BSP_SD_IsDetected:
 549              	.LFB156:
 284:Src/bsp_driver_sd.c **** /* USER CODE END CallBacksSection_C */
 285:Src/bsp_driver_sd.c **** #endif
 286:Src/bsp_driver_sd.c **** 
 287:Src/bsp_driver_sd.c **** /**
 288:Src/bsp_driver_sd.c ****  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 289:Src/bsp_driver_sd.c ****  * @param  None
 290:Src/bsp_driver_sd.c ****  * @retval Returns if SD is detected or not
 291:Src/bsp_driver_sd.c ****  */
 292:Src/bsp_driver_sd.c **** __weak uint8_t BSP_SD_IsDetected(void)
 293:Src/bsp_driver_sd.c **** {
 550              		.loc 1 293 1 is_stmt 1 view -0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 8
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554 0000 00B5     		push	{lr}
 555              	.LCFI14:
 556              		.cfi_def_cfa_offset 4
 557              		.cfi_offset 14, -4
 558 0002 83B0     		sub	sp, sp, #12
 559              	.LCFI15:
 560              		.cfi_def_cfa_offset 16
 294:Src/bsp_driver_sd.c ****   __IO uint8_t status = SD_PRESENT;
 561              		.loc 1 294 3 view .LVU92
 562              		.loc 1 294 16 is_stmt 0 view .LVU93
 563 0004 0123     		movs	r3, #1
 564 0006 8DF80730 		strb	r3, [sp, #7]
 295:Src/bsp_driver_sd.c **** 
 296:Src/bsp_driver_sd.c ****   if (BSP_PlatformIsDetected() == 0x0) 
 565              		.loc 1 296 3 is_stmt 1 view .LVU94
 566              		.loc 1 296 7 is_stmt 0 view .LVU95
 567 000a FFF7FEFF 		bl	BSP_PlatformIsDetected
 568              	.LVL46:
 569              		.loc 1 296 6 view .LVU96
 570 000e 10B9     		cbnz	r0, .L50
 297:Src/bsp_driver_sd.c ****   {
 298:Src/bsp_driver_sd.c ****     status = SD_NOT_PRESENT;
 571              		.loc 1 298 5 is_stmt 1 view .LVU97
 572              		.loc 1 298 12 is_stmt 0 view .LVU98
 573 0010 0023     		movs	r3, #0
 574 0012 8DF80730 		strb	r3, [sp, #7]
ARM GAS  /tmp/ccHQKr2Y.s 			page 16


 575              	.L50:
 299:Src/bsp_driver_sd.c ****   }
 300:Src/bsp_driver_sd.c **** 
 301:Src/bsp_driver_sd.c ****   return status;
 576              		.loc 1 301 3 is_stmt 1 view .LVU99
 577              		.loc 1 301 10 is_stmt 0 view .LVU100
 578 0016 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 302:Src/bsp_driver_sd.c **** }
 579              		.loc 1 302 1 view .LVU101
 580 001a 03B0     		add	sp, sp, #12
 581              	.LCFI16:
 582              		.cfi_def_cfa_offset 4
 583              		@ sp needed
 584 001c 5DF804FB 		ldr	pc, [sp], #4
 585              		.cfi_endproc
 586              	.LFE156:
 588              		.section	.text.BSP_SD_Init,"ax",%progbits
 589              		.align	1
 590              		.weak	BSP_SD_Init
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 594              		.fpu fpv5-d16
 596              	BSP_SD_Init:
 597              	.LFB141:
  50:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 598              		.loc 1 50 1 is_stmt 1 view -0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602 0000 08B5     		push	{r3, lr}
 603              	.LCFI17:
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 3, -8
 606              		.cfi_offset 14, -4
  51:Src/bsp_driver_sd.c ****   /* Check if the SD card is plugged in the slot */
 607              		.loc 1 51 3 view .LVU103
 608              	.LVL47:
  53:Src/bsp_driver_sd.c ****   {
 609              		.loc 1 53 3 view .LVU104
  53:Src/bsp_driver_sd.c ****   {
 610              		.loc 1 53 7 is_stmt 0 view .LVU105
 611 0002 FFF7FEFF 		bl	BSP_SD_IsDetected
 612              	.LVL48:
  53:Src/bsp_driver_sd.c ****   {
 613              		.loc 1 53 6 view .LVU106
 614 0006 0128     		cmp	r0, #1
 615 0008 01D0     		beq	.L56
  55:Src/bsp_driver_sd.c ****   }
 616              		.loc 1 55 12 view .LVU107
 617 000a 0220     		movs	r0, #2
 618              	.LVL49:
 619              	.L53:
  61:Src/bsp_driver_sd.c **** /* USER CODE BEGIN AfterInitSection */
 620              		.loc 1 61 1 view .LVU108
 621 000c 08BD     		pop	{r3, pc}
 622              	.LVL50:
ARM GAS  /tmp/ccHQKr2Y.s 			page 17


 623              	.L56:
  58:Src/bsp_driver_sd.c **** 
 624              		.loc 1 58 3 is_stmt 1 view .LVU109
  58:Src/bsp_driver_sd.c **** 
 625              		.loc 1 58 14 is_stmt 0 view .LVU110
 626 000e 0248     		ldr	r0, .L57
 627 0010 FFF7FEFF 		bl	HAL_SD_Init
 628              	.LVL51:
  60:Src/bsp_driver_sd.c **** }
 629              		.loc 1 60 3 is_stmt 1 view .LVU111
  60:Src/bsp_driver_sd.c **** }
 630              		.loc 1 60 10 is_stmt 0 view .LVU112
 631 0014 FAE7     		b	.L53
 632              	.L58:
 633 0016 00BF     		.align	2
 634              	.L57:
 635 0018 00000000 		.word	hsd2
 636              		.cfi_endproc
 637              	.LFE141:
 639              		.text
 640              	.Letext0:
 641              		.file 2 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/machine/_default_types.h"
 642              		.file 3 "/home/alex/Mass Storage/ARM-GCC/arm-none-eabi/include/sys/_stdint.h"
 643              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 644              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 645              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f765xx.h"
 646              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 647              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 648              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 649              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 650              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 651              		.file 12 "Inc/fatfs_platform.h"
ARM GAS  /tmp/ccHQKr2Y.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bsp_driver_sd.c
     /tmp/ccHQKr2Y.s:17     .text.BSP_SD_ITConfig:0000000000000000 $t
     /tmp/ccHQKr2Y.s:25     .text.BSP_SD_ITConfig:0000000000000000 BSP_SD_ITConfig
     /tmp/ccHQKr2Y.s:41     .text.BSP_SD_ReadBlocks:0000000000000000 $t
     /tmp/ccHQKr2Y.s:48     .text.BSP_SD_ReadBlocks:0000000000000000 BSP_SD_ReadBlocks
     /tmp/ccHQKr2Y.s:98     .text.BSP_SD_ReadBlocks:000000000000001c $d
     /tmp/ccHQKr2Y.s:103    .text.BSP_SD_WriteBlocks:0000000000000000 $t
     /tmp/ccHQKr2Y.s:110    .text.BSP_SD_WriteBlocks:0000000000000000 BSP_SD_WriteBlocks
     /tmp/ccHQKr2Y.s:160    .text.BSP_SD_WriteBlocks:000000000000001c $d
     /tmp/ccHQKr2Y.s:165    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 $t
     /tmp/ccHQKr2Y.s:172    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 BSP_SD_ReadBlocks_DMA
     /tmp/ccHQKr2Y.s:213    .text.BSP_SD_ReadBlocks_DMA:0000000000000014 $d
     /tmp/ccHQKr2Y.s:218    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 $t
     /tmp/ccHQKr2Y.s:225    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 BSP_SD_WriteBlocks_DMA
     /tmp/ccHQKr2Y.s:266    .text.BSP_SD_WriteBlocks_DMA:0000000000000014 $d
     /tmp/ccHQKr2Y.s:271    .text.BSP_SD_Erase:0000000000000000 $t
     /tmp/ccHQKr2Y.s:278    .text.BSP_SD_Erase:0000000000000000 BSP_SD_Erase
     /tmp/ccHQKr2Y.s:316    .text.BSP_SD_Erase:0000000000000014 $d
     /tmp/ccHQKr2Y.s:321    .text.BSP_SD_GetCardState:0000000000000000 $t
     /tmp/ccHQKr2Y.s:328    .text.BSP_SD_GetCardState:0000000000000000 BSP_SD_GetCardState
     /tmp/ccHQKr2Y.s:352    .text.BSP_SD_GetCardState:0000000000000010 $d
     /tmp/ccHQKr2Y.s:357    .text.BSP_SD_GetCardInfo:0000000000000000 $t
     /tmp/ccHQKr2Y.s:364    .text.BSP_SD_GetCardInfo:0000000000000000 BSP_SD_GetCardInfo
     /tmp/ccHQKr2Y.s:389    .text.BSP_SD_GetCardInfo:000000000000000c $d
     /tmp/ccHQKr2Y.s:394    .text.BSP_SD_AbortCallback:0000000000000000 $t
     /tmp/ccHQKr2Y.s:401    .text.BSP_SD_AbortCallback:0000000000000000 BSP_SD_AbortCallback
     /tmp/ccHQKr2Y.s:414    .text.HAL_SD_AbortCallback:0000000000000000 $t
     /tmp/ccHQKr2Y.s:421    .text.HAL_SD_AbortCallback:0000000000000000 HAL_SD_AbortCallback
     /tmp/ccHQKr2Y.s:443    .text.BSP_SD_WriteCpltCallback:0000000000000000 $t
     /tmp/ccHQKr2Y.s:450    .text.BSP_SD_WriteCpltCallback:0000000000000000 BSP_SD_WriteCpltCallback
     /tmp/ccHQKr2Y.s:463    .text.HAL_SD_TxCpltCallback:0000000000000000 $t
     /tmp/ccHQKr2Y.s:470    .text.HAL_SD_TxCpltCallback:0000000000000000 HAL_SD_TxCpltCallback
     /tmp/ccHQKr2Y.s:492    .text.BSP_SD_ReadCpltCallback:0000000000000000 $t
     /tmp/ccHQKr2Y.s:499    .text.BSP_SD_ReadCpltCallback:0000000000000000 BSP_SD_ReadCpltCallback
     /tmp/ccHQKr2Y.s:512    .text.HAL_SD_RxCpltCallback:0000000000000000 $t
     /tmp/ccHQKr2Y.s:519    .text.HAL_SD_RxCpltCallback:0000000000000000 HAL_SD_RxCpltCallback
     /tmp/ccHQKr2Y.s:541    .text.BSP_SD_IsDetected:0000000000000000 $t
     /tmp/ccHQKr2Y.s:548    .text.BSP_SD_IsDetected:0000000000000000 BSP_SD_IsDetected
     /tmp/ccHQKr2Y.s:589    .text.BSP_SD_Init:0000000000000000 $t
     /tmp/ccHQKr2Y.s:596    .text.BSP_SD_Init:0000000000000000 BSP_SD_Init
     /tmp/ccHQKr2Y.s:635    .text.BSP_SD_Init:0000000000000018 $d

UNDEFINED SYMBOLS
HAL_SD_ReadBlocks
hsd2
HAL_SD_WriteBlocks
HAL_SD_ReadBlocks_DMA
HAL_SD_WriteBlocks_DMA
HAL_SD_Erase
HAL_SD_GetCardState
HAL_SD_GetCardInfo
BSP_PlatformIsDetected
HAL_SD_Init
