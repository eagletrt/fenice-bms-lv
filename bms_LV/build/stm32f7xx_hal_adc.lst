ARM GAS  /tmp/cckVjXco.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32f7xx_hal_adc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.ADC_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	ADC_Init:
  24              	.LFB163:
  25              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @file    stm32f7xx_hal_adc.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           + IO operation functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           + State and errors functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   @verbatim
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                     ##### ADC Peripheral features #####
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..] 
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Interrupt generation at the end of conversion, end of injected conversion,  
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       and in case of analog watchdog or overrun events
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Single and continuous conversion modes.
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Scan mode for automatic conversion of channel 0 to channel x.
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Data alignment with in-built data coherency.
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Channel-wise programmable sampling time.
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) External trigger option with configurable polarity for both regular and 
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       injected conversion.
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Dual/Triple mode (on devices with 2 ADCs or more).
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configurable delay between conversions in Dual/Triple interleaved mode.
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC conversion type (refer to the datasheets).
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       slower speed.
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC input range: VREF(minus) = VIN = VREF(plus).
  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) DMA request generation during regular channel conversion.
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
ARM GAS  /tmp/cckVjXco.s 			page 2


  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                      ##### How to use this driver #####
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) ADC pins configuration
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                    __HAL_RCC_GPIOx_CLK_ENABLE()  
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure and enable two DMA streams stream for managing data
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  transfer from peripheral to memory (output stream)
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Associate the initialized DMA handle to the CRYP DMA handle
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  using  __HAL_LINKDMA()
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  priority than the input stream.
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                        
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     *** Configuration of ADC, groups regular/injected, channels parameters ***
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configure the ADC parameters (resolution, data alignment, ...)
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       and regular group parameters (conversion trigger, sequencer, ...)
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADC_Init().
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configure the channels for regular group parameters (channel number, 
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       channel rank into sequencer, ..., into regular group)
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADC_ConfigChannel().
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, configure the injected group parameters (conversion trigger, 
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       sequencer, ..., of injected group)
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       and the channels for injected group parameters (channel number, 
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       channel rank into sequencer, ..., into injected group)
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADCEx_InjectedConfigChannel().
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, configure the analog watchdog parameters (channels
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       monitored, thresholds, ...) using function HAL_ADC_AnalogWDGConfig().
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, for devices with several ADC instances: configure the 
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       multimode parameters using function HAL_ADCEx_MultiModeConfigChannel().
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                        *** Execution of ADC conversions ***
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]  
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC driver can be used among three modes: polling, interruption,
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       transfer by DMA.    
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** Polling mode IO operation ***
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      =================================
  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]    
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start() 
ARM GAS  /tmp/cckVjXco.s 			page 3


  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            user can specify the value of timeout according to his end application      
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop()
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** Interrupt mode IO operation ***    
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ===================================
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]    
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** DMA mode IO operation ***    
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ==============================
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]    
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the l
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            of data to be transferred at each end of conversion 
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user 
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                     
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** ADC HAL driver macros list ***
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ============================================= 
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        Below the list of most used macros in ADC HAL driver.
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabl
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** Callback functions ***
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ==============================
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (@) Callback functions must be implemented in user program:
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (@) You can refer to the ADC HAL driver header file for more useful macros 
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       *** Deinitialization of ADC ***
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Disable the ADC interface
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) ADC clock can be hard reset and disabled at RCC top level.
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) Hard reset of ADC peripherals
ARM GAS  /tmp/cckVjXco.s 			page 4


 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           using macro __HAL_RCC_ADC_FORCE_RESET(), __HAL_RCC_ADC_RELEASE_RESET().
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) ADC clock disable using the equivalent macro/functions as configuration step.
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) Example:
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                    other device clock parameters configuration:
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC pins configuration
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) Disable the clock for the ADC GPIOs using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, in case of usage of ADC with interruptions:
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) Disable the NVIC for ADC using function HAL_NVIC_DisableIRQ(ADCx_IRQn)
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, in case of usage of DMA:
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         (++) Deinitialize the DMA using function HAL_DMA_DeInit().
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         (++) Disable the NVIC for DMA using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)   
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       *** Callback registration ***
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      to register an interrupt callback.
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      and a pointer to the user callback function.
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      weak function.
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      and the Callback ID.
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      This function allows to reset following callbacks:
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
ARM GAS  /tmp/cckVjXco.s 			page 5


 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      are set to the corresponding weak functions.
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     @endverbatim
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @attention
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * All rights reserved.</center></h2>
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */ 
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #include "stm32f7xx_hal.h"
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
ARM GAS  /tmp/cckVjXco.s 			page 6


 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC ADC
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief ADC driver modules
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */ 
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc);
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions 
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim    
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) De-initialize the ADC. 
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****          
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         in the ADC_InitStruct and initializes the ADC MSP.
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the rest of the configuration parameters are specific to the regular
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         channels group (scan mode activation, continuous mode activation,
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         External trigger source and edge, DMA continuous request after the  
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *             
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
ARM GAS  /tmp/cckVjXco.s 			page 7


 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check ADC handle */
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc == NULL)
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Init the ADC Callback settings */
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Init the low level hardware */
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Init the low level hardware */
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Initialize ADC error code */
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
ARM GAS  /tmp/cckVjXco.s 			page 8


 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* correctly completed.                                                     */
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC parameters */
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_Init(hadc);
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to none */
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the ADC state */
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Release Lock */
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check ADC handle */
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc == NULL)
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC state */
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
ARM GAS  /tmp/cckVjXco.s 			page 9


 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* correctly completed.                                                     */
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (hadc->MspDeInitCallback == NULL)
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->MspDeInitCallback(hadc);
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to none */
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_MspInit could be implemented in the user file
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */ 
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/cckVjXco.s 			page 10


 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_MspDeInit could be implemented in the user file
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */ 
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         This parameter can be one of the following values:
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (pCallback == NULL)
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update the error code */
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
ARM GAS  /tmp/cckVjXco.s 			page 11


 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status = HAL_ERROR;
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status = HAL_ERROR;
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update the error code */
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Return error status */
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     status =  HAL_ERROR;
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return status;
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
ARM GAS  /tmp/cckVjXco.s 			page 12


 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         This parameter can be one of the following values:
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status =  HAL_ERROR;
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
ARM GAS  /tmp/cckVjXco.s 			page 13


 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status =  HAL_ERROR;
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update the error code */
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Return error status */
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     status =  HAL_ERROR;
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return status;
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief    IO operation functions 
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim   
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              ##### IO operation functions #####
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel.
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel.
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel and enable interrupt.
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable interrupt.
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel and enable DMA transfer.
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable DMA transfer.
 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Handle ADC interrupt request. 
ARM GAS  /tmp/cckVjXco.s 			page 14


 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables ADC and starts conversion of the regular channels.
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter--;
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
ARM GAS  /tmp/cckVjXco.s 			page 15


 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if dual mode is selected, ADC3 works independently. */
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* check if the mode selected is not triple */
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* if instance of handle correspond to ADC3 and no external trigger present enable software
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           /* Enable the selected ADC software conversion for regular group */
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
ARM GAS  /tmp/cckVjXco.s 			page 16


 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables ADC and stop conversion of regular channels.
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * 
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Poll for regular conversion complete
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         conversion) are cleared by this function.
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         be performed on the complete sequence.
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.  
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/cckVjXco.s 			page 17


 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* each conversion:                                                       */
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* ADC configured in DMA mode and polling for end of each conversion.     */
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update ADC state machine to error */
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Get tick */ 
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag */
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Process unlocked */
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         return HAL_TIMEOUT;
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Clear regular group conversion flag */
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Update ADC state machine */
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Note: On STM32F7, there is no independent flag of end of sequence.       */
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       of end of sequence.                                                */
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
ARM GAS  /tmp/cckVjXco.s 			page 18


 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     { 
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Poll for conversion event
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  EventType the ADC event type.
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          This parameter can be one of the following values:
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watch Dog event.
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.   
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Get tick */
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check selected event flag */
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check for the Timeout */
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Process unlocked */
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         return HAL_TIMEOUT;
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(EventType == ADC_AWD_EVENT)
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
ARM GAS  /tmp/cckVjXco.s 			page 19


1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Overrun event */
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC overrun flag */
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables the interrupt and starts ADC conversion of regular channels.
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Tstab time the ADC's stabilization */
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter--;
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/cckVjXco.s 			page 20


1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
ARM GAS  /tmp/cckVjXco.s 			page 21


1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if dual mode is selected, ADC3 works independently. */
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* check if the mode selected is not triple */
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* if instance of handle correspond to ADC3 and  no external trigger present enable softwar
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           /* Enable the selected ADC software conversion for regular group */
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       } 
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables the interrupt and stop ADC conversion of regular channels.
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * 
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   	/* Disable ADC end of conversion interrupt for regular group */
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/cckVjXco.s 			page 22


1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, there is no independent flag of end of sequence.   */
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       of end of sequence.                                            */
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
ARM GAS  /tmp/cckVjXco.s 			page 23


1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */ 
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag */
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group injected  */
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, scan sequence on going or by automatic injected */
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* conversion from group regular (same conditions as group regular      */
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption disabling above).                                       */
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group injected */
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       { 
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */ 
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->InjectedConvCpltCallback(hadc);
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear injected group conversion flag */
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/cckVjXco.s 			page 24


1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Analog watchdog flag */
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Level out of window callback */ 
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Overrun flag */
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, ADC overrun can be set through other parameters    */
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more      */
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       details.                                                       */
1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC overrun flag */
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Error callback */ 
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the Overrun flag */
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC periphera
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
ARM GAS  /tmp/cckVjXco.s 			page 25


1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Tstab time the ADC's stabilization */
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter--;
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
ARM GAS  /tmp/cckVjXco.s 			page 26


1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);   
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA error callback */
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable ADC DMA mode */
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Start the DMA channel */
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if dual mode is selected, ADC3 works independently. */
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* check if the mode selected is not triple */
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* if instance of handle correspond to ADC3 and  no external trigger present enable softwar
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
ARM GAS  /tmp/cckVjXco.s 			page 27


1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           /* Enable the selected ADC software conversion for regular group */
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the selected ADC DMA mode */
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
ARM GAS  /tmp/cckVjXco.s 			page 28


1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Gets the converted value from data register of regular channel.
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval Converted value
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {       
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->Instance->DR;
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Regular conversion complete callback in non blocking mode 
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ConvCpltCallback could be implemented in the user file
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Regular conversion half DMA transfer callback in non blocking mode 
1545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
1555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode 
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
ARM GAS  /tmp/cckVjXco.s 			page 29


1573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Error ADC callback.
1575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ErrorCallback could be implemented in the user file
1591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
1592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief   	Peripheral Control functions 
1600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
1601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim   
1602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
1603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              ##### Peripheral Control functions #####
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
1605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure regular channels. 
1607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure injected channels.
1608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure multimode.
1609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure the analog watch dog.
1610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
1612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /**
1616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
1617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         rank in the sequencer and its sample time.
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  sConfig ADC configuration structure. 
1621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
ARM GAS  /tmp/cckVjXco.s 			page 30


1630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 			
1635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	if (sConfig->Channel > ADC_CHANNEL_9)
1637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	{
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		/* Clear the old sample time */
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		{
1643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 			/* Set the new sample time */
1644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		}
1646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	  else
1647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	  {	
1648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		  /* Set the new sample time */
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	  }
1651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old sample time */
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the new sample time */
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
1659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For Rank 1 to 6 */
1662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (sConfig->Rank < 7)
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
1666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
1669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For Rank 7 to 12 */
1671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else if (sConfig->Rank < 13)
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
1678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For Rank 13 to 16 */
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
ARM GAS  /tmp/cckVjXco.s 			page 31


1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the VBAT channel*/
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_VBATE;
1694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channe
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the TSVREFE channel*/
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_TSVREFE;
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Compute number of CPU cycles to wait for */
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       while(counter != 0)
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         counter--;
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         is on going.
1725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
1734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         that contains the configuration information of ADC analog watchdog.
1735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status	  
1736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp = 0;
1741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */  
1742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
ARM GAS  /tmp/cckVjXco.s 			page 32


1744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
1745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp = ADC_GET_RESOLUTION(hadc);
1750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
1751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
1752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */
1753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
1770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the analog watchdog enable mode */
1772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
1773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the high threshold */
1775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
1776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the low threshold */
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
1779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Clear the Analog watchdog channel select bits */
1781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the Analog watchdog channel */
1784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
1785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 ADC Peripheral State functions
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief   ADC Peripheral State functions 
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
1800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim   
ARM GAS  /tmp/cckVjXco.s 			page 33


1801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             ##### Peripheral State and errors functions #####
1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
1804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
1805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     This subsection provides functions allowing to
1806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Check the ADC state
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Check the ADC Error
1808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****          
1809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
1810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
1811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  return the ADC state
1815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL state
1818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
1822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->State;
1823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Return the ADC error code
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval ADC Error Code
1830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->ErrorCode;
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private functions ---------------------------------------------------------*/
1845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
1848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
1852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         in the ADC_InitStruct without initializing the ADC MSP.       
1853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
1855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cckVjXco.s 			page 34


1858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
  26              		.loc 1 1858 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
1859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC parameters */
1860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the ADC clock prescaler */
1861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC->CCR &= ~(ADC_CCR_ADCPRE);
  32              		.loc 1 1861 0
  33 0000 4A4B     		ldr	r3, .L7
  34 0002 5A68     		ldr	r2, [r3, #4]
  35 0004 22F44032 		bic	r2, r2, #196608
  36 0008 5A60     		str	r2, [r3, #4]
1862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC->CCR |=  hadc->Init.ClockPrescaler;
  37              		.loc 1 1862 0
  38 000a 5A68     		ldr	r2, [r3, #4]
  39 000c 4168     		ldr	r1, [r0, #4]
  40 000e 0A43     		orrs	r2, r2, r1
  41 0010 5A60     		str	r2, [r3, #4]
1863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC scan mode */
1865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
  42              		.loc 1 1865 0
  43 0012 0268     		ldr	r2, [r0]
  44 0014 5368     		ldr	r3, [r2, #4]
  45 0016 23F48073 		bic	r3, r3, #256
  46 001a 5360     		str	r3, [r2, #4]
1866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
  47              		.loc 1 1866 0
  48 001c 0268     		ldr	r2, [r0]
  49 001e 5368     		ldr	r3, [r2, #4]
  50 0020 0169     		ldr	r1, [r0, #16]
  51 0022 43EA0123 		orr	r3, r3, r1, lsl #8
  52 0026 5360     		str	r3, [r2, #4]
1867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC resolution */
1869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  53              		.loc 1 1869 0
  54 0028 0268     		ldr	r2, [r0]
  55 002a 5368     		ldr	r3, [r2, #4]
  56 002c 23F04073 		bic	r3, r3, #50331648
  57 0030 5360     		str	r3, [r2, #4]
1870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |=  hadc->Init.Resolution;
  58              		.loc 1 1870 0
  59 0032 0268     		ldr	r2, [r0]
  60 0034 5368     		ldr	r3, [r2, #4]
  61 0036 8168     		ldr	r1, [r0, #8]
  62 0038 0B43     		orrs	r3, r3, r1
  63 003a 5360     		str	r3, [r2, #4]
1871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC data alignment */
1873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  64              		.loc 1 1873 0
  65 003c 0268     		ldr	r2, [r0]
  66 003e 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/cckVjXco.s 			page 35


  67 0040 23F40063 		bic	r3, r3, #2048
  68 0044 9360     		str	r3, [r2, #8]
1874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.DataAlign;
  69              		.loc 1 1874 0
  70 0046 0268     		ldr	r2, [r0]
  71 0048 9368     		ldr	r3, [r2, #8]
  72 004a C168     		ldr	r1, [r0, #12]
  73 004c 0B43     		orrs	r3, r3, r1
  74 004e 9360     		str	r3, [r2, #8]
1875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
1877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* start.                                                                 */
1878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
1879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
1880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       software start.                                                  */
1881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  75              		.loc 1 1881 0
  76 0050 826A     		ldr	r2, [r0, #40]
  77 0052 374B     		ldr	r3, .L7+4
  78 0054 9A42     		cmp	r2, r3
  79 0056 4BD0     		beq	.L2
1882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Select external trigger to start conversion */
1884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
  80              		.loc 1 1884 0
  81 0058 0268     		ldr	r2, [r0]
  82 005a 9368     		ldr	r3, [r2, #8]
  83 005c 23F07063 		bic	r3, r3, #251658240
  84 0060 9360     		str	r3, [r2, #8]
1885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
  85              		.loc 1 1885 0
  86 0062 0268     		ldr	r2, [r0]
  87 0064 9368     		ldr	r3, [r2, #8]
  88 0066 816A     		ldr	r1, [r0, #40]
  89 0068 0B43     		orrs	r3, r3, r1
  90 006a 9360     		str	r3, [r2, #8]
1886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Select external trigger polarity */
1888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  91              		.loc 1 1888 0
  92 006c 0268     		ldr	r2, [r0]
  93 006e 9368     		ldr	r3, [r2, #8]
  94 0070 23F04053 		bic	r3, r3, #805306368
  95 0074 9360     		str	r3, [r2, #8]
1889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
  96              		.loc 1 1889 0
  97 0076 0268     		ldr	r2, [r0]
  98 0078 9368     		ldr	r3, [r2, #8]
  99 007a C16A     		ldr	r1, [r0, #44]
 100 007c 0B43     		orrs	r3, r3, r1
 101 007e 9360     		str	r3, [r2, #8]
 102              	.L3:
1890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Reset the external trigger */
1894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
ARM GAS  /tmp/cckVjXco.s 			page 36


1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
1896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC continuous conversion mode */
1899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 103              		.loc 1 1899 0
 104 0080 0268     		ldr	r2, [r0]
 105 0082 9368     		ldr	r3, [r2, #8]
 106 0084 23F00203 		bic	r3, r3, #2
 107 0088 9360     		str	r3, [r2, #8]
1900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 108              		.loc 1 1900 0
 109 008a 0268     		ldr	r2, [r0]
 110 008c 9368     		ldr	r3, [r2, #8]
 111 008e 8169     		ldr	r1, [r0, #24]
 112 0090 43EA4103 		orr	r3, r3, r1, lsl #1
 113 0094 9360     		str	r3, [r2, #8]
1901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.DiscontinuousConvMode != DISABLE)
 114              		.loc 1 1902 0
 115 0096 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 116 009a 002B     		cmp	r3, #0
 117 009c 33D1     		bne	.L6
1903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
1905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
1908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the number of channels to be converted in discontinuous mode */
1910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
1911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
1912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 118              		.loc 1 1916 0
 119 009e 0268     		ldr	r2, [r0]
 120 00a0 5368     		ldr	r3, [r2, #4]
 121 00a2 23F40063 		bic	r3, r3, #2048
 122 00a6 5360     		str	r3, [r2, #4]
 123              	.L5:
1917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC number of conversion */
1920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 124              		.loc 1 1920 0
 125 00a8 0268     		ldr	r2, [r0]
 126 00aa D36A     		ldr	r3, [r2, #44]
 127 00ac 23F47003 		bic	r3, r3, #15728640
 128 00b0 D362     		str	r3, [r2, #44]
1921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 129              		.loc 1 1921 0
 130 00b2 0168     		ldr	r1, [r0]
 131 00b4 CB6A     		ldr	r3, [r1, #44]
 132 00b6 C269     		ldr	r2, [r0, #28]
ARM GAS  /tmp/cckVjXco.s 			page 37


 133 00b8 013A     		subs	r2, r2, #1
 134 00ba 43EA0253 		orr	r3, r3, r2, lsl #20
 135 00be CB62     		str	r3, [r1, #44]
1922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC DMA continuous request */
1924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 136              		.loc 1 1924 0
 137 00c0 0268     		ldr	r2, [r0]
 138 00c2 9368     		ldr	r3, [r2, #8]
 139 00c4 23F40073 		bic	r3, r3, #512
 140 00c8 9360     		str	r3, [r2, #8]
1925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 141              		.loc 1 1925 0
 142 00ca 0268     		ldr	r2, [r0]
 143 00cc 9368     		ldr	r3, [r2, #8]
 144 00ce 90F83010 		ldrb	r1, [r0, #48]	@ zero_extendqisi2
 145 00d2 43EA4123 		orr	r3, r3, r1, lsl #9
 146 00d6 9360     		str	r3, [r2, #8]
1926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC end of conversion selection */
1928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 147              		.loc 1 1928 0
 148 00d8 0268     		ldr	r2, [r0]
 149 00da 9368     		ldr	r3, [r2, #8]
 150 00dc 23F48063 		bic	r3, r3, #1024
 151 00e0 9360     		str	r3, [r2, #8]
1929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 152              		.loc 1 1929 0
 153 00e2 0268     		ldr	r2, [r0]
 154 00e4 9368     		ldr	r3, [r2, #8]
 155 00e6 4169     		ldr	r1, [r0, #20]
 156 00e8 43EA8123 		orr	r3, r3, r1, lsl #10
 157 00ec 9360     		str	r3, [r2, #8]
 158 00ee 7047     		bx	lr
 159              	.L2:
1894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 160              		.loc 1 1894 0
 161 00f0 0268     		ldr	r2, [r0]
 162 00f2 9368     		ldr	r3, [r2, #8]
 163 00f4 23F07063 		bic	r3, r3, #251658240
 164 00f8 9360     		str	r3, [r2, #8]
1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 165              		.loc 1 1895 0
 166 00fa 0268     		ldr	r2, [r0]
 167 00fc 9368     		ldr	r3, [r2, #8]
 168 00fe 23F04053 		bic	r3, r3, #805306368
 169 0102 9360     		str	r3, [r2, #8]
 170 0104 BCE7     		b	.L3
 171              	.L6:
1907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 172              		.loc 1 1907 0
 173 0106 0268     		ldr	r2, [r0]
 174 0108 5368     		ldr	r3, [r2, #4]
 175 010a 43F40063 		orr	r3, r3, #2048
 176 010e 5360     		str	r3, [r2, #4]
1910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 177              		.loc 1 1910 0
ARM GAS  /tmp/cckVjXco.s 			page 38


 178 0110 0268     		ldr	r2, [r0]
 179 0112 5368     		ldr	r3, [r2, #4]
 180 0114 23F46043 		bic	r3, r3, #57344
 181 0118 5360     		str	r3, [r2, #4]
1911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 182              		.loc 1 1911 0
 183 011a 0168     		ldr	r1, [r0]
 184 011c 4B68     		ldr	r3, [r1, #4]
 185 011e 426A     		ldr	r2, [r0, #36]
 186 0120 013A     		subs	r2, r2, #1
 187 0122 43EA4233 		orr	r3, r3, r2, lsl #13
 188 0126 4B60     		str	r3, [r1, #4]
 189 0128 BEE7     		b	.L5
 190              	.L8:
 191 012a 00BF     		.align	2
 192              	.L7:
 193 012c 00230140 		.word	1073816320
 194 0130 0100000F 		.word	251658241
 195              		.cfi_endproc
 196              	.LFE163:
 198              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 199              		.align	1
 200              		.weak	HAL_ADC_MspInit
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv5-d16
 206              	HAL_ADC_MspInit:
 207              	.LFB143:
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 208              		.loc 1 473 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LVL1:
 214 0000 7047     		bx	lr
 215              		.cfi_endproc
 216              	.LFE143:
 218              		.section	.text.HAL_ADC_Init,"ax",%progbits
 219              		.align	1
 220              		.global	HAL_ADC_Init
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv5-d16
 226              	HAL_ADC_Init:
 227              	.LFB141:
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 228              		.loc 1 322 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL2:
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 233              		.loc 1 326 0
 234 0000 28B3     		cbz	r0, .L14
ARM GAS  /tmp/cckVjXco.s 			page 39


 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 235              		.loc 1 322 0
 236 0002 10B5     		push	{r4, lr}
 237              	.LCFI0:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 4, -8
 240              		.cfi_offset 14, -4
 241 0004 0446     		mov	r4, r0
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 242              		.loc 1 349 0
 243 0006 036C     		ldr	r3, [r0, #64]
 244 0008 43B1     		cbz	r3, .L20
 245              	.LVL3:
 246              	.L12:
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 247              		.loc 1 379 0
 248 000a 236C     		ldr	r3, [r4, #64]
 249 000c 13F0100F 		tst	r3, #16
 250 0010 0BD0     		beq	.L21
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 251              		.loc 1 399 0
 252 0012 0120     		movs	r0, #1
 253              	.L13:
 254              	.LVL4:
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 255              		.loc 1 403 0
 256 0014 0023     		movs	r3, #0
 257 0016 84F83C30 		strb	r3, [r4, #60]
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 258              		.loc 1 406 0
 259 001a 10BD     		pop	{r4, pc}
 260              	.LVL5:
 261              	.L20:
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 262              		.loc 1 367 0
 263 001c FFF7FEFF 		bl	HAL_ADC_MspInit
 264              	.LVL6:
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 265              		.loc 1 371 0
 266 0020 0023     		movs	r3, #0
 267 0022 6364     		str	r3, [r4, #68]
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 268              		.loc 1 374 0
 269 0024 84F83C30 		strb	r3, [r4, #60]
 270 0028 EFE7     		b	.L12
 271              	.L21:
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 272              		.loc 1 382 0
 273 002a 226C     		ldr	r2, [r4, #64]
 274 002c 094B     		ldr	r3, .L22
 275 002e 1340     		ands	r3, r3, r2
 276 0030 43F00203 		orr	r3, r3, #2
 277 0034 2364     		str	r3, [r4, #64]
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 278              		.loc 1 387 0
 279 0036 2046     		mov	r0, r4
 280 0038 FFF7FEFF 		bl	ADC_Init
ARM GAS  /tmp/cckVjXco.s 			page 40


 281              	.LVL7:
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 282              		.loc 1 390 0
 283 003c 0020     		movs	r0, #0
 284 003e 6064     		str	r0, [r4, #68]
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 285              		.loc 1 393 0
 286 0040 236C     		ldr	r3, [r4, #64]
 287 0042 23F00303 		bic	r3, r3, #3
 288 0046 43F00103 		orr	r3, r3, #1
 289 004a 2364     		str	r3, [r4, #64]
 290 004c E2E7     		b	.L13
 291              	.LVL8:
 292              	.L14:
 293              	.LCFI1:
 294              		.cfi_def_cfa_offset 0
 295              		.cfi_restore 4
 296              		.cfi_restore 14
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 297              		.loc 1 328 0
 298 004e 0120     		movs	r0, #1
 299              	.LVL9:
 300 0050 7047     		bx	lr
 301              	.L23:
 302 0052 00BF     		.align	2
 303              	.L22:
 304 0054 FDEEFFFF 		.word	-4355
 305              		.cfi_endproc
 306              	.LFE141:
 308              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 309              		.align	1
 310              		.weak	HAL_ADC_MspDeInit
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv5-d16
 316              	HAL_ADC_MspDeInit:
 317              	.LFB144:
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 318              		.loc 1 488 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323              	.LVL10:
 324 0000 7047     		bx	lr
 325              		.cfi_endproc
 326              	.LFE144:
 328              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 329              		.align	1
 330              		.global	HAL_ADC_DeInit
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv5-d16
 336              	HAL_ADC_DeInit:
 337              	.LFB142:
ARM GAS  /tmp/cckVjXco.s 			page 41


 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 338              		.loc 1 416 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              	.LVL11:
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 343              		.loc 1 420 0
 344 0000 C8B1     		cbz	r0, .L28
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 345              		.loc 1 416 0
 346 0002 10B5     		push	{r4, lr}
 347              	.LCFI2:
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 4, -8
 350              		.cfi_offset 14, -4
 351 0004 0446     		mov	r4, r0
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 352              		.loc 1 429 0
 353 0006 036C     		ldr	r3, [r0, #64]
 354 0008 43F00203 		orr	r3, r3, #2
 355 000c 0364     		str	r3, [r0, #64]
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 356              		.loc 1 433 0
 357 000e 0268     		ldr	r2, [r0]
 358 0010 9368     		ldr	r3, [r2, #8]
 359 0012 23F00103 		bic	r3, r3, #1
 360 0016 9360     		str	r3, [r2, #8]
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 361              		.loc 1 437 0
 362 0018 0368     		ldr	r3, [r0]
 363 001a 9B68     		ldr	r3, [r3, #8]
 364 001c 13F0010F 		tst	r3, #1
 365 0020 03D0     		beq	.L33
 366              	.LVL12:
 367              	.L27:
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 368              		.loc 1 460 0
 369 0022 0020     		movs	r0, #0
 370 0024 84F83C00 		strb	r0, [r4, #60]
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 371              		.loc 1 463 0
 372 0028 10BD     		pop	{r4, pc}
 373              	.LVL13:
 374              	.L33:
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 375              		.loc 1 449 0
 376 002a FFF7FEFF 		bl	HAL_ADC_MspDeInit
 377              	.LVL14:
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 378              		.loc 1 453 0
 379 002e 0023     		movs	r3, #0
 380 0030 6364     		str	r3, [r4, #68]
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 381              		.loc 1 456 0
 382 0032 2364     		str	r3, [r4, #64]
 383 0034 F5E7     		b	.L27
ARM GAS  /tmp/cckVjXco.s 			page 42


 384              	.LVL15:
 385              	.L28:
 386              	.LCFI3:
 387              		.cfi_def_cfa_offset 0
 388              		.cfi_restore 4
 389              		.cfi_restore 14
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 390              		.loc 1 422 0
 391 0036 0120     		movs	r0, #1
 392              	.LVL16:
 393 0038 7047     		bx	lr
 394              		.cfi_endproc
 395              	.LFE142:
 397              		.section	.text.HAL_ADC_Start,"ax",%progbits
 398              		.align	1
 399              		.global	HAL_ADC_Start
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu fpv5-d16
 405              	HAL_ADC_Start:
 406              	.LFB145:
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 407              		.loc 1 730 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 8
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412              	.LVL17:
 413 0000 82B0     		sub	sp, sp, #8
 414              	.LCFI4:
 415              		.cfi_def_cfa_offset 8
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 416              		.loc 1 731 0
 417 0002 0023     		movs	r3, #0
 418 0004 0193     		str	r3, [sp, #4]
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 419              		.loc 1 738 0
 420 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 421 000a 012B     		cmp	r3, #1
 422 000c 73D0     		beq	.L44
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 423              		.loc 1 738 0 is_stmt 0 discriminator 2
 424 000e 0123     		movs	r3, #1
 425 0010 80F83C30 		strb	r3, [r0, #60]
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 426              		.loc 1 743 0 is_stmt 1 discriminator 2
 427 0014 0368     		ldr	r3, [r0]
 428 0016 9A68     		ldr	r2, [r3, #8]
 429 0018 12F0010F 		tst	r2, #1
 430 001c 13D1     		bne	.L36
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 431              		.loc 1 746 0
 432 001e 9A68     		ldr	r2, [r3, #8]
 433 0020 42F00102 		orr	r2, r2, #1
 434 0024 9A60     		str	r2, [r3, #8]
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
ARM GAS  /tmp/cckVjXco.s 			page 43


 435              		.loc 1 750 0
 436 0026 394B     		ldr	r3, .L53
 437 0028 1B68     		ldr	r3, [r3]
 438 002a 394A     		ldr	r2, .L53+4
 439 002c A2FB0323 		umull	r2, r3, r2, r3
 440 0030 9B0C     		lsrs	r3, r3, #18
 441 0032 03EB4303 		add	r3, r3, r3, lsl #1
 442 0036 0193     		str	r3, [sp, #4]
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 443              		.loc 1 751 0
 444 0038 02E0     		b	.L37
 445              	.L38:
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 446              		.loc 1 753 0
 447 003a 019B     		ldr	r3, [sp, #4]
 448 003c 013B     		subs	r3, r3, #1
 449 003e 0193     		str	r3, [sp, #4]
 450              	.L37:
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 451              		.loc 1 751 0
 452 0040 019B     		ldr	r3, [sp, #4]
 453 0042 002B     		cmp	r3, #0
 454 0044 F9D1     		bne	.L38
 455              	.L36:
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 456              		.loc 1 758 0
 457 0046 0268     		ldr	r2, [r0]
 458 0048 9368     		ldr	r3, [r2, #8]
 459 004a 13F0010F 		tst	r3, #1
 460 004e 55D0     		beq	.L45
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 461              		.loc 1 763 0
 462 0050 016C     		ldr	r1, [r0, #64]
 463 0052 304B     		ldr	r3, .L53+8
 464 0054 0B40     		ands	r3, r3, r1
 465 0056 43F48073 		orr	r3, r3, #256
 466 005a 0364     		str	r3, [r0, #64]
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 467              		.loc 1 769 0
 468 005c 5368     		ldr	r3, [r2, #4]
 469 005e 13F4806F 		tst	r3, #1024
 470 0062 05D0     		beq	.L39
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 471              		.loc 1 771 0
 472 0064 036C     		ldr	r3, [r0, #64]
 473 0066 23F44053 		bic	r3, r3, #12288
 474 006a 43F48053 		orr	r3, r3, #4096
 475 006e 0364     		str	r3, [r0, #64]
 476              	.L39:
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 477              		.loc 1 775 0
 478 0070 036C     		ldr	r3, [r0, #64]
 479 0072 13F4805F 		tst	r3, #4096
 480 0076 19D0     		beq	.L40
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 481              		.loc 1 778 0
 482 0078 436C     		ldr	r3, [r0, #68]
ARM GAS  /tmp/cckVjXco.s 			page 44


 483 007a 23F00603 		bic	r3, r3, #6
 484 007e 4364     		str	r3, [r0, #68]
 485              	.L41:
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 486              		.loc 1 789 0
 487 0080 0023     		movs	r3, #0
 488 0082 80F83C30 		strb	r3, [r0, #60]
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 489              		.loc 1 793 0
 490 0086 6FF02203 		mvn	r3, #34
 491 008a 1360     		str	r3, [r2]
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 492              		.loc 1 796 0
 493 008c 224B     		ldr	r3, .L53+12
 494 008e 5B68     		ldr	r3, [r3, #4]
 495 0090 13F01F0F 		tst	r3, #31
 496 0094 0DD1     		bne	.L42
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 497              		.loc 1 799 0
 498 0096 0368     		ldr	r3, [r0]
 499 0098 9A68     		ldr	r2, [r3, #8]
 500 009a 12F0405F 		tst	r2, #805306368
 501 009e 2FD1     		bne	.L46
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 502              		.loc 1 802 0
 503 00a0 9A68     		ldr	r2, [r3, #8]
 504 00a2 42F08042 		orr	r2, r2, #1073741824
 505 00a6 9A60     		str	r2, [r3, #8]
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 506              		.loc 1 829 0
 507 00a8 0020     		movs	r0, #0
 508              	.LVL18:
 509 00aa 25E0     		b	.L35
 510              	.LVL19:
 511              	.L40:
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 512              		.loc 1 783 0
 513 00ac 0023     		movs	r3, #0
 514 00ae 4364     		str	r3, [r0, #68]
 515 00b0 E6E7     		b	.L41
 516              	.L42:
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 517              		.loc 1 808 0
 518 00b2 0368     		ldr	r3, [r0]
 519 00b4 194A     		ldr	r2, .L53+16
 520 00b6 9342     		cmp	r3, r2
 521 00b8 0AD0     		beq	.L51
 522              	.L43:
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 523              		.loc 1 816 0
 524 00ba 174B     		ldr	r3, .L53+12
 525 00bc 5B68     		ldr	r3, [r3, #4]
 526 00be 13F0100F 		tst	r3, #16
 527 00c2 1FD1     		bne	.L47
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 528              		.loc 1 819 0
 529 00c4 0368     		ldr	r3, [r0]
ARM GAS  /tmp/cckVjXco.s 			page 45


 530 00c6 164A     		ldr	r2, .L53+20
 531 00c8 9342     		cmp	r3, r2
 532 00ca 0AD0     		beq	.L52
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 533              		.loc 1 829 0
 534 00cc 0020     		movs	r0, #0
 535              	.LVL20:
 536 00ce 13E0     		b	.L35
 537              	.LVL21:
 538              	.L51:
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 539              		.loc 1 808 0 discriminator 1
 540 00d0 9A68     		ldr	r2, [r3, #8]
 541 00d2 12F0405F 		tst	r2, #805306368
 542 00d6 F0D1     		bne	.L43
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 543              		.loc 1 811 0
 544 00d8 9A68     		ldr	r2, [r3, #8]
 545 00da 42F08042 		orr	r2, r2, #1073741824
 546 00de 9A60     		str	r2, [r3, #8]
 547 00e0 EBE7     		b	.L43
 548              	.L52:
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 549              		.loc 1 819 0 discriminator 1
 550 00e2 9A68     		ldr	r2, [r3, #8]
 551 00e4 12F0405F 		tst	r2, #805306368
 552 00e8 0ED1     		bne	.L49
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 553              		.loc 1 822 0
 554 00ea 9A68     		ldr	r2, [r3, #8]
 555 00ec 42F08042 		orr	r2, r2, #1073741824
 556 00f0 9A60     		str	r2, [r3, #8]
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 557              		.loc 1 829 0
 558 00f2 0020     		movs	r0, #0
 559              	.LVL22:
 560 00f4 00E0     		b	.L35
 561              	.LVL23:
 562              	.L44:
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 563              		.loc 1 738 0
 564 00f6 0220     		movs	r0, #2
 565              	.LVL24:
 566              	.L35:
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 567              		.loc 1 830 0
 568 00f8 02B0     		add	sp, sp, #8
 569              	.LCFI5:
 570              		.cfi_remember_state
 571              		.cfi_def_cfa_offset 0
 572              		@ sp needed
 573 00fa 7047     		bx	lr
 574              	.LVL25:
 575              	.L45:
 576              	.LCFI6:
 577              		.cfi_restore_state
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
ARM GAS  /tmp/cckVjXco.s 			page 46


 578              		.loc 1 829 0
 579 00fc 0020     		movs	r0, #0
 580              	.LVL26:
 581 00fe FBE7     		b	.L35
 582              	.LVL27:
 583              	.L46:
 584 0100 0020     		movs	r0, #0
 585              	.LVL28:
 586 0102 F9E7     		b	.L35
 587              	.LVL29:
 588              	.L47:
 589 0104 0020     		movs	r0, #0
 590              	.LVL30:
 591 0106 F7E7     		b	.L35
 592              	.LVL31:
 593              	.L49:
 594 0108 0020     		movs	r0, #0
 595              	.LVL32:
 596 010a F5E7     		b	.L35
 597              	.L54:
 598              		.align	2
 599              	.L53:
 600 010c 00000000 		.word	SystemCoreClock
 601 0110 83DE1B43 		.word	1125899907
 602 0114 FEF8FFFF 		.word	-1794
 603 0118 00230140 		.word	1073816320
 604 011c 00200140 		.word	1073815552
 605 0120 00220140 		.word	1073816064
 606              		.cfi_endproc
 607              	.LFE145:
 609              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 610              		.align	1
 611              		.global	HAL_ADC_Stop
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu fpv5-d16
 617              	HAL_ADC_Stop:
 618              	.LFB146:
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 619              		.loc 1 843 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624              	.LVL33:
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 625              		.loc 1 848 0
 626 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 627 0004 012B     		cmp	r3, #1
 628 0006 17D0     		beq	.L58
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 629              		.loc 1 848 0 is_stmt 0 discriminator 2
 630 0008 0123     		movs	r3, #1
 631 000a 80F83C30 		strb	r3, [r0, #60]
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 632              		.loc 1 852 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/cckVjXco.s 			page 47


 633 000e 0268     		ldr	r2, [r0]
 634 0010 9368     		ldr	r3, [r2, #8]
 635 0012 23F00103 		bic	r3, r3, #1
 636 0016 9360     		str	r3, [r2, #8]
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 637              		.loc 1 855 0 discriminator 2
 638 0018 0368     		ldr	r3, [r0]
 639 001a 9B68     		ldr	r3, [r3, #8]
 640 001c 13F0010F 		tst	r3, #1
 641 0020 05D1     		bne	.L57
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 642              		.loc 1 858 0
 643 0022 026C     		ldr	r2, [r0, #64]
 644 0024 054B     		ldr	r3, .L59
 645 0026 1340     		ands	r3, r3, r2
 646 0028 43F00103 		orr	r3, r3, #1
 647 002c 0364     		str	r3, [r0, #64]
 648              	.L57:
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 649              		.loc 1 864 0
 650 002e 0023     		movs	r3, #0
 651 0030 80F83C30 		strb	r3, [r0, #60]
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 652              		.loc 1 867 0
 653 0034 1846     		mov	r0, r3
 654              	.LVL34:
 655 0036 7047     		bx	lr
 656              	.LVL35:
 657              	.L58:
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 658              		.loc 1 848 0
 659 0038 0220     		movs	r0, #2
 660              	.LVL36:
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 661              		.loc 1 868 0
 662 003a 7047     		bx	lr
 663              	.L60:
 664              		.align	2
 665              	.L59:
 666 003c FEEEFFFF 		.word	-4354
 667              		.cfi_endproc
 668              	.LFE146:
 670              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 671              		.align	1
 672              		.global	HAL_ADC_PollForConversion
 673              		.syntax unified
 674              		.thumb
 675              		.thumb_func
 676              		.fpu fpv5-d16
 678              	HAL_ADC_PollForConversion:
 679              	.LFB147:
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 680              		.loc 1 886 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              	.LVL37:
ARM GAS  /tmp/cckVjXco.s 			page 48


 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 685              		.loc 1 895 0
 686 0000 0368     		ldr	r3, [r0]
 687 0002 9A68     		ldr	r2, [r3, #8]
 688 0004 12F4806F 		tst	r2, #1024
 689 0008 03D0     		beq	.L62
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 690              		.loc 1 896 0 discriminator 1
 691 000a 9B68     		ldr	r3, [r3, #8]
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 692              		.loc 1 895 0 discriminator 1
 693 000c 13F4807F 		tst	r3, #256
 694 0010 1CD1     		bne	.L76
 695              	.L62:
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 696              		.loc 1 886 0
 697 0012 70B5     		push	{r4, r5, r6, lr}
 698              	.LCFI7:
 699              		.cfi_def_cfa_offset 16
 700              		.cfi_offset 4, -16
 701              		.cfi_offset 5, -12
 702              		.cfi_offset 6, -8
 703              		.cfi_offset 14, -4
 704 0014 0D46     		mov	r5, r1
 705 0016 0446     		mov	r4, r0
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 706              		.loc 1 908 0
 707 0018 FFF7FEFF 		bl	HAL_GetTick
 708              	.LVL38:
 709 001c 0646     		mov	r6, r0
 710              	.LVL39:
 711              	.L65:
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 712              		.loc 1 911 0
 713 001e 2368     		ldr	r3, [r4]
 714 0020 1A68     		ldr	r2, [r3]
 715 0022 12F0020F 		tst	r2, #2
 716 0026 1AD1     		bne	.L77
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 717              		.loc 1 914 0
 718 0028 B5F1FF3F 		cmp	r5, #-1
 719 002c F7D0     		beq	.L65
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 720              		.loc 1 916 0
 721 002e 25B1     		cbz	r5, .L66
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 722              		.loc 1 916 0 is_stmt 0 discriminator 1
 723 0030 FFF7FEFF 		bl	HAL_GetTick
 724              	.LVL40:
 725 0034 801B     		subs	r0, r0, r6
 726 0036 8542     		cmp	r5, r0
 727 0038 F1D2     		bcs	.L65
 728              	.L66:
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 729              		.loc 1 919 0 is_stmt 1
 730 003a 236C     		ldr	r3, [r4, #64]
 731 003c 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/cckVjXco.s 			page 49


 732 0040 2364     		str	r3, [r4, #64]
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 733              		.loc 1 922 0
 734 0042 0023     		movs	r3, #0
 735 0044 84F83C30 		strb	r3, [r4, #60]
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 736              		.loc 1 924 0
 737 0048 0320     		movs	r0, #3
 738 004a 70BD     		pop	{r4, r5, r6, pc}
 739              	.LVL41:
 740              	.L76:
 741              	.LCFI8:
 742              		.cfi_def_cfa_offset 0
 743              		.cfi_restore 4
 744              		.cfi_restore 5
 745              		.cfi_restore 6
 746              		.cfi_restore 14
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 747              		.loc 1 899 0
 748 004c 036C     		ldr	r3, [r0, #64]
 749 004e 43F02003 		orr	r3, r3, #32
 750 0052 0364     		str	r3, [r0, #64]
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 751              		.loc 1 902 0
 752 0054 0023     		movs	r3, #0
 753 0056 80F83C30 		strb	r3, [r0, #60]
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 754              		.loc 1 904 0
 755 005a 0120     		movs	r0, #1
 756              	.LVL42:
 757 005c 7047     		bx	lr
 758              	.LVL43:
 759              	.L77:
 760              	.LCFI9:
 761              		.cfi_def_cfa_offset 16
 762              		.cfi_offset 4, -16
 763              		.cfi_offset 5, -12
 764              		.cfi_offset 6, -8
 765              		.cfi_offset 14, -4
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 766              		.loc 1 930 0
 767 005e 6FF01202 		mvn	r2, #18
 768 0062 1A60     		str	r2, [r3]
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 769              		.loc 1 933 0
 770 0064 236C     		ldr	r3, [r4, #64]
 771 0066 43F40073 		orr	r3, r3, #512
 772 006a 2364     		str	r3, [r4, #64]
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 773              		.loc 1 941 0
 774 006c 2368     		ldr	r3, [r4]
 775 006e 9A68     		ldr	r2, [r3, #8]
 776 0070 12F0405F 		tst	r2, #805306368
 777 0074 17D1     		bne	.L69
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 778              		.loc 1 942 0 discriminator 1
 779 0076 A269     		ldr	r2, [r4, #24]
ARM GAS  /tmp/cckVjXco.s 			page 50


 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 780              		.loc 1 941 0 discriminator 1
 781 0078 BAB9     		cbnz	r2, .L70
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 782              		.loc 1 943 0
 783 007a DA6A     		ldr	r2, [r3, #44]
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 784              		.loc 1 942 0
 785 007c 12F4700F 		tst	r2, #15728640
 786 0080 03D0     		beq	.L68
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 787              		.loc 1 944 0
 788 0082 9B68     		ldr	r3, [r3, #8]
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 789              		.loc 1 943 0
 790 0084 13F4806F 		tst	r3, #1024
 791 0088 11D1     		bne	.L71
 792              	.L68:
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 793              		.loc 1 947 0
 794 008a 236C     		ldr	r3, [r4, #64]
 795 008c 23F48073 		bic	r3, r3, #256
 796 0090 2364     		str	r3, [r4, #64]
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     { 
 797              		.loc 1 949 0
 798 0092 236C     		ldr	r3, [r4, #64]
 799 0094 13F4805F 		tst	r3, #4096
 800 0098 0BD1     		bne	.L72
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 801              		.loc 1 951 0
 802 009a 236C     		ldr	r3, [r4, #64]
 803 009c 43F00103 		orr	r3, r3, #1
 804 00a0 2364     		str	r3, [r4, #64]
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 805              		.loc 1 956 0
 806 00a2 0020     		movs	r0, #0
 807 00a4 70BD     		pop	{r4, r5, r6, pc}
 808              	.LVL44:
 809              	.L69:
 810 00a6 0020     		movs	r0, #0
 811 00a8 70BD     		pop	{r4, r5, r6, pc}
 812              	.LVL45:
 813              	.L70:
 814 00aa 0020     		movs	r0, #0
 815 00ac 70BD     		pop	{r4, r5, r6, pc}
 816              	.LVL46:
 817              	.L71:
 818 00ae 0020     		movs	r0, #0
 819 00b0 70BD     		pop	{r4, r5, r6, pc}
 820              	.LVL47:
 821              	.L72:
 822 00b2 0020     		movs	r0, #0
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 823              		.loc 1 957 0
 824 00b4 70BD     		pop	{r4, r5, r6, pc}
 825              		.cfi_endproc
 826              	.LFE147:
ARM GAS  /tmp/cckVjXco.s 			page 51


 828              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 829              		.align	1
 830              		.global	HAL_ADC_PollForEvent
 831              		.syntax unified
 832              		.thumb
 833              		.thumb_func
 834              		.fpu fpv5-d16
 836              	HAL_ADC_PollForEvent:
 837              	.LFB148:
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 838              		.loc 1 971 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              	.LVL48:
 843 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 844              	.LCFI10:
 845              		.cfi_def_cfa_offset 24
 846              		.cfi_offset 3, -24
 847              		.cfi_offset 4, -20
 848              		.cfi_offset 5, -16
 849              		.cfi_offset 6, -12
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 0446     		mov	r4, r0
 853 0004 0D46     		mov	r5, r1
 854 0006 1646     		mov	r6, r2
 855              	.LVL49:
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 856              		.loc 1 979 0
 857 0008 FFF7FEFF 		bl	HAL_GetTick
 858              	.LVL50:
 859 000c 0746     		mov	r7, r0
 860              	.LVL51:
 861              	.L80:
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 862              		.loc 1 982 0
 863 000e 2368     		ldr	r3, [r4]
 864 0010 1A68     		ldr	r2, [r3]
 865 0012 35EA0202 		bics	r2, r5, r2
 866 0016 11D0     		beq	.L86
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 867              		.loc 1 985 0
 868 0018 B6F1FF3F 		cmp	r6, #-1
 869 001c F7D0     		beq	.L80
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 870              		.loc 1 987 0
 871 001e 26B1     		cbz	r6, .L81
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 872              		.loc 1 987 0 is_stmt 0 discriminator 1
 873 0020 FFF7FEFF 		bl	HAL_GetTick
 874              	.LVL52:
 875 0024 C01B     		subs	r0, r0, r7
 876 0026 8642     		cmp	r6, r0
 877 0028 F1D2     		bcs	.L80
 878              	.L81:
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
ARM GAS  /tmp/cckVjXco.s 			page 52


 879              		.loc 1 990 0 is_stmt 1
 880 002a 236C     		ldr	r3, [r4, #64]
 881 002c 43F00403 		orr	r3, r3, #4
 882 0030 2364     		str	r3, [r4, #64]
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 883              		.loc 1 993 0
 884 0032 0023     		movs	r3, #0
 885 0034 84F83C30 		strb	r3, [r4, #60]
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 886              		.loc 1 995 0
 887 0038 0320     		movs	r0, #3
 888 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 889              	.LVL53:
 890              	.L86:
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 891              		.loc 1 1001 0
 892 003c 012D     		cmp	r5, #1
 893 003e 0CD0     		beq	.L87
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
 894              		.loc 1 1013 0
 895 0040 226C     		ldr	r2, [r4, #64]
 896 0042 42F48062 		orr	r2, r2, #1024
 897 0046 2264     		str	r2, [r4, #64]
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 898              		.loc 1 1015 0
 899 0048 626C     		ldr	r2, [r4, #68]
 900 004a 42F00202 		orr	r2, r2, #2
 901 004e 6264     		str	r2, [r4, #68]
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 902              		.loc 1 1018 0
 903 0050 6FF02002 		mvn	r2, #32
 904 0054 1A60     		str	r2, [r3]
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 905              		.loc 1 1022 0
 906 0056 0020     		movs	r0, #0
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 907              		.loc 1 1023 0
 908 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 909              	.LVL54:
 910              	.L87:
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 911              		.loc 1 1004 0
 912 005a 226C     		ldr	r2, [r4, #64]
 913 005c 42F48032 		orr	r2, r2, #65536
 914 0060 2264     		str	r2, [r4, #64]
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 915              		.loc 1 1007 0
 916 0062 6FF00102 		mvn	r2, #1
 917 0066 1A60     		str	r2, [r3]
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 918              		.loc 1 1022 0
 919 0068 0020     		movs	r0, #0
 920 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 921              		.cfi_endproc
 922              	.LFE148:
 924              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 925              		.align	1
ARM GAS  /tmp/cckVjXco.s 			page 53


 926              		.global	HAL_ADC_Start_IT
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu fpv5-d16
 932              	HAL_ADC_Start_IT:
 933              	.LFB149:
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 934              		.loc 1 1033 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 8
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 939              	.LVL55:
 940 0000 82B0     		sub	sp, sp, #8
 941              	.LCFI11:
 942              		.cfi_def_cfa_offset 8
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 943              		.loc 1 1034 0
 944 0002 0023     		movs	r3, #0
 945 0004 0193     		str	r3, [sp, #4]
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 946              		.loc 1 1041 0
 947 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 948 000a 012B     		cmp	r3, #1
 949 000c 78D0     		beq	.L98
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 950              		.loc 1 1041 0 is_stmt 0 discriminator 2
 951 000e 0123     		movs	r3, #1
 952 0010 80F83C30 		strb	r3, [r0, #60]
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 953              		.loc 1 1046 0 is_stmt 1 discriminator 2
 954 0014 0368     		ldr	r3, [r0]
 955 0016 9A68     		ldr	r2, [r3, #8]
 956 0018 12F0010F 		tst	r2, #1
 957 001c 13D1     		bne	.L90
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 958              		.loc 1 1049 0
 959 001e 9A68     		ldr	r2, [r3, #8]
 960 0020 42F00102 		orr	r2, r2, #1
 961 0024 9A60     		str	r2, [r3, #8]
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 962              		.loc 1 1053 0
 963 0026 3C4B     		ldr	r3, .L107
 964 0028 1B68     		ldr	r3, [r3]
 965 002a 3C4A     		ldr	r2, .L107+4
 966 002c A2FB0323 		umull	r2, r3, r2, r3
 967 0030 9B0C     		lsrs	r3, r3, #18
 968 0032 03EB4303 		add	r3, r3, r3, lsl #1
 969 0036 0193     		str	r3, [sp, #4]
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 970              		.loc 1 1054 0
 971 0038 02E0     		b	.L91
 972              	.L92:
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 973              		.loc 1 1056 0
 974 003a 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cckVjXco.s 			page 54


 975 003c 013B     		subs	r3, r3, #1
 976 003e 0193     		str	r3, [sp, #4]
 977              	.L91:
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 978              		.loc 1 1054 0
 979 0040 019B     		ldr	r3, [sp, #4]
 980 0042 002B     		cmp	r3, #0
 981 0044 F9D1     		bne	.L92
 982              	.L90:
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 983              		.loc 1 1061 0
 984 0046 0268     		ldr	r2, [r0]
 985 0048 9368     		ldr	r3, [r2, #8]
 986 004a 13F0010F 		tst	r3, #1
 987 004e 5AD0     		beq	.L99
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 988              		.loc 1 1066 0
 989 0050 016C     		ldr	r1, [r0, #64]
 990 0052 334B     		ldr	r3, .L107+8
 991 0054 0B40     		ands	r3, r3, r1
 992 0056 43F48073 		orr	r3, r3, #256
 993 005a 0364     		str	r3, [r0, #64]
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 994              		.loc 1 1072 0
 995 005c 5368     		ldr	r3, [r2, #4]
 996 005e 13F4806F 		tst	r3, #1024
 997 0062 05D0     		beq	.L93
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 998              		.loc 1 1074 0
 999 0064 036C     		ldr	r3, [r0, #64]
 1000 0066 23F44053 		bic	r3, r3, #12288
 1001 006a 43F48053 		orr	r3, r3, #4096
 1002 006e 0364     		str	r3, [r0, #64]
 1003              	.L93:
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1004              		.loc 1 1078 0
 1005 0070 036C     		ldr	r3, [r0, #64]
 1006 0072 13F4805F 		tst	r3, #4096
 1007 0076 1ED0     		beq	.L94
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1008              		.loc 1 1081 0
 1009 0078 436C     		ldr	r3, [r0, #68]
 1010 007a 23F00603 		bic	r3, r3, #6
 1011 007e 4364     		str	r3, [r0, #68]
 1012              	.L95:
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1013              		.loc 1 1092 0
 1014 0080 0023     		movs	r3, #0
 1015 0082 80F83C30 		strb	r3, [r0, #60]
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1016              		.loc 1 1096 0
 1017 0086 6FF02203 		mvn	r3, #34
 1018 008a 1360     		str	r3, [r2]
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1019              		.loc 1 1099 0
 1020 008c 0268     		ldr	r2, [r0]
 1021 008e 5168     		ldr	r1, [r2, #4]
ARM GAS  /tmp/cckVjXco.s 			page 55


 1022 0090 244B     		ldr	r3, .L107+12
 1023 0092 0B43     		orrs	r3, r3, r1
 1024 0094 5360     		str	r3, [r2, #4]
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1025              		.loc 1 1102 0
 1026 0096 244B     		ldr	r3, .L107+16
 1027 0098 5B68     		ldr	r3, [r3, #4]
 1028 009a 13F01F0F 		tst	r3, #31
 1029 009e 0DD1     		bne	.L96
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1030              		.loc 1 1105 0
 1031 00a0 0368     		ldr	r3, [r0]
 1032 00a2 9A68     		ldr	r2, [r3, #8]
 1033 00a4 12F0405F 		tst	r2, #805306368
 1034 00a8 2FD1     		bne	.L100
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1035              		.loc 1 1108 0
 1036 00aa 9A68     		ldr	r2, [r3, #8]
 1037 00ac 42F08042 		orr	r2, r2, #1073741824
 1038 00b0 9A60     		str	r2, [r3, #8]
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1039              		.loc 1 1135 0
 1040 00b2 0020     		movs	r0, #0
 1041              	.LVL56:
 1042 00b4 25E0     		b	.L89
 1043              	.LVL57:
 1044              	.L94:
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1045              		.loc 1 1086 0
 1046 00b6 0023     		movs	r3, #0
 1047 00b8 4364     		str	r3, [r0, #68]
 1048 00ba E1E7     		b	.L95
 1049              	.L96:
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1050              		.loc 1 1114 0
 1051 00bc 0368     		ldr	r3, [r0]
 1052 00be 1B4A     		ldr	r2, .L107+20
 1053 00c0 9342     		cmp	r3, r2
 1054 00c2 0AD0     		beq	.L105
 1055              	.L97:
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1056              		.loc 1 1122 0
 1057 00c4 184B     		ldr	r3, .L107+16
 1058 00c6 5B68     		ldr	r3, [r3, #4]
 1059 00c8 13F0100F 		tst	r3, #16
 1060 00cc 1FD1     		bne	.L101
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1061              		.loc 1 1125 0
 1062 00ce 0368     		ldr	r3, [r0]
 1063 00d0 174A     		ldr	r2, .L107+24
 1064 00d2 9342     		cmp	r3, r2
 1065 00d4 0AD0     		beq	.L106
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1066              		.loc 1 1135 0
 1067 00d6 0020     		movs	r0, #0
 1068              	.LVL58:
 1069 00d8 13E0     		b	.L89
ARM GAS  /tmp/cckVjXco.s 			page 56


 1070              	.LVL59:
 1071              	.L105:
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1072              		.loc 1 1114 0 discriminator 1
 1073 00da 9A68     		ldr	r2, [r3, #8]
 1074 00dc 12F0405F 		tst	r2, #805306368
 1075 00e0 F0D1     		bne	.L97
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1076              		.loc 1 1117 0
 1077 00e2 9A68     		ldr	r2, [r3, #8]
 1078 00e4 42F08042 		orr	r2, r2, #1073741824
 1079 00e8 9A60     		str	r2, [r3, #8]
 1080 00ea EBE7     		b	.L97
 1081              	.L106:
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1082              		.loc 1 1125 0 discriminator 1
 1083 00ec 9A68     		ldr	r2, [r3, #8]
 1084 00ee 12F0405F 		tst	r2, #805306368
 1085 00f2 0ED1     		bne	.L103
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 1086              		.loc 1 1128 0
 1087 00f4 9A68     		ldr	r2, [r3, #8]
 1088 00f6 42F08042 		orr	r2, r2, #1073741824
 1089 00fa 9A60     		str	r2, [r3, #8]
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1090              		.loc 1 1135 0
 1091 00fc 0020     		movs	r0, #0
 1092              	.LVL60:
 1093 00fe 00E0     		b	.L89
 1094              	.LVL61:
 1095              	.L98:
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1096              		.loc 1 1041 0
 1097 0100 0220     		movs	r0, #2
 1098              	.LVL62:
 1099              	.L89:
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1100              		.loc 1 1136 0
 1101 0102 02B0     		add	sp, sp, #8
 1102              	.LCFI12:
 1103              		.cfi_remember_state
 1104              		.cfi_def_cfa_offset 0
 1105              		@ sp needed
 1106 0104 7047     		bx	lr
 1107              	.LVL63:
 1108              	.L99:
 1109              	.LCFI13:
 1110              		.cfi_restore_state
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1111              		.loc 1 1135 0
 1112 0106 0020     		movs	r0, #0
 1113              	.LVL64:
 1114 0108 FBE7     		b	.L89
 1115              	.LVL65:
 1116              	.L100:
 1117 010a 0020     		movs	r0, #0
 1118              	.LVL66:
ARM GAS  /tmp/cckVjXco.s 			page 57


 1119 010c F9E7     		b	.L89
 1120              	.LVL67:
 1121              	.L101:
 1122 010e 0020     		movs	r0, #0
 1123              	.LVL68:
 1124 0110 F7E7     		b	.L89
 1125              	.LVL69:
 1126              	.L103:
 1127 0112 0020     		movs	r0, #0
 1128              	.LVL70:
 1129 0114 F5E7     		b	.L89
 1130              	.L108:
 1131 0116 00BF     		.align	2
 1132              	.L107:
 1133 0118 00000000 		.word	SystemCoreClock
 1134 011c 83DE1B43 		.word	1125899907
 1135 0120 FEF8FFFF 		.word	-1794
 1136 0124 20000004 		.word	67108896
 1137 0128 00230140 		.word	1073816320
 1138 012c 00200140 		.word	1073815552
 1139 0130 00220140 		.word	1073816064
 1140              		.cfi_endproc
 1141              	.LFE149:
 1143              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1144              		.align	1
 1145              		.global	HAL_ADC_Stop_IT
 1146              		.syntax unified
 1147              		.thumb
 1148              		.thumb_func
 1149              		.fpu fpv5-d16
 1151              	HAL_ADC_Stop_IT:
 1152              	.LFB150:
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 1153              		.loc 1 1148 0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 0
 1156              		@ frame_needed = 0, uses_anonymous_args = 0
 1157              		@ link register save eliminated.
 1158              	.LVL71:
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1159              		.loc 1 1153 0
 1160 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1161 0004 012B     		cmp	r3, #1
 1162 0006 1BD0     		beq	.L112
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1163              		.loc 1 1153 0 is_stmt 0 discriminator 2
 1164 0008 0123     		movs	r3, #1
 1165 000a 80F83C30 		strb	r3, [r0, #60]
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1166              		.loc 1 1157 0 is_stmt 1 discriminator 2
 1167 000e 0268     		ldr	r2, [r0]
 1168 0010 9368     		ldr	r3, [r2, #8]
 1169 0012 23F00103 		bic	r3, r3, #1
 1170 0016 9360     		str	r3, [r2, #8]
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1171              		.loc 1 1160 0 discriminator 2
 1172 0018 0368     		ldr	r3, [r0]
ARM GAS  /tmp/cckVjXco.s 			page 58


 1173 001a 9A68     		ldr	r2, [r3, #8]
 1174 001c 12F0010F 		tst	r2, #1
 1175 0020 09D1     		bne	.L111
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1176              		.loc 1 1163 0
 1177 0022 5968     		ldr	r1, [r3, #4]
 1178 0024 074A     		ldr	r2, .L113
 1179 0026 0A40     		ands	r2, r2, r1
 1180 0028 5A60     		str	r2, [r3, #4]
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1181              		.loc 1 1166 0
 1182 002a 026C     		ldr	r2, [r0, #64]
 1183 002c 064B     		ldr	r3, .L113+4
 1184 002e 1340     		ands	r3, r3, r2
 1185 0030 43F00103 		orr	r3, r3, #1
 1186 0034 0364     		str	r3, [r0, #64]
 1187              	.L111:
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1188              		.loc 1 1172 0
 1189 0036 0023     		movs	r3, #0
 1190 0038 80F83C30 		strb	r3, [r0, #60]
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1191              		.loc 1 1175 0
 1192 003c 1846     		mov	r0, r3
 1193              	.LVL72:
 1194 003e 7047     		bx	lr
 1195              	.LVL73:
 1196              	.L112:
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1197              		.loc 1 1153 0
 1198 0040 0220     		movs	r0, #2
 1199              	.LVL74:
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1200              		.loc 1 1176 0
 1201 0042 7047     		bx	lr
 1202              	.L114:
 1203              		.align	2
 1204              	.L113:
 1205 0044 DFFFFFFB 		.word	-67108897
 1206 0048 FEEEFFFF 		.word	-4354
 1207              		.cfi_endproc
 1208              	.LFE150:
 1210              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1211              		.align	1
 1212              		.global	HAL_ADC_Start_DMA
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu fpv5-d16
 1218              	HAL_ADC_Start_DMA:
 1219              	.LFB152:
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 1220              		.loc 1 1347 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 8
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224              	.LVL75:
ARM GAS  /tmp/cckVjXco.s 			page 59


 1225 0000 30B5     		push	{r4, r5, lr}
 1226              	.LCFI14:
 1227              		.cfi_def_cfa_offset 12
 1228              		.cfi_offset 4, -12
 1229              		.cfi_offset 5, -8
 1230              		.cfi_offset 14, -4
 1231 0002 83B0     		sub	sp, sp, #12
 1232              	.LCFI15:
 1233              		.cfi_def_cfa_offset 24
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1234              		.loc 1 1348 0
 1235 0004 0023     		movs	r3, #0
 1236 0006 0193     		str	r3, [sp, #4]
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1237              		.loc 1 1355 0
 1238 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1239 000c 012B     		cmp	r3, #1
 1240 000e 00F09180 		beq	.L125
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1241              		.loc 1 1355 0 is_stmt 0 discriminator 2
 1242 0012 0123     		movs	r3, #1
 1243 0014 80F83C30 		strb	r3, [r0, #60]
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 1244              		.loc 1 1360 0 is_stmt 1 discriminator 2
 1245 0018 0368     		ldr	r3, [r0]
 1246 001a 9C68     		ldr	r4, [r3, #8]
 1247 001c 14F0010F 		tst	r4, #1
 1248 0020 13D1     		bne	.L117
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1249              		.loc 1 1363 0
 1250 0022 9C68     		ldr	r4, [r3, #8]
 1251 0024 44F00104 		orr	r4, r4, #1
 1252 0028 9C60     		str	r4, [r3, #8]
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 1253              		.loc 1 1367 0
 1254 002a 484B     		ldr	r3, .L134
 1255 002c 1C68     		ldr	r4, [r3]
 1256 002e 484B     		ldr	r3, .L134+4
 1257 0030 A3FB0434 		umull	r3, r4, r3, r4
 1258 0034 A40C     		lsrs	r4, r4, #18
 1259 0036 04EB4404 		add	r4, r4, r4, lsl #1
 1260 003a 0194     		str	r4, [sp, #4]
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1261              		.loc 1 1368 0
 1262 003c 02E0     		b	.L118
 1263              	.L119:
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1264              		.loc 1 1370 0
 1265 003e 019C     		ldr	r4, [sp, #4]
 1266 0040 013C     		subs	r4, r4, #1
 1267 0042 0194     		str	r4, [sp, #4]
 1268              	.L118:
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1269              		.loc 1 1368 0
 1270 0044 019C     		ldr	r4, [sp, #4]
 1271 0046 002C     		cmp	r4, #0
 1272 0048 F9D1     		bne	.L119
ARM GAS  /tmp/cckVjXco.s 			page 60


 1273              	.L117:
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1274              		.loc 1 1375 0
 1275 004a 0368     		ldr	r3, [r0]
 1276 004c 9C68     		ldr	r4, [r3, #8]
 1277 004e 14F0010F 		tst	r4, #1
 1278 0052 72D0     		beq	.L126
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1279              		.loc 1 1380 0
 1280 0054 056C     		ldr	r5, [r0, #64]
 1281 0056 3F4C     		ldr	r4, .L134+8
 1282 0058 2C40     		ands	r4, r4, r5
 1283 005a 44F48074 		orr	r4, r4, #256
 1284 005e 0464     		str	r4, [r0, #64]
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1285              		.loc 1 1386 0
 1286 0060 5B68     		ldr	r3, [r3, #4]
 1287 0062 13F4806F 		tst	r3, #1024
 1288 0066 05D0     		beq	.L120
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1289              		.loc 1 1388 0
 1290 0068 036C     		ldr	r3, [r0, #64]
 1291 006a 23F44053 		bic	r3, r3, #12288
 1292 006e 43F48053 		orr	r3, r3, #4096
 1293 0072 0364     		str	r3, [r0, #64]
 1294              	.L120:
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1295              		.loc 1 1392 0
 1296 0074 036C     		ldr	r3, [r0, #64]
 1297 0076 13F4805F 		tst	r3, #4096
 1298 007a 36D0     		beq	.L121
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1299              		.loc 1 1395 0
 1300 007c 436C     		ldr	r3, [r0, #68]
 1301 007e 23F00603 		bic	r3, r3, #6
 1302 0082 4364     		str	r3, [r0, #68]
 1303              	.L122:
 1304 0084 1346     		mov	r3, r2
 1305 0086 0446     		mov	r4, r0
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1306              		.loc 1 1406 0
 1307 0088 0022     		movs	r2, #0
 1308              	.LVL76:
 1309 008a 80F83C20 		strb	r2, [r0, #60]
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1310              		.loc 1 1409 0
 1311 008e 826B     		ldr	r2, [r0, #56]
 1312 0090 3148     		ldr	r0, .L134+12
 1313              	.LVL77:
 1314 0092 D063     		str	r0, [r2, #60]
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1315              		.loc 1 1412 0
 1316 0094 A26B     		ldr	r2, [r4, #56]
 1317 0096 3148     		ldr	r0, .L134+16
 1318 0098 1064     		str	r0, [r2, #64]
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1319              		.loc 1 1415 0
ARM GAS  /tmp/cckVjXco.s 			page 61


 1320 009a A26B     		ldr	r2, [r4, #56]
 1321 009c 3048     		ldr	r0, .L134+20
 1322 009e D064     		str	r0, [r2, #76]
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1323              		.loc 1 1423 0
 1324 00a0 2268     		ldr	r2, [r4]
 1325 00a2 6FF02200 		mvn	r0, #34
 1326 00a6 1060     		str	r0, [r2]
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1327              		.loc 1 1426 0
 1328 00a8 2568     		ldr	r5, [r4]
 1329 00aa 6868     		ldr	r0, [r5, #4]
 1330 00ac 40F08060 		orr	r0, r0, #67108864
 1331 00b0 6860     		str	r0, [r5, #4]
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1332              		.loc 1 1429 0
 1333 00b2 2568     		ldr	r5, [r4]
 1334 00b4 A868     		ldr	r0, [r5, #8]
 1335 00b6 40F48070 		orr	r0, r0, #256
 1336 00ba A860     		str	r0, [r5, #8]
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1337              		.loc 1 1432 0
 1338 00bc 2068     		ldr	r0, [r4]
 1339 00be 0A46     		mov	r2, r1
 1340 00c0 00F14C01 		add	r1, r0, #76
 1341              	.LVL78:
 1342 00c4 A06B     		ldr	r0, [r4, #56]
 1343 00c6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1344              	.LVL79:
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1345              		.loc 1 1435 0
 1346 00ca 264B     		ldr	r3, .L134+24
 1347 00cc 5B68     		ldr	r3, [r3, #4]
 1348 00ce 13F01F0F 		tst	r3, #31
 1349 00d2 0DD1     		bne	.L123
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1350              		.loc 1 1438 0
 1351 00d4 2368     		ldr	r3, [r4]
 1352 00d6 9A68     		ldr	r2, [r3, #8]
 1353 00d8 12F0405F 		tst	r2, #805306368
 1354 00dc 2FD1     		bne	.L127
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1355              		.loc 1 1441 0
 1356 00de 9A68     		ldr	r2, [r3, #8]
 1357 00e0 42F08042 		orr	r2, r2, #1073741824
 1358 00e4 9A60     		str	r2, [r3, #8]
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1359              		.loc 1 1467 0
 1360 00e6 0020     		movs	r0, #0
 1361 00e8 25E0     		b	.L116
 1362              	.LVL80:
 1363              	.L121:
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1364              		.loc 1 1400 0
 1365 00ea 0023     		movs	r3, #0
 1366 00ec 4364     		str	r3, [r0, #68]
 1367 00ee C9E7     		b	.L122
ARM GAS  /tmp/cckVjXco.s 			page 62


 1368              	.LVL81:
 1369              	.L123:
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1370              		.loc 1 1447 0
 1371 00f0 2368     		ldr	r3, [r4]
 1372 00f2 1D4A     		ldr	r2, .L134+28
 1373 00f4 9342     		cmp	r3, r2
 1374 00f6 0AD0     		beq	.L132
 1375              	.L124:
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1376              		.loc 1 1454 0
 1377 00f8 1A4B     		ldr	r3, .L134+24
 1378 00fa 5B68     		ldr	r3, [r3, #4]
 1379 00fc 13F0100F 		tst	r3, #16
 1380 0100 1FD1     		bne	.L128
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1381              		.loc 1 1457 0
 1382 0102 2368     		ldr	r3, [r4]
 1383 0104 194A     		ldr	r2, .L134+32
 1384 0106 9342     		cmp	r3, r2
 1385 0108 0AD0     		beq	.L133
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1386              		.loc 1 1467 0
 1387 010a 0020     		movs	r0, #0
 1388 010c 13E0     		b	.L116
 1389              	.L132:
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1390              		.loc 1 1447 0 discriminator 1
 1391 010e 9A68     		ldr	r2, [r3, #8]
 1392 0110 12F0405F 		tst	r2, #805306368
 1393 0114 F0D1     		bne	.L124
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1394              		.loc 1 1450 0
 1395 0116 9A68     		ldr	r2, [r3, #8]
 1396 0118 42F08042 		orr	r2, r2, #1073741824
 1397 011c 9A60     		str	r2, [r3, #8]
 1398 011e EBE7     		b	.L124
 1399              	.L133:
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1400              		.loc 1 1457 0 discriminator 1
 1401 0120 9A68     		ldr	r2, [r3, #8]
 1402 0122 12F0405F 		tst	r2, #805306368
 1403 0126 0ED1     		bne	.L130
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 1404              		.loc 1 1460 0
 1405 0128 9A68     		ldr	r2, [r3, #8]
 1406 012a 42F08042 		orr	r2, r2, #1073741824
 1407 012e 9A60     		str	r2, [r3, #8]
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1408              		.loc 1 1467 0
 1409 0130 0020     		movs	r0, #0
 1410 0132 00E0     		b	.L116
 1411              	.LVL82:
 1412              	.L125:
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1413              		.loc 1 1355 0
 1414 0134 0220     		movs	r0, #2
ARM GAS  /tmp/cckVjXco.s 			page 63


 1415              	.LVL83:
 1416              	.L116:
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1417              		.loc 1 1468 0
 1418 0136 03B0     		add	sp, sp, #12
 1419              	.LCFI16:
 1420              		.cfi_remember_state
 1421              		.cfi_def_cfa_offset 12
 1422              		@ sp needed
 1423 0138 30BD     		pop	{r4, r5, pc}
 1424              	.LVL84:
 1425              	.L126:
 1426              	.LCFI17:
 1427              		.cfi_restore_state
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1428              		.loc 1 1467 0
 1429 013a 0020     		movs	r0, #0
 1430              	.LVL85:
 1431 013c FBE7     		b	.L116
 1432              	.LVL86:
 1433              	.L127:
 1434 013e 0020     		movs	r0, #0
 1435 0140 F9E7     		b	.L116
 1436              	.L128:
 1437 0142 0020     		movs	r0, #0
 1438 0144 F7E7     		b	.L116
 1439              	.L130:
 1440 0146 0020     		movs	r0, #0
 1441 0148 F5E7     		b	.L116
 1442              	.L135:
 1443 014a 00BF     		.align	2
 1444              	.L134:
 1445 014c 00000000 		.word	SystemCoreClock
 1446 0150 83DE1B43 		.word	1125899907
 1447 0154 FEF8FFFF 		.word	-1794
 1448 0158 00000000 		.word	ADC_DMAConvCplt
 1449 015c 00000000 		.word	ADC_DMAHalfConvCplt
 1450 0160 00000000 		.word	ADC_DMAError
 1451 0164 00230140 		.word	1073816320
 1452 0168 00200140 		.word	1073815552
 1453 016c 00220140 		.word	1073816064
 1454              		.cfi_endproc
 1455              	.LFE152:
 1457              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1458              		.align	1
 1459              		.global	HAL_ADC_Stop_DMA
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu fpv5-d16
 1465              	HAL_ADC_Stop_DMA:
 1466              	.LFB153:
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1467              		.loc 1 1477 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cckVjXco.s 			page 64


 1471              	.LVL87:
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1472              		.loc 1 1484 0
 1473 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1474 0004 012B     		cmp	r3, #1
 1475 0006 26D0     		beq	.L139
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1476              		.loc 1 1477 0 discriminator 2
 1477 0008 10B5     		push	{r4, lr}
 1478              	.LCFI18:
 1479              		.cfi_def_cfa_offset 8
 1480              		.cfi_offset 4, -8
 1481              		.cfi_offset 14, -4
 1482 000a 0446     		mov	r4, r0
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1483              		.loc 1 1484 0 discriminator 2
 1484 000c 0123     		movs	r3, #1
 1485 000e 80F83C30 		strb	r3, [r0, #60]
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1486              		.loc 1 1488 0 discriminator 2
 1487 0012 0268     		ldr	r2, [r0]
 1488 0014 9368     		ldr	r3, [r2, #8]
 1489 0016 23F00103 		bic	r3, r3, #1
 1490 001a 9360     		str	r3, [r2, #8]
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1491              		.loc 1 1491 0 discriminator 2
 1492 001c 0368     		ldr	r3, [r0]
 1493 001e 9A68     		ldr	r2, [r3, #8]
 1494 0020 12F0010F 		tst	r2, #1
 1495 0024 04D0     		beq	.L145
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1496              		.loc 1 1478 0
 1497 0026 0020     		movs	r0, #0
 1498              	.LVL88:
 1499              	.L138:
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1500              		.loc 1 1510 0
 1501 0028 0023     		movs	r3, #0
 1502 002a 84F83C30 		strb	r3, [r4, #60]
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1503              		.loc 1 1513 0
 1504 002e 10BD     		pop	{r4, pc}
 1505              	.LVL89:
 1506              	.L145:
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1507              		.loc 1 1494 0
 1508 0030 9A68     		ldr	r2, [r3, #8]
 1509 0032 22F48072 		bic	r2, r2, #256
 1510 0036 9A60     		str	r2, [r3, #8]
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1511              		.loc 1 1498 0
 1512 0038 806B     		ldr	r0, [r0, #56]
 1513              	.LVL90:
 1514 003a FFF7FEFF 		bl	HAL_DMA_Abort
 1515              	.LVL91:
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1516              		.loc 1 1501 0
ARM GAS  /tmp/cckVjXco.s 			page 65


 1517 003e 2268     		ldr	r2, [r4]
 1518 0040 5368     		ldr	r3, [r2, #4]
 1519 0042 23F08063 		bic	r3, r3, #67108864
 1520 0046 5360     		str	r3, [r2, #4]
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1521              		.loc 1 1504 0
 1522 0048 226C     		ldr	r2, [r4, #64]
 1523 004a 044B     		ldr	r3, .L146
 1524 004c 1340     		ands	r3, r3, r2
 1525 004e 43F00103 		orr	r3, r3, #1
 1526 0052 2364     		str	r3, [r4, #64]
 1527 0054 E8E7     		b	.L138
 1528              	.LVL92:
 1529              	.L139:
 1530              	.LCFI19:
 1531              		.cfi_def_cfa_offset 0
 1532              		.cfi_restore 4
 1533              		.cfi_restore 14
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1534              		.loc 1 1484 0
 1535 0056 0220     		movs	r0, #2
 1536              	.LVL93:
 1537 0058 7047     		bx	lr
 1538              	.L147:
 1539 005a 00BF     		.align	2
 1540              	.L146:
 1541 005c FEEEFFFF 		.word	-4354
 1542              		.cfi_endproc
 1543              	.LFE153:
 1545              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1546              		.align	1
 1547              		.global	HAL_ADC_GetValue
 1548              		.syntax unified
 1549              		.thumb
 1550              		.thumb_func
 1551              		.fpu fpv5-d16
 1553              	HAL_ADC_GetValue:
 1554              	.LFB154:
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
 1555              		.loc 1 1523 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 0
 1558              		@ frame_needed = 0, uses_anonymous_args = 0
 1559              		@ link register save eliminated.
 1560              	.LVL94:
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1561              		.loc 1 1525 0
 1562 0000 0368     		ldr	r3, [r0]
 1563 0002 D86C     		ldr	r0, [r3, #76]
 1564              	.LVL95:
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1565              		.loc 1 1526 0
 1566 0004 7047     		bx	lr
 1567              		.cfi_endproc
 1568              	.LFE154:
 1570              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1571              		.align	1
ARM GAS  /tmp/cckVjXco.s 			page 66


 1572              		.weak	HAL_ADC_ConvCpltCallback
 1573              		.syntax unified
 1574              		.thumb
 1575              		.thumb_func
 1576              		.fpu fpv5-d16
 1578              	HAL_ADC_ConvCpltCallback:
 1579              	.LFB155:
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1580              		.loc 1 1535 0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 0
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 1584              		@ link register save eliminated.
 1585              	.LVL96:
 1586 0000 7047     		bx	lr
 1587              		.cfi_endproc
 1588              	.LFE155:
 1590              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1591              		.align	1
 1592              		.weak	HAL_ADC_ConvHalfCpltCallback
 1593              		.syntax unified
 1594              		.thumb
 1595              		.thumb_func
 1596              		.fpu fpv5-d16
 1598              	HAL_ADC_ConvHalfCpltCallback:
 1599              	.LFB156:
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1600              		.loc 1 1550 0
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 0
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 1604              		@ link register save eliminated.
 1605              	.LVL97:
 1606 0000 7047     		bx	lr
 1607              		.cfi_endproc
 1608              	.LFE156:
 1610              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1611              		.align	1
 1612              		.syntax unified
 1613              		.thumb
 1614              		.thumb_func
 1615              		.fpu fpv5-d16
 1617              	ADC_DMAHalfConvCplt:
 1618              	.LFB165:
1930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
1934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
1939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/cckVjXco.s 			page 67


1943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
1944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
1945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update ADC state machine */
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, there is no independent flag of end of sequence.   */
1952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       of end of sequence.                                            */
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
1957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
1958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
1959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */
1976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
1978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
1983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
1985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
1987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
1989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Call DMA error callback */
1996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
1997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
ARM GAS  /tmp/cckVjXco.s 			page 68


2000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
2001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
2002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
2005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
2006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 1619              		.loc 1 2008 0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 0
 1622              		@ frame_needed = 0, uses_anonymous_args = 0
 1623              	.LVL98:
 1624              		.loc 1 2008 0
 1625 0000 08B5     		push	{r3, lr}
 1626              	.LCFI20:
 1627              		.cfi_def_cfa_offset 8
 1628              		.cfi_offset 3, -8
 1629              		.cfi_offset 14, -4
 1630              	.LVL99:
2009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    /* Half conversion callback */
2011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
2013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
2014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 1631              		.loc 1 2014 0
 1632 0002 806B     		ldr	r0, [r0, #56]
 1633              	.LVL100:
 1634 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1635              	.LVL101:
 1636 0008 08BD     		pop	{r3, pc}
 1637              		.cfi_endproc
 1638              	.LFE165:
 1640              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1641              		.align	1
 1642              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1643              		.syntax unified
 1644              		.thumb
 1645              		.thumb_func
 1646              		.fpu fpv5-d16
 1648              	HAL_ADC_LevelOutOfWindowCallback:
 1649              	.LFB157:
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1650              		.loc 1 1565 0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 1654              		@ link register save eliminated.
 1655              	.LVL102:
 1656 0000 7047     		bx	lr
 1657              		.cfi_endproc
 1658              	.LFE157:
 1660              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1661              		.align	1
 1662              		.weak	HAL_ADC_ErrorCallback
ARM GAS  /tmp/cckVjXco.s 			page 69


 1663              		.syntax unified
 1664              		.thumb
 1665              		.thumb_func
 1666              		.fpu fpv5-d16
 1668              	HAL_ADC_ErrorCallback:
 1669              	.LFB158:
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1670              		.loc 1 1586 0
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 0
 1673              		@ frame_needed = 0, uses_anonymous_args = 0
 1674              		@ link register save eliminated.
 1675              	.LVL103:
 1676 0000 7047     		bx	lr
 1677              		.cfi_endproc
 1678              	.LFE158:
 1680              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1681              		.align	1
 1682              		.global	HAL_ADC_IRQHandler
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1686              		.fpu fpv5-d16
 1688              	HAL_ADC_IRQHandler:
 1689              	.LFB151:
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 1690              		.loc 1 1185 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 0
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694              	.LVL104:
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 1695              		.loc 1 1185 0
 1696 0000 38B5     		push	{r3, r4, r5, lr}
 1697              	.LCFI21:
 1698              		.cfi_def_cfa_offset 16
 1699              		.cfi_offset 3, -16
 1700              		.cfi_offset 4, -12
 1701              		.cfi_offset 5, -8
 1702              		.cfi_offset 14, -4
 1703 0002 0446     		mov	r4, r0
 1704              	.LVL105:
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 1705              		.loc 1 1193 0
 1706 0004 0268     		ldr	r2, [r0]
 1707 0006 1168     		ldr	r1, [r2]
 1708              	.LVL106:
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 1709              		.loc 1 1194 0
 1710 0008 5368     		ldr	r3, [r2, #4]
 1711 000a C3F34013 		ubfx	r3, r3, #5, #1
 1712              	.LVL107:
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1713              		.loc 1 1196 0
 1714 000e 13EA5103 		ands	r3, r3, r1, lsr #1
 1715              	.LVL108:
 1716 0012 2CD0     		beq	.L156
ARM GAS  /tmp/cckVjXco.s 			page 70


1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1717              		.loc 1 1199 0
 1718 0014 036C     		ldr	r3, [r0, #64]
 1719 0016 13F0100F 		tst	r3, #16
 1720 001a 03D1     		bne	.L157
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1721              		.loc 1 1202 0
 1722 001c 036C     		ldr	r3, [r0, #64]
 1723 001e 43F40073 		orr	r3, r3, #512
 1724 0022 0364     		str	r3, [r0, #64]
 1725              	.L157:
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1726              		.loc 1 1211 0
 1727 0024 9368     		ldr	r3, [r2, #8]
 1728 0026 13F0405F 		tst	r3, #805306368
 1729 002a 19D1     		bne	.L158
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1730              		.loc 1 1212 0 discriminator 1
 1731 002c A369     		ldr	r3, [r4, #24]
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1732              		.loc 1 1211 0 discriminator 1
 1733 002e BBB9     		cbnz	r3, .L158
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1734              		.loc 1 1213 0
 1735 0030 D36A     		ldr	r3, [r2, #44]
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1736              		.loc 1 1212 0
 1737 0032 13F4700F 		tst	r3, #15728640
 1738 0036 03D0     		beq	.L159
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1739              		.loc 1 1214 0
 1740 0038 9368     		ldr	r3, [r2, #8]
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1741              		.loc 1 1213 0
 1742 003a 13F4806F 		tst	r3, #1024
 1743 003e 0FD1     		bne	.L158
 1744              	.L159:
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1745              		.loc 1 1220 0
 1746 0040 5368     		ldr	r3, [r2, #4]
 1747 0042 23F02003 		bic	r3, r3, #32
 1748 0046 5360     		str	r3, [r2, #4]
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1749              		.loc 1 1223 0
 1750 0048 236C     		ldr	r3, [r4, #64]
 1751 004a 23F48073 		bic	r3, r3, #256
 1752 004e 2364     		str	r3, [r4, #64]
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1753              		.loc 1 1225 0
 1754 0050 236C     		ldr	r3, [r4, #64]
 1755 0052 13F4805F 		tst	r3, #4096
 1756 0056 03D1     		bne	.L158
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1757              		.loc 1 1227 0
 1758 0058 236C     		ldr	r3, [r4, #64]
 1759 005a 43F00103 		orr	r3, r3, #1
 1760 005e 2364     		str	r3, [r4, #64]
ARM GAS  /tmp/cckVjXco.s 			page 71


 1761              	.L158:
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1762              		.loc 1 1235 0
 1763 0060 2046     		mov	r0, r4
 1764              	.LVL109:
 1765 0062 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1766              	.LVL110:
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 1767              		.loc 1 1239 0
 1768 0066 2368     		ldr	r3, [r4]
 1769 0068 6FF01202 		mvn	r2, #18
 1770 006c 1A60     		str	r2, [r3]
 1771              	.L156:
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 1772              		.loc 1 1242 0
 1773 006e 2368     		ldr	r3, [r4]
 1774 0070 1968     		ldr	r1, [r3]
 1775              	.LVL111:
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 1776              		.loc 1 1243 0
 1777 0072 5A68     		ldr	r2, [r3, #4]
 1778 0074 C2F3C012 		ubfx	r2, r2, #7, #1
 1779              	.LVL112:
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1780              		.loc 1 1245 0
 1781 0078 12EA9102 		ands	r2, r2, r1, lsr #2
 1782              	.LVL113:
 1783 007c 34D0     		beq	.L160
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1784              		.loc 1 1248 0
 1785 007e 226C     		ldr	r2, [r4, #64]
 1786 0080 12F0100F 		tst	r2, #16
 1787 0084 03D1     		bne	.L161
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1788              		.loc 1 1251 0
 1789 0086 226C     		ldr	r2, [r4, #64]
 1790 0088 42F40052 		orr	r2, r2, #8192
 1791 008c 2264     		str	r2, [r4, #64]
 1792              	.L161:
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 1793              		.loc 1 1258 0
 1794 008e 9A68     		ldr	r2, [r3, #8]
 1795 0090 12F4401F 		tst	r2, #3145728
 1796 0094 21D1     		bne	.L162
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 1797              		.loc 1 1259 0 discriminator 1
 1798 0096 9A6B     		ldr	r2, [r3, #56]
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 1799              		.loc 1 1258 0 discriminator 1
 1800 0098 12F4401F 		tst	r2, #3145728
 1801 009c 03D0     		beq	.L163
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1802              		.loc 1 1260 0
 1803 009e 9A68     		ldr	r2, [r3, #8]
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 1804              		.loc 1 1259 0
 1805 00a0 12F4806F 		tst	r2, #1024
ARM GAS  /tmp/cckVjXco.s 			page 72


 1806 00a4 19D1     		bne	.L162
 1807              	.L163:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 1808              		.loc 1 1261 0
 1809 00a6 5A68     		ldr	r2, [r3, #4]
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1810              		.loc 1 1260 0
 1811 00a8 12F4806F 		tst	r2, #1024
 1812 00ac 15D1     		bne	.L162
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
 1813              		.loc 1 1262 0
 1814 00ae 9A68     		ldr	r2, [r3, #8]
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 1815              		.loc 1 1261 0
 1816 00b0 12F0405F 		tst	r2, #805306368
 1817 00b4 11D1     		bne	.L162
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1818              		.loc 1 1263 0
 1819 00b6 A269     		ldr	r2, [r4, #24]
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
 1820              		.loc 1 1262 0
 1821 00b8 7AB9     		cbnz	r2, .L162
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1822              		.loc 1 1266 0
 1823 00ba 5A68     		ldr	r2, [r3, #4]
 1824 00bc 22F08002 		bic	r2, r2, #128
 1825 00c0 5A60     		str	r2, [r3, #4]
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1826              		.loc 1 1269 0
 1827 00c2 236C     		ldr	r3, [r4, #64]
 1828 00c4 23F48053 		bic	r3, r3, #4096
 1829 00c8 2364     		str	r3, [r4, #64]
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       { 
 1830              		.loc 1 1271 0
 1831 00ca 236C     		ldr	r3, [r4, #64]
 1832 00cc 13F4807F 		tst	r3, #256
 1833 00d0 03D1     		bne	.L162
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1834              		.loc 1 1273 0
 1835 00d2 236C     		ldr	r3, [r4, #64]
 1836 00d4 43F00103 		orr	r3, r3, #1
 1837 00d8 2364     		str	r3, [r4, #64]
 1838              	.L162:
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1839              		.loc 1 1281 0
 1840 00da 2046     		mov	r0, r4
 1841 00dc FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1842              	.LVL114:
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 1843              		.loc 1 1285 0
 1844 00e0 2368     		ldr	r3, [r4]
 1845 00e2 6FF00C02 		mvn	r2, #12
 1846 00e6 1A60     		str	r2, [r3]
 1847              	.L160:
1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 1848              		.loc 1 1288 0
 1849 00e8 2268     		ldr	r2, [r4]
ARM GAS  /tmp/cckVjXco.s 			page 73


 1850 00ea 1168     		ldr	r1, [r2]
 1851              	.LVL115:
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Analog watchdog flag */
 1852              		.loc 1 1289 0
 1853 00ec 5368     		ldr	r3, [r2, #4]
 1854 00ee C3F38013 		ubfx	r3, r3, #6, #1
 1855              	.LVL116:
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1856              		.loc 1 1291 0
 1857 00f2 1942     		tst	r1, r3
 1858 00f4 03D0     		beq	.L164
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1859              		.loc 1 1293 0
 1860 00f6 1368     		ldr	r3, [r2]
 1861              	.LVL117:
 1862 00f8 13F0010F 		tst	r3, #1
 1863 00fc 08D1     		bne	.L167
 1864              	.LVL118:
 1865              	.L164:
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 1866              		.loc 1 1311 0
 1867 00fe 2268     		ldr	r2, [r4]
 1868 0100 1168     		ldr	r1, [r2]
 1869              	.LVL119:
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Overrun flag */
 1870              		.loc 1 1312 0
 1871 0102 5368     		ldr	r3, [r2, #4]
 1872 0104 C3F38063 		ubfx	r3, r3, #26, #1
 1873              	.LVL120:
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1874              		.loc 1 1314 0
 1875 0108 13EA5113 		ands	r3, r3, r1, lsr #5
 1876              	.LVL121:
 1877 010c 0CD1     		bne	.L168
 1878              	.LVL122:
 1879              	.L155:
 1880 010e 38BD     		pop	{r3, r4, r5, pc}
 1881              	.LVL123:
 1882              	.L167:
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1883              		.loc 1 1296 0
 1884 0110 236C     		ldr	r3, [r4, #64]
 1885 0112 43F48033 		orr	r3, r3, #65536
 1886 0116 2364     		str	r3, [r4, #64]
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1887              		.loc 1 1302 0
 1888 0118 2046     		mov	r0, r4
 1889 011a FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1890              	.LVL124:
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1891              		.loc 1 1307 0
 1892 011e 2368     		ldr	r3, [r4]
 1893 0120 6FF00102 		mvn	r2, #1
 1894 0124 1A60     		str	r2, [r3]
 1895 0126 EAE7     		b	.L164
 1896              	.LVL125:
 1897              	.L168:
ARM GAS  /tmp/cckVjXco.s 			page 74


1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1898              		.loc 1 1321 0
 1899 0128 636C     		ldr	r3, [r4, #68]
 1900 012a 43F00203 		orr	r3, r3, #2
 1901 012e 6364     		str	r3, [r4, #68]
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1902              		.loc 1 1324 0
 1903 0130 6FF02005 		mvn	r5, #32
 1904 0134 1560     		str	r5, [r2]
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1905              		.loc 1 1330 0
 1906 0136 2046     		mov	r0, r4
 1907 0138 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1908              	.LVL126:
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 1909              		.loc 1 1334 0
 1910 013c 2368     		ldr	r3, [r4]
 1911 013e 1D60     		str	r5, [r3]
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1912              		.loc 1 1336 0
 1913 0140 E5E7     		b	.L155
 1914              		.cfi_endproc
 1915              	.LFE151:
 1917              		.section	.text.ADC_DMAError,"ax",%progbits
 1918              		.align	1
 1919              		.syntax unified
 1920              		.thumb
 1921              		.thumb_func
 1922              		.fpu fpv5-d16
 1924              	ADC_DMAError:
 1925              	.LFB166:
2015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
2017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
2018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
2019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA error callback 
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
2022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
2023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
2024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 1926              		.loc 1 2025 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930              	.LVL127:
 1931 0000 08B5     		push	{r3, lr}
 1932              	.LCFI22:
 1933              		.cfi_def_cfa_offset 8
 1934              		.cfi_offset 3, -8
 1935              		.cfi_offset 14, -4
2026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1936              		.loc 1 2026 0
 1937 0002 806B     		ldr	r0, [r0, #56]
 1938              	.LVL128:
2027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->State= HAL_ADC_STATE_ERROR_DMA;
ARM GAS  /tmp/cckVjXco.s 			page 75


 1939              		.loc 1 2027 0
 1940 0004 4023     		movs	r3, #64
 1941 0006 0364     		str	r3, [r0, #64]
2028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 1942              		.loc 1 2029 0
 1943 0008 436C     		ldr	r3, [r0, #68]
 1944 000a 43F00403 		orr	r3, r3, #4
 1945 000e 4364     		str	r3, [r0, #68]
2030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Error callback */
2031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
2034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 1946              		.loc 1 2034 0
 1947 0010 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1948              	.LVL129:
 1949 0014 08BD     		pop	{r3, pc}
 1950              		.cfi_endproc
 1951              	.LFE166:
 1953              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1954              		.align	1
 1955              		.syntax unified
 1956              		.thumb
 1957              		.thumb_func
 1958              		.fpu fpv5-d16
 1960              	ADC_DMAConvCplt:
 1961              	.LFB164:
1939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1962              		.loc 1 1939 0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 0, uses_anonymous_args = 0
 1966              	.LVL130:
 1967 0000 08B5     		push	{r3, lr}
 1968              	.LCFI23:
 1969              		.cfi_def_cfa_offset 8
 1970              		.cfi_offset 3, -8
 1971              		.cfi_offset 14, -4
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1972              		.loc 1 1941 0
 1973 0002 836B     		ldr	r3, [r0, #56]
 1974              	.LVL131:
1944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1975              		.loc 1 1944 0
 1976 0004 1A6C     		ldr	r2, [r3, #64]
 1977 0006 12F0500F 		tst	r2, #80
 1978 000a 26D1     		bne	.L172
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1979              		.loc 1 1947 0
 1980 000c 1A6C     		ldr	r2, [r3, #64]
 1981 000e 42F40072 		orr	r2, r2, #512
 1982 0012 1A64     		str	r2, [r3, #64]
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1983              		.loc 1 1955 0
 1984 0014 1A68     		ldr	r2, [r3]
 1985 0016 9168     		ldr	r1, [r2, #8]
ARM GAS  /tmp/cckVjXco.s 			page 76


 1986 0018 11F0405F 		tst	r1, #805306368
 1987 001c 19D1     		bne	.L173
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1988              		.loc 1 1956 0 discriminator 1
 1989 001e 9969     		ldr	r1, [r3, #24]
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1990              		.loc 1 1955 0 discriminator 1
 1991 0020 B9B9     		cbnz	r1, .L173
1957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1992              		.loc 1 1957 0
 1993 0022 D16A     		ldr	r1, [r2, #44]
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1994              		.loc 1 1956 0
 1995 0024 11F4700F 		tst	r1, #15728640
 1996 0028 03D0     		beq	.L174
1958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1997              		.loc 1 1958 0
 1998 002a 9168     		ldr	r1, [r2, #8]
1957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1999              		.loc 1 1957 0
 2000 002c 11F4806F 		tst	r1, #1024
 2001 0030 0FD1     		bne	.L173
 2002              	.L174:
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 2003              		.loc 1 1964 0
 2004 0032 5168     		ldr	r1, [r2, #4]
 2005 0034 21F02001 		bic	r1, r1, #32
 2006 0038 5160     		str	r1, [r2, #4]
1967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 2007              		.loc 1 1967 0
 2008 003a 1A6C     		ldr	r2, [r3, #64]
 2009 003c 22F48072 		bic	r2, r2, #256
 2010 0040 1A64     		str	r2, [r3, #64]
1969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 2011              		.loc 1 1969 0
 2012 0042 1A6C     		ldr	r2, [r3, #64]
 2013 0044 12F4805F 		tst	r2, #4096
 2014 0048 03D1     		bne	.L173
1971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 2015              		.loc 1 1971 0
 2016 004a 1A6C     		ldr	r2, [r3, #64]
 2017 004c 42F00102 		orr	r2, r2, #1
 2018 0050 1A64     		str	r2, [r3, #64]
 2019              	.L173:
1979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2020              		.loc 1 1979 0
 2021 0052 1846     		mov	r0, r3
 2022              	.LVL132:
 2023 0054 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2024              	.LVL133:
 2025 0058 08BD     		pop	{r3, pc}
 2026              	.LVL134:
 2027              	.L172:
1984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 2028              		.loc 1 1984 0
 2029 005a 1A6C     		ldr	r2, [r3, #64]
 2030 005c 12F0100F 		tst	r2, #16
ARM GAS  /tmp/cckVjXco.s 			page 77


 2031 0060 03D1     		bne	.L178
1996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 2032              		.loc 1 1996 0
 2033 0062 9B6B     		ldr	r3, [r3, #56]
 2034              	.LVL135:
 2035 0064 DB6C     		ldr	r3, [r3, #76]
 2036 0066 9847     		blx	r3
 2037              	.LVL136:
 2038 0068 08BD     		pop	{r3, pc}
 2039              	.LVL137:
 2040              	.L178:
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2041              		.loc 1 1990 0
 2042 006a 1846     		mov	r0, r3
 2043              	.LVL138:
 2044 006c FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2045              	.LVL139:
 2046 0070 08BD     		pop	{r3, pc}
 2047              		.cfi_endproc
 2048              	.LFE164:
 2050              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2051              		.align	1
 2052              		.global	HAL_ADC_ConfigChannel
 2053              		.syntax unified
 2054              		.thumb
 2055              		.thumb_func
 2056              		.fpu fpv5-d16
 2058              	HAL_ADC_ConfigChannel:
 2059              	.LFB159:
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 2060              		.loc 1 1624 0
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 8
 2063              		@ frame_needed = 0, uses_anonymous_args = 0
 2064              		@ link register save eliminated.
 2065              	.LVL140:
 2066 0000 30B4     		push	{r4, r5}
 2067              	.LCFI24:
 2068              		.cfi_def_cfa_offset 8
 2069              		.cfi_offset 4, -8
 2070              		.cfi_offset 5, -4
 2071 0002 82B0     		sub	sp, sp, #8
 2072              	.LCFI25:
 2073              		.cfi_def_cfa_offset 16
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2074              		.loc 1 1625 0
 2075 0004 0023     		movs	r3, #0
 2076 0006 0193     		str	r3, [sp, #4]
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 			
 2077              		.loc 1 1633 0
 2078 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2079 000c 012B     		cmp	r3, #1
 2080 000e 00F0C080 		beq	.L191
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 			
 2081              		.loc 1 1633 0 is_stmt 0 discriminator 2
 2082 0012 0123     		movs	r3, #1
 2083 0014 80F83C30 		strb	r3, [r0, #60]
ARM GAS  /tmp/cckVjXco.s 			page 78


1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	{
 2084              		.loc 1 1636 0 is_stmt 1 discriminator 2
 2085 0018 0B68     		ldr	r3, [r1]
 2086 001a 092B     		cmp	r3, #9
 2087 001c 22D9     		bls	.L181
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2088              		.loc 1 1639 0
 2089 001e 0568     		ldr	r5, [r0]
 2090 0020 EA68     		ldr	r2, [r5, #12]
 2091 0022 9BB2     		uxth	r3, r3
 2092 0024 03EB4303 		add	r3, r3, r3, lsl #1
 2093 0028 1E3B     		subs	r3, r3, #30
 2094 002a 0724     		movs	r4, #7
 2095 002c 04FA03F3 		lsl	r3, r4, r3
 2096 0030 22EA0303 		bic	r3, r2, r3
 2097 0034 EB60     		str	r3, [r5, #12]
1641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		{
 2098              		.loc 1 1641 0
 2099 0036 0B68     		ldr	r3, [r1]
 2100 0038 574A     		ldr	r2, .L196
 2101 003a 9342     		cmp	r3, r2
 2102 003c 0BD0     		beq	.L193
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 	  }
 2103              		.loc 1 1649 0
 2104 003e 0568     		ldr	r5, [r0]
 2105 0040 EA68     		ldr	r2, [r5, #12]
 2106 0042 8C68     		ldr	r4, [r1, #8]
 2107 0044 9BB2     		uxth	r3, r3
 2108 0046 03EB4303 		add	r3, r3, r3, lsl #1
 2109 004a 1E3B     		subs	r3, r3, #30
 2110 004c 04FA03F3 		lsl	r3, r4, r3
 2111 0050 1343     		orrs	r3, r3, r2
 2112 0052 EB60     		str	r3, [r5, #12]
 2113 0054 1BE0     		b	.L183
 2114              	.L193:
1644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 		}
 2115              		.loc 1 1644 0
 2116 0056 0268     		ldr	r2, [r0]
 2117 0058 D368     		ldr	r3, [r2, #12]
 2118 005a 8C68     		ldr	r4, [r1, #8]
 2119 005c 43EA0463 		orr	r3, r3, r4, lsl #24
 2120 0060 D360     		str	r3, [r2, #12]
 2121 0062 14E0     		b	.L183
 2122              	.L181:
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2123              		.loc 1 1655 0
 2124 0064 0568     		ldr	r5, [r0]
 2125 0066 2A69     		ldr	r2, [r5, #16]
 2126 0068 9BB2     		uxth	r3, r3
 2127 006a 03EB4303 		add	r3, r3, r3, lsl #1
 2128 006e 0724     		movs	r4, #7
 2129 0070 04FA03F3 		lsl	r3, r4, r3
 2130 0074 22EA0303 		bic	r3, r2, r3
 2131 0078 2B61     		str	r3, [r5, #16]
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2132              		.loc 1 1658 0
 2133 007a 0568     		ldr	r5, [r0]
ARM GAS  /tmp/cckVjXco.s 			page 79


 2134 007c 2A69     		ldr	r2, [r5, #16]
 2135 007e 8C68     		ldr	r4, [r1, #8]
 2136 0080 0B88     		ldrh	r3, [r1]
 2137 0082 03EB4303 		add	r3, r3, r3, lsl #1
 2138 0086 04FA03F3 		lsl	r3, r4, r3
 2139 008a 1343     		orrs	r3, r3, r2
 2140 008c 2B61     		str	r3, [r5, #16]
 2141              	.L183:
1662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2142              		.loc 1 1662 0
 2143 008e 4B68     		ldr	r3, [r1, #4]
 2144 0090 062B     		cmp	r3, #6
 2145 0092 24D8     		bhi	.L184
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2146              		.loc 1 1665 0
 2147 0094 0568     		ldr	r5, [r0]
 2148 0096 6A6B     		ldr	r2, [r5, #52]
 2149 0098 03EB8303 		add	r3, r3, r3, lsl #2
 2150 009c 053B     		subs	r3, r3, #5
 2151 009e 1F24     		movs	r4, #31
 2152 00a0 04FA03F3 		lsl	r3, r4, r3
 2153 00a4 22EA0303 		bic	r3, r2, r3
 2154 00a8 6B63     		str	r3, [r5, #52]
1668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2155              		.loc 1 1668 0
 2156 00aa 0568     		ldr	r5, [r0]
 2157 00ac 6A6B     		ldr	r2, [r5, #52]
 2158 00ae 4B68     		ldr	r3, [r1, #4]
 2159 00b0 03EB8303 		add	r3, r3, r3, lsl #2
 2160 00b4 053B     		subs	r3, r3, #5
 2161 00b6 0C88     		ldrh	r4, [r1]
 2162 00b8 04FA03F3 		lsl	r3, r4, r3
 2163 00bc 1343     		orrs	r3, r3, r2
 2164 00be 6B63     		str	r3, [r5, #52]
 2165              	.L185:
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2166              		.loc 1 1690 0
 2167 00c0 0268     		ldr	r2, [r0]
 2168 00c2 364B     		ldr	r3, .L196+4
 2169 00c4 9A42     		cmp	r2, r3
 2170 00c6 3AD0     		beq	.L194
 2171              	.L187:
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2172              		.loc 1 1697 0
 2173 00c8 0268     		ldr	r2, [r0]
 2174 00ca 344B     		ldr	r3, .L196+4
 2175 00cc 9A42     		cmp	r2, r3
 2176 00ce 3FD0     		beq	.L195
 2177              	.L188:
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2178              		.loc 1 1715 0
 2179 00d0 0023     		movs	r3, #0
 2180 00d2 80F83C30 		strb	r3, [r0, #60]
1718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 2181              		.loc 1 1718 0
 2182 00d6 1846     		mov	r0, r3
 2183              	.LVL141:
ARM GAS  /tmp/cckVjXco.s 			page 80


 2184              	.L180:
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2185              		.loc 1 1719 0
 2186 00d8 02B0     		add	sp, sp, #8
 2187              	.LCFI26:
 2188              		.cfi_remember_state
 2189              		.cfi_def_cfa_offset 8
 2190              		@ sp needed
 2191 00da 30BC     		pop	{r4, r5}
 2192              	.LCFI27:
 2193              		.cfi_restore 5
 2194              		.cfi_restore 4
 2195              		.cfi_def_cfa_offset 0
 2196 00dc 7047     		bx	lr
 2197              	.LVL142:
 2198              	.L184:
 2199              	.LCFI28:
 2200              		.cfi_restore_state
1671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2201              		.loc 1 1671 0
 2202 00de 0C2B     		cmp	r3, #12
 2203 00e0 16D8     		bhi	.L186
1674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2204              		.loc 1 1674 0
 2205 00e2 0568     		ldr	r5, [r0]
 2206 00e4 2A6B     		ldr	r2, [r5, #48]
 2207 00e6 03EB8303 		add	r3, r3, r3, lsl #2
 2208 00ea 233B     		subs	r3, r3, #35
 2209 00ec 1F24     		movs	r4, #31
 2210 00ee 04FA03F3 		lsl	r3, r4, r3
 2211 00f2 22EA0303 		bic	r3, r2, r3
 2212 00f6 2B63     		str	r3, [r5, #48]
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2213              		.loc 1 1677 0
 2214 00f8 0568     		ldr	r5, [r0]
 2215 00fa 2A6B     		ldr	r2, [r5, #48]
 2216 00fc 4B68     		ldr	r3, [r1, #4]
 2217 00fe 03EB8303 		add	r3, r3, r3, lsl #2
 2218 0102 233B     		subs	r3, r3, #35
 2219 0104 0C88     		ldrh	r4, [r1]
 2220 0106 04FA03F3 		lsl	r3, r4, r3
 2221 010a 1343     		orrs	r3, r3, r2
 2222 010c 2B63     		str	r3, [r5, #48]
 2223 010e D7E7     		b	.L185
 2224              	.L186:
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2225              		.loc 1 1683 0
 2226 0110 0568     		ldr	r5, [r0]
 2227 0112 EA6A     		ldr	r2, [r5, #44]
 2228 0114 03EB8303 		add	r3, r3, r3, lsl #2
 2229 0118 413B     		subs	r3, r3, #65
 2230 011a 1F24     		movs	r4, #31
 2231 011c 04FA03F3 		lsl	r3, r4, r3
 2232 0120 22EA0303 		bic	r3, r2, r3
 2233 0124 EB62     		str	r3, [r5, #44]
1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2234              		.loc 1 1686 0
ARM GAS  /tmp/cckVjXco.s 			page 81


 2235 0126 0568     		ldr	r5, [r0]
 2236 0128 EA6A     		ldr	r2, [r5, #44]
 2237 012a 4B68     		ldr	r3, [r1, #4]
 2238 012c 03EB8303 		add	r3, r3, r3, lsl #2
 2239 0130 413B     		subs	r3, r3, #65
 2240 0132 0C88     		ldrh	r4, [r1]
 2241 0134 04FA03F3 		lsl	r3, r4, r3
 2242 0138 1343     		orrs	r3, r3, r2
 2243 013a EB62     		str	r3, [r5, #44]
 2244 013c C0E7     		b	.L185
 2245              	.L194:
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2246              		.loc 1 1690 0 discriminator 1
 2247 013e 0B68     		ldr	r3, [r1]
 2248 0140 122B     		cmp	r3, #18
 2249 0142 C1D1     		bne	.L187
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2250              		.loc 1 1693 0
 2251 0144 164A     		ldr	r2, .L196+8
 2252 0146 5368     		ldr	r3, [r2, #4]
 2253 0148 43F48003 		orr	r3, r3, #4194304
 2254 014c 5360     		str	r3, [r2, #4]
 2255 014e BBE7     		b	.L187
 2256              	.L195:
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2257              		.loc 1 1697 0 discriminator 1
 2258 0150 0B68     		ldr	r3, [r1]
 2259 0152 114A     		ldr	r2, .L196
 2260 0154 112B     		cmp	r3, #17
 2261 0156 18BF     		it	ne
 2262 0158 9342     		cmpne	r3, r2
 2263 015a B9D1     		bne	.L188
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2264              		.loc 1 1700 0
 2265 015c 104A     		ldr	r2, .L196+8
 2266 015e 5368     		ldr	r3, [r2, #4]
 2267 0160 43F40003 		orr	r3, r3, #8388608
 2268 0164 5360     		str	r3, [r2, #4]
1702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 2269              		.loc 1 1702 0
 2270 0166 0A68     		ldr	r2, [r1]
 2271 0168 0B4B     		ldr	r3, .L196
 2272 016a 9A42     		cmp	r2, r3
 2273 016c B0D1     		bne	.L188
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       while(counter != 0)
 2274              		.loc 1 1706 0
 2275 016e 0D4B     		ldr	r3, .L196+12
 2276 0170 1B68     		ldr	r3, [r3]
 2277 0172 0D4A     		ldr	r2, .L196+16
 2278 0174 A2FB0323 		umull	r2, r3, r2, r3
 2279 0178 9B0C     		lsrs	r3, r3, #18
 2280 017a 03EB8303 		add	r3, r3, r3, lsl #2
 2281 017e 5A00     		lsls	r2, r3, #1
 2282 0180 0192     		str	r2, [sp, #4]
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 2283              		.loc 1 1707 0
 2284 0182 02E0     		b	.L189
ARM GAS  /tmp/cckVjXco.s 			page 82


 2285              	.L190:
1709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 2286              		.loc 1 1709 0
 2287 0184 019B     		ldr	r3, [sp, #4]
 2288 0186 013B     		subs	r3, r3, #1
 2289 0188 0193     		str	r3, [sp, #4]
 2290              	.L189:
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 2291              		.loc 1 1707 0
 2292 018a 019B     		ldr	r3, [sp, #4]
 2293 018c 002B     		cmp	r3, #0
 2294 018e F9D1     		bne	.L190
 2295 0190 9EE7     		b	.L188
 2296              	.L191:
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 			
 2297              		.loc 1 1633 0
 2298 0192 0220     		movs	r0, #2
 2299              	.LVL143:
 2300 0194 A0E7     		b	.L180
 2301              	.L197:
 2302 0196 00BF     		.align	2
 2303              	.L196:
 2304 0198 12000010 		.word	268435474
 2305 019c 00200140 		.word	1073815552
 2306 01a0 00230140 		.word	1073816320
 2307 01a4 00000000 		.word	SystemCoreClock
 2308 01a8 83DE1B43 		.word	1125899907
 2309              		.cfi_endproc
 2310              	.LFE159:
 2312              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2313              		.align	1
 2314              		.global	HAL_ADC_AnalogWDGConfig
 2315              		.syntax unified
 2316              		.thumb
 2317              		.thumb_func
 2318              		.fpu fpv5-d16
 2320              	HAL_ADC_AnalogWDGConfig:
 2321              	.LFB160:
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2322              		.loc 1 1738 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 2326              		@ link register save eliminated.
 2327              	.LVL144:
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2328              		.loc 1 1755 0
 2329 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2330 0004 012B     		cmp	r3, #1
 2331 0006 32D0     		beq	.L202
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2332              		.loc 1 1738 0 discriminator 2
 2333 0008 10B4     		push	{r4}
 2334              	.LCFI29:
 2335              		.cfi_def_cfa_offset 4
 2336              		.cfi_offset 4, -4
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/cckVjXco.s 			page 83


 2337              		.loc 1 1755 0 discriminator 2
 2338 000a 0123     		movs	r3, #1
 2339 000c 80F83C30 		strb	r3, [r0, #60]
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2340              		.loc 1 1757 0 discriminator 2
 2341 0010 0B7C     		ldrb	r3, [r1, #16]	@ zero_extendqisi2
 2342 0012 012B     		cmp	r3, #1
 2343 0014 25D0     		beq	.L207
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2344              		.loc 1 1765 0
 2345 0016 0268     		ldr	r2, [r0]
 2346 0018 5368     		ldr	r3, [r2, #4]
 2347 001a 23F04003 		bic	r3, r3, #64
 2348 001e 5360     		str	r3, [r2, #4]
 2349              	.L201:
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2350              		.loc 1 1769 0
 2351 0020 0268     		ldr	r2, [r0]
 2352 0022 5468     		ldr	r4, [r2, #4]
 2353 0024 134B     		ldr	r3, .L208
 2354 0026 2340     		ands	r3, r3, r4
 2355 0028 5360     		str	r3, [r2, #4]
1772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2356              		.loc 1 1772 0
 2357 002a 0268     		ldr	r2, [r0]
 2358 002c 5368     		ldr	r3, [r2, #4]
 2359 002e 0C68     		ldr	r4, [r1]
 2360 0030 2343     		orrs	r3, r3, r4
 2361 0032 5360     		str	r3, [r2, #4]
1775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2362              		.loc 1 1775 0
 2363 0034 0368     		ldr	r3, [r0]
 2364 0036 4A68     		ldr	r2, [r1, #4]
 2365 0038 5A62     		str	r2, [r3, #36]
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2366              		.loc 1 1778 0
 2367 003a 0368     		ldr	r3, [r0]
 2368 003c 8A68     		ldr	r2, [r1, #8]
 2369 003e 9A62     		str	r2, [r3, #40]
1781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2370              		.loc 1 1781 0
 2371 0040 0268     		ldr	r2, [r0]
 2372 0042 5368     		ldr	r3, [r2, #4]
 2373 0044 23F01F03 		bic	r3, r3, #31
 2374 0048 5360     		str	r3, [r2, #4]
1784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2375              		.loc 1 1784 0
 2376 004a 0268     		ldr	r2, [r0]
 2377 004c 5468     		ldr	r4, [r2, #4]
 2378 004e 8B89     		ldrh	r3, [r1, #12]
 2379 0050 2343     		orrs	r3, r3, r4
 2380 0052 5360     		str	r3, [r2, #4]
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2381              		.loc 1 1787 0
 2382 0054 0023     		movs	r3, #0
 2383 0056 80F83C30 		strb	r3, [r0, #60]
1790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
ARM GAS  /tmp/cckVjXco.s 			page 84


 2384              		.loc 1 1790 0
 2385 005a 1846     		mov	r0, r3
 2386              	.LVL145:
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2387              		.loc 1 1791 0
 2388 005c 5DF8044B 		ldr	r4, [sp], #4
 2389              	.LCFI30:
 2390              		.cfi_remember_state
 2391              		.cfi_restore 4
 2392              		.cfi_def_cfa_offset 0
 2393 0060 7047     		bx	lr
 2394              	.LVL146:
 2395              	.L207:
 2396              	.LCFI31:
 2397              		.cfi_restore_state
1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2398              		.loc 1 1760 0
 2399 0062 0268     		ldr	r2, [r0]
 2400 0064 5368     		ldr	r3, [r2, #4]
 2401 0066 43F04003 		orr	r3, r3, #64
 2402 006a 5360     		str	r3, [r2, #4]
 2403 006c D8E7     		b	.L201
 2404              	.L202:
 2405              	.LCFI32:
 2406              		.cfi_def_cfa_offset 0
 2407              		.cfi_restore 4
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2408              		.loc 1 1755 0
 2409 006e 0220     		movs	r0, #2
 2410              	.LVL147:
 2411 0070 7047     		bx	lr
 2412              	.L209:
 2413 0072 00BF     		.align	2
 2414              	.L208:
 2415 0074 FFFD3FFF 		.word	-12583425
 2416              		.cfi_endproc
 2417              	.LFE160:
 2419              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2420              		.align	1
 2421              		.global	HAL_ADC_GetState
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
 2425              		.fpu fpv5-d16
 2427              	HAL_ADC_GetState:
 2428              	.LFB161:
1820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
 2429              		.loc 1 1820 0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 0
 2432              		@ frame_needed = 0, uses_anonymous_args = 0
 2433              		@ link register save eliminated.
 2434              	.LVL148:
1822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 2435              		.loc 1 1822 0
 2436 0000 006C     		ldr	r0, [r0, #64]
 2437              	.LVL149:
ARM GAS  /tmp/cckVjXco.s 			page 85


1823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2438              		.loc 1 1823 0
 2439 0002 7047     		bx	lr
 2440              		.cfi_endproc
 2441              	.LFE161:
 2443              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2444              		.align	1
 2445              		.global	HAL_ADC_GetError
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2449              		.fpu fpv5-d16
 2451              	HAL_ADC_GetError:
 2452              	.LFB162:
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->ErrorCode;
 2453              		.loc 1 1832 0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 0
 2456              		@ frame_needed = 0, uses_anonymous_args = 0
 2457              		@ link register save eliminated.
 2458              	.LVL150:
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 2459              		.loc 1 1833 0
 2460 0000 406C     		ldr	r0, [r0, #68]
 2461              	.LVL151:
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2462              		.loc 1 1834 0
 2463 0002 7047     		bx	lr
 2464              		.cfi_endproc
 2465              	.LFE162:
 2467              		.text
 2468              	.Letext0:
 2469              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2470              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2471              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 2472              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2473              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 2474              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2475              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2476              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2477              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc.h"
 2478              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 2479              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc_ex.h"
ARM GAS  /tmp/cckVjXco.s 			page 86


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_adc.c
     /tmp/cckVjXco.s:17     .text.ADC_Init:0000000000000000 $t
     /tmp/cckVjXco.s:23     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/cckVjXco.s:193    .text.ADC_Init:000000000000012c $d
     /tmp/cckVjXco.s:199    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cckVjXco.s:206    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cckVjXco.s:219    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/cckVjXco.s:226    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/cckVjXco.s:304    .text.HAL_ADC_Init:0000000000000054 $d
     /tmp/cckVjXco.s:309    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cckVjXco.s:316    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cckVjXco.s:329    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/cckVjXco.s:336    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/cckVjXco.s:398    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/cckVjXco.s:405    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/cckVjXco.s:600    .text.HAL_ADC_Start:000000000000010c $d
     /tmp/cckVjXco.s:610    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/cckVjXco.s:617    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/cckVjXco.s:666    .text.HAL_ADC_Stop:000000000000003c $d
     /tmp/cckVjXco.s:671    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/cckVjXco.s:678    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/cckVjXco.s:829    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/cckVjXco.s:836    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/cckVjXco.s:925    .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/cckVjXco.s:932    .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/cckVjXco.s:1133   .text.HAL_ADC_Start_IT:0000000000000118 $d
     /tmp/cckVjXco.s:1144   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/cckVjXco.s:1151   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/cckVjXco.s:1205   .text.HAL_ADC_Stop_IT:0000000000000044 $d
     /tmp/cckVjXco.s:1211   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/cckVjXco.s:1218   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/cckVjXco.s:1445   .text.HAL_ADC_Start_DMA:000000000000014c $d
     /tmp/cckVjXco.s:1960   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/cckVjXco.s:1617   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/cckVjXco.s:1924   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/cckVjXco.s:1458   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/cckVjXco.s:1465   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/cckVjXco.s:1541   .text.HAL_ADC_Stop_DMA:000000000000005c $d
     /tmp/cckVjXco.s:1546   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/cckVjXco.s:1553   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/cckVjXco.s:1571   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cckVjXco.s:1578   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cckVjXco.s:1591   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/cckVjXco.s:1598   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/cckVjXco.s:1611   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/cckVjXco.s:1641   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/cckVjXco.s:1648   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cckVjXco.s:1661   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/cckVjXco.s:1668   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/cckVjXco.s:1681   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/cckVjXco.s:1688   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/cckVjXco.s:1918   .text.ADC_DMAError:0000000000000000 $t
     /tmp/cckVjXco.s:1954   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/cckVjXco.s:2051   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/cckVjXco.s:2058   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/cckVjXco.s:2304   .text.HAL_ADC_ConfigChannel:0000000000000198 $d
ARM GAS  /tmp/cckVjXco.s 			page 87


     /tmp/cckVjXco.s:2313   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/cckVjXco.s:2320   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/cckVjXco.s:2415   .text.HAL_ADC_AnalogWDGConfig:0000000000000074 $d
     /tmp/cckVjXco.s:2420   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/cckVjXco.s:2427   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/cckVjXco.s:2444   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/cckVjXco.s:2451   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
