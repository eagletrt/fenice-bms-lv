ARM GAS  /tmp/ccPLDEwZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32f7xx_hal_uart.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.UART_EndTxTransfer,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	UART_EndTxTransfer:
  24              	.LFB184:
  25              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @file    stm32f7xx_hal_uart.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   [..]
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) UART interrupts handling:
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 RXNE interrupt, RX/TX FIFOs related interrupts and Error Interrupts)
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 are managed using the macros __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT()
ARM GAS  /tmp/ccPLDEwZ.s 			page 2


  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 inside the transmit and receive processes.
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         the HAL_UART_Init() API.
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART LIN (Local Interconnection Network) mode, initialize the UART registers
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_LIN_Init() API.
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (@) These API's (HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init(), HAL_MultiProcessor_Ini
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     ##### Callback registration #####
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     ==================================
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
ARM GAS  /tmp/ccPLDEwZ.s 			page 3


  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and a pointer to the user callback function.
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     weak (surcharged) function.
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and the Callback ID.
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This function allows to reset following callbacks:
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     not defined, the callback registration feature is not available
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   @endverbatim
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @attention
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * All rights reserved.</center></h2>
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
ARM GAS  /tmp/ccPLDEwZ.s 			page 4


 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #include "stm32f7xx_hal.h"
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @addtogroup STM32F7xx_HAL_Driver
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART UART
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief HAL UART module driver
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define USART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                       USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8 )) /*!< UART or
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define USART_CR3_FIELDS  ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT))  /*!< UA
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define UART_BRR_MIN    0x10U        /* UART BRR minimum authorized value */
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define UART_BRR_MAX    0x0000FFFFU  /* UART BRR maximum authorized value */
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/ccPLDEwZ.s 			page 5


 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart);
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart);
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart);
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart);
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** ===============================================================================
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in asynchronous mode.
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Baud Rate
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Word Length
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Stop Bit
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Hardware flow control
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Receiver/transmitter modes
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Over Sampling Method
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) One-Bit Sampling Method
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) data logical level inversion
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) RX and TX pins swap
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) RX overrun detection disabling
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) DMA disabling on RX error
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) MSB first on communication line
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) auto Baud rate detection
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init()and HAL_MultiProcessor_Init()API
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, UART LIN mode
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and UART multiprocessor mode configuration procedures (details for the procedures
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     are available in reference manual).
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   following table.
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   Table 1. UART frame format.
ARM GAS  /tmp/ccPLDEwZ.s 			page 6


 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check the parameters */
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check the parameters */
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 7


 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the Peripheral */
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the Peripheral */
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check UART instance */
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
ARM GAS  /tmp/ccPLDEwZ.s 			page 8


 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the Peripheral */
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the Peripheral */
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the LIN mode according to the specified
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart             UART handle.
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param BreakDetectLength Specifies the LIN break detection length.
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        This parameter can be one of the following values:
ARM GAS  /tmp/ccPLDEwZ.s 			page 9


 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the LIN UART instance */
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the Break detection length parameter */
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* LIN mode limited to 16-bit oversampling only */
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* LIN mode limited to 8-bit data length */
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the Peripheral */
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccPLDEwZ.s 			page 10


 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the Peripheral */
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart        UART handle.
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Address      UART node address (4-, 6-, 7- or 8-bit long).
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param WakeUpMethod Specifies the UART wakeup method.
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        This parameter can be one of the following values:
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the wake up method parameter */
 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 11


 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the Peripheral */
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the Peripheral */
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
ARM GAS  /tmp/ccPLDEwZ.s 			page 12


 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the Peripheral */
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DeInit the low level hardware */
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DeInit the low level hardware */
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Unlock */
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
ARM GAS  /tmp/ccPLDEwZ.s 			page 13


 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Register a User UART Callback
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart uart handle
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (pCallback == NULL)
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Update the error code */
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPLDEwZ.s 			page 14


 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process locked */
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->WakeupCallback = pCallback;
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Update the error code */
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Return error status */
ARM GAS  /tmp/ccPLDEwZ.s 			page 15


 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Update the error code */
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Return error status */
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Update the error code */
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Return error status */
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Release Lock */
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart uart handle
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
ARM GAS  /tmp/ccPLDEwZ.s 			page 16


 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process locked */
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Update the error code */
ARM GAS  /tmp/ccPLDEwZ.s 			page 17


 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Return error status */
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Update the error code */
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Return error status */
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Update the error code */
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Return error status */
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Release Lock */
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                       ##### IO operation functions #####
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and Half duplex data transfers.
ARM GAS  /tmp/ccPLDEwZ.s 			page 18


 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) There are two mode of transfer:
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            after finishing transfer.
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            or DMA, These API's return the HAL status.
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The end of the data processing will be indicated through the
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            using DMA mode.
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Blocking mode API's are :
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit()
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive()
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Abort()
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         Errors are handled as follows :
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
ARM GAS  /tmp/ccPLDEwZ.s 			page 19


1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart   UART handle.
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData   Pointer to data buffer.
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size    Amount of data to be sent.
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *pdata16bits;
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return  HAL_ERROR;
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = NULL;
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = pData;
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = NULL;
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 20


1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (pdata8bits == NULL)
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart   UART handle.
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData   Pointer to data buffer.
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size    Amount of data to be received.
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *pdata16bits;
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask;
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
ARM GAS  /tmp/ccPLDEwZ.s 			page 21


1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return  HAL_ERROR;
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize  = Size;
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = NULL;
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = pData;
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = NULL;
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* as long as data have to be received */
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (pdata8bits == NULL)
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxXferCount--;
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
ARM GAS  /tmp/ccPLDEwZ.s 			page 22


1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer.
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data to be sent.
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR       = NULL;
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the Tx ISR function pointer according to the data word length */
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = UART_TxISR_16BIT;
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = UART_TxISR_8BIT;
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the Transmit Data Register Empty interrupt */
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccPLDEwZ.s 			page 23


1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer.
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data to be received.
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr  = pData;
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize  = Size;
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR       = NULL;
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the Rx ISR function pointer according to the data word length */
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = UART_RxISR_16BIT;
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = UART_RxISR_8BIT;
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
ARM GAS  /tmp/ccPLDEwZ.s 			page 24


1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer.
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data to be sent.
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA error callback */
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferErrorCallback = UART_DMAError;
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA abort callback */
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART transmit DMA channel */
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Set error code to DMA */
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Process Unlocked */
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Restore huart->gState to ready */
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccPLDEwZ.s 			page 25


1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_ERROR;
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in the UART CR3 register */
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the parity bit (MSB position).
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer.
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data to be received.
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize = Size;
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
ARM GAS  /tmp/ccPLDEwZ.s 			page 26


1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA error callback */
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferErrorCallback = UART_DMAError;
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA abort callback */
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the DMA channel */
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuff
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Set error code to DMA */
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Process Unlocked */
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Restore huart->gState to ready */
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_ERROR;
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in the UART CR3 register */
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
ARM GAS  /tmp/ccPLDEwZ.s 			page 27


1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Unlocked */
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Unlocked */
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
ARM GAS  /tmp/ccPLDEwZ.s 			page 28


1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
ARM GAS  /tmp/ccPLDEwZ.s 			page 29


1573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** */
1595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
ARM GAS  /tmp/ccPLDEwZ.s 			page 30


1630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
1664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Handle ErrorCode to No Error */
1667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** */
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
ARM GAS  /tmp/ccPLDEwZ.s 			page 31


1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Tx transfer counter */
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** */
1736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
ARM GAS  /tmp/ccPLDEwZ.s 			page 32


1744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Rx transfer counter */
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** */
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
ARM GAS  /tmp/ccPLDEwZ.s 			page 33


1801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      before any call to DMA Abort functions */
1806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
1808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        Otherwise, set it to NULL */
1811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
1822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        Otherwise, set it to NULL */
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA TX */
1848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 0U;
1855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPLDEwZ.s 			page 34


1858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA RX */
1871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 1U;
1875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 0U;
1879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (abortcplt == 1U)
1885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
1888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
1889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear ISR function pointers */
1891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR = NULL;
1892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
1893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset errorCode */
1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
1899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Discard the received data */
1902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort complete callback */
1911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
1913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
ARM GAS  /tmp/ccPLDEwZ.s 			page 35


1915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** */
1935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
1951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA TX */
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
1957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Reset Tx transfer counter */
1962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount = 0U;
1963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear TxISR function pointers */
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = NULL;
1966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
1969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccPLDEwZ.s 			page 36


1972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
1973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
1974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
1977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Tx transfer counter */
1983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
1984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear TxISR function pointers */
1986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
1987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
1995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
1996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
1997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
1999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
2010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
2014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** */
2019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
ARM GAS  /tmp/ccPLDEwZ.s 			page 37


2029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
2032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
2036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA RX */
2038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
2042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Reset Rx transfer counter */
2047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxXferCount = 0U;
2048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
2050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pRxBuffPtr = NULL;
2051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
2053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
2054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Discard the received data */
2056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
2057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
2060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
2068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Rx transfer counter */
2074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
2075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RxISR function pointer */
2077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr = NULL;
2078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
2080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
2081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
ARM GAS  /tmp/ccPLDEwZ.s 			page 38


2086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
2092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Handle UART interrupt request.
2100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
2106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
2107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
2108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t errorflags;
2110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t errorcode;
2111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If no error occurs */
2113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
2114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (errorflags == 0U)
2115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
2117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_RXNE) != 0U)
2118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
2119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (huart->RxISR != NULL)
2121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxISR(huart);
2123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
2125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If some errors occur */
2129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((errorflags != 0U)
2130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
2131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
2132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
2134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
2135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
2137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
2139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
2142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
ARM GAS  /tmp/ccPLDEwZ.s 			page 39


2143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
2145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
2147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
2150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
2151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
2153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
2155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
2158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_ORE) != 0U)
2159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
2160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
2161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
2163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
2165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART in mode Receiver ---------------------------------------------------*/
2171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (((isrflags & USART_ISR_RXNE) != 0U)
2172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
2173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (huart->RxISR != NULL)
2175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxISR(huart);
2177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          consider error as blocking */
2182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       errorcode = huart->ErrorCode;
2183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
2184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & HAL_UART_ERROR_ORE) != 0U))
2185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         UART_EndRxTransfer(huart);
2190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           if (huart->hdmarx != NULL)
2198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
2199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
ARM GAS  /tmp/ccPLDEwZ.s 			page 40


2200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Abort DMA RX */
2204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             {
2206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
2208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             }
2209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           }
2210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           else
2211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
2212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Call user error callback */
2213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /*Call registered error callback*/
2215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             huart->ErrorCallback(huart);
2216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /*Call legacy weak error callback*/
2218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
2219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           }
2222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         else
2224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Call user error callback */
2226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /*Call registered error callback*/
2228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCallback(huart);
2229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /*Call legacy weak error callback*/
2231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
2232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
2236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Error is notified to user through user error callback */
2239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered error callback*/
2241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback(huart);
2242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak error callback*/
2244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
2245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
2247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   } /* End if some error occurs */
2252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TXE) != 0U)
2255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
2256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccPLDEwZ.s 			page 41


2257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxISR != NULL)
2258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR(huart);
2260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
2265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
2266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
2268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
2275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
2285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
2290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
2300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Rx Transfer completed callback.
2305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
ARM GAS  /tmp/ccPLDEwZ.s 			page 42


2314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
2315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
2320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
2330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART error callback.
2335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
2345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccPLDEwZ.s 			page 43


2371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief   UART control functions
2399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
2400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
2401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
2402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
2404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
2405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
2406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
2407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
2408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
2409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_SetConfig() API configures the UART peripheral
2410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_AdvFeatureConfig() API optionally configures the UART advanced features
2411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_CheckIdleState() API ensures that TEACK and/or REACK are set after initialization
2412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
2413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
2414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_LIN_SendBreak() API transmits the break characters
2415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
2416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable UART in mute mode (does not mean UART enters mute mode;
2421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
2422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
2426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
ARM GAS  /tmp/ccPLDEwZ.s 			page 44


2428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
2433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
2434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
2438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
2442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
2443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
2447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
2449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable USART mute mode by clearing the MME bit in the CR1 register */
2454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
2455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
2459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
2463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
2464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
2470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
2474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear TE and RE bits */
2484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
ARM GAS  /tmp/ccPLDEwZ.s 			page 45


2485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
2488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Unlocked */
2492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
2499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status.
2501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
2505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear TE and RE bits */
2509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
2513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Unlocked */
2517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Transmit break characters.
2525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
2531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
2532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
2534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Send break characters */
2539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
2540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccPLDEwZ.s 			page 46


2542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Unlocked */
2544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  *  @brief   UART Peripheral State functions
2555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  *
2556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
2557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ==============================================================================
2558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
2559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ==============================================================================
2560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
2561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides functions allowing to :
2562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) Return the UART handle state.
2563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) Return the UART handle error code
2564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
2566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Return the UART handle state.
2571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL state
2574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp1, temp2;
2578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp1 = huart->gState;
2579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp2 = huart->RxState;
2580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval UART Error Code
2589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** */
2590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return huart->ErrorCode;
2593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
ARM GAS  /tmp/ccPLDEwZ.s 			page 47


2599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval none
2610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Init the UART Callback settings */
2615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tmpreg;
2635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t brrtemp;
2636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource;
2637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t usartdiv                   = 0x00000000U;
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
2639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
2641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  the UART Word Length, Parity, Mode and oversampling:
2654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set the M bits according to huart->Init.WordLength value
2655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set PCE and PS bits according to huart->Init.Parity value
ARM GAS  /tmp/ccPLDEwZ.s 			page 48


2656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set TE and RE bits according to huart->Init.Mode value
2657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set OVER8 bit according to huart->Init.OverSampling value */
2658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
2659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
2660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * to huart->Init.StopBits value */
2664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Configure
2668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * - UART HardWare Flow Control: set CTSE and RTSE bits according
2669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *   to huart->Init.HwFlowCtl value
2670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * - one-bit sampling method versus three samples' majority rule according
2671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
2672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl;
2673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg |= huart->Init.OneBitSampling;
2675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
2676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
2680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (clocksource)
2684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
2687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
2690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
2693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
2696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
2699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
2701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
2702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
2703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
2708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
2710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
2711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->BRR = brrtemp;
2712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccPLDEwZ.s 			page 49


2713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       ret = HAL_ERROR;
2716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (clocksource)
2721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
2724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
2727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
2730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate))
2733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
2736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
2738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
2739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
2740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
2745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->BRR = usartdiv;
2747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       ret = HAL_ERROR;
2751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear ISR function pointers */
2756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR = NULL;
2757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
2758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return ret;
2760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
2764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
2768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
ARM GAS  /tmp/ccPLDEwZ.s 			page 50


2770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
2771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
2773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
2774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
2776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
2777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
2780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
2781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
2783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
2784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure data inversion */
2787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
2790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
2791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
2794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
2795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
2797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
2798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
2801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
2802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
2804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
2805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
2808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
2809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
2811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
2812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
2815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
2816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
2818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
2819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
2820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
2821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
2822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
2824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
2825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPLDEwZ.s 			page 51


2827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
2829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
2830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
2832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
2833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Check the UART Idle State.
2838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
2842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
2844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
2846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Init tickstart for timeout managment*/
2849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tickstart = HAL_GetTick();
2850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if the Transmitter is enabled */
2852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
2853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Wait until TEACK flag is set */
2855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
2856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Timeout occurred */
2858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
2859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Initialize the UART State */
2863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Unlocked */
2867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
2874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart     UART handle.
2875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Flag      Specifies the UART flag to check
2876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Status    Flag status (SET or RESET)
2877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Tickstart Tick start value
2878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout   Timeout duration
2879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
2882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Wait until flag is set */
ARM GAS  /tmp/ccPLDEwZ.s 			page 52


2884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check for the Timeout */
2887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
2888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
2896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
2897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Process Unlocked */
2899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
2900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
2902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  26              		.loc 1 2915 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
2916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  32              		.loc 1 2917 0
  33 0000 0268     		ldr	r2, [r0]
  34 0002 1368     		ldr	r3, [r2]
  35 0004 23F0C003 		bic	r3, r3, #192
  36 0008 1360     		str	r3, [r2]
2918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
  37              		.loc 1 2920 0
  38 000a 2023     		movs	r3, #32
  39 000c 4367     		str	r3, [r0, #116]
  40 000e 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE184:
  44              		.section	.text.UART_EndRxTransfer,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
ARM GAS  /tmp/ccPLDEwZ.s 			page 53


  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv5-d16
  51              	UART_EndRxTransfer:
  52              	.LFB185:
2921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  53              		.loc 1 2930 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL1:
2931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  59              		.loc 1 2932 0
  60 0000 0268     		ldr	r2, [r0]
  61 0002 1368     		ldr	r3, [r2]
  62 0004 23F49073 		bic	r3, r3, #288
  63 0008 1360     		str	r3, [r2]
2933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
  64              		.loc 1 2933 0
  65 000a 0268     		ldr	r2, [r0]
  66 000c 9368     		ldr	r3, [r2, #8]
  67 000e 23F00103 		bic	r3, r3, #1
  68 0012 9360     		str	r3, [r2, #8]
2934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  69              		.loc 1 2936 0
  70 0014 2023     		movs	r3, #32
  71 0016 8367     		str	r3, [r0, #120]
2937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset RxIsr function pointer */
2939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR = NULL;
  72              		.loc 1 2939 0
  73 0018 0023     		movs	r3, #0
  74 001a 0366     		str	r3, [r0, #96]
  75 001c 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE185:
  79              		.section	.text.UART_TxISR_8BIT,"ax",%progbits
  80              		.align	1
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv5-d16
  86              	UART_TxISR_8BIT:
  87              	.LFB196:
ARM GAS  /tmp/ccPLDEwZ.s 			page 54


2940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
2945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
2946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
2951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Normal mode */
2953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
2954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
2956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
2958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        in the UART CR3 register */
2959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
2960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
2963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Circular mode */
2965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call registered Tx complete callback*/
2969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxCpltCallback(huart);
2970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
2972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
2973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
2979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
2980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
2985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Tx Half complete callback*/
2988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
2989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Tx Half complete callback*/
2991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
2992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
ARM GAS  /tmp/ccPLDEwZ.s 			page 55


2997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
2998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Normal mode */
3005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
3006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
3010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
3011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
3014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        in the UART CR3 register */
3015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
3016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
3019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Rx complete callback*/
3023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxCpltCallback(huart);
3024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Rx complete callback*/
3026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
3027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
3032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Rx Half complete callback*/
3041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxHalfCpltCallback(huart);
3042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Rx Half complete callback*/
3044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
3045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART communication error callback.
3050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/ccPLDEwZ.s 			page 56


3054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
3058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
3059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
3062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
3063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
3065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
3066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
3070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
3071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
3074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
3077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered error callback*/
3080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered error callback*/
3101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
ARM GAS  /tmp/ccPLDEwZ.s 			page 57


3111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
3121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
3124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
3126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
3128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset errorCode */
3136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
ARM GAS  /tmp/ccPLDEwZ.s 			page 58


3168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
3170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
3173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
3175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
3177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset errorCode */
3185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
3191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccPLDEwZ.s 			page 59


3225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
3233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
3254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
3266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief TX interrrupt handler for 7 or 8 bits data word length .
3271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
3277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  88              		.loc 1 3277 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 60


  92              		@ link register save eliminated.
  93              	.LVL2:
3278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
  94              		.loc 1 3279 0
  95 0000 436F     		ldr	r3, [r0, #116]
  96 0002 212B     		cmp	r3, #33
  97 0004 00D0     		beq	.L6
  98              	.L3:
  99 0006 7047     		bx	lr
 100              	.L6:
3280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 101              		.loc 1 3281 0
 102 0008 B0F85230 		ldrh	r3, [r0, #82]
 103 000c 9BB2     		uxth	r3, r3
 104 000e 73B1     		cbz	r3, .L7
3282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
3285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
3290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 105              		.loc 1 3291 0
 106 0010 0368     		ldr	r3, [r0]
 107 0012 C26C     		ldr	r2, [r0, #76]
 108 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 109 0016 9A62     		str	r2, [r3, #40]
3292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr++;
 110              		.loc 1 3292 0
 111 0018 C36C     		ldr	r3, [r0, #76]
 112 001a 0133     		adds	r3, r3, #1
 113 001c C364     		str	r3, [r0, #76]
3293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
 114              		.loc 1 3293 0
 115 001e B0F85230 		ldrh	r3, [r0, #82]
 116 0022 9BB2     		uxth	r3, r3
 117 0024 013B     		subs	r3, r3, #1
 118 0026 9BB2     		uxth	r3, r3
 119 0028 A0F85230 		strh	r3, [r0, #82]	@ movhi
3294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 120              		.loc 1 3296 0
 121 002c EBE7     		b	.L3
 122              	.L7:
3284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 123              		.loc 1 3284 0
 124 002e 0268     		ldr	r2, [r0]
 125 0030 1368     		ldr	r3, [r2]
 126 0032 23F08003 		bic	r3, r3, #128
 127 0036 1360     		str	r3, [r2]
3287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccPLDEwZ.s 			page 61


 128              		.loc 1 3287 0
 129 0038 0268     		ldr	r2, [r0]
 130 003a 1368     		ldr	r3, [r2]
 131 003c 43F04003 		orr	r3, r3, #64
 132 0040 1360     		str	r3, [r2]
 133 0042 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE196:
 137              		.section	.text.UART_TxISR_16BIT,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv5-d16
 144              	UART_TxISR_16BIT:
 145              	.LFB197:
3297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief TX interrrupt handler for 9 bits data word length.
3300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
3306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 146              		.loc 1 3306 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL3:
3307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *tmp;
3308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 152              		.loc 1 3310 0
 153 0000 436F     		ldr	r3, [r0, #116]
 154 0002 212B     		cmp	r3, #33
 155 0004 00D0     		beq	.L11
 156              	.L8:
 157 0006 7047     		bx	lr
 158              	.L11:
3311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 159              		.loc 1 3312 0
 160 0008 B0F85230 		ldrh	r3, [r0, #82]
 161 000c 9BB2     		uxth	r3, r3
 162 000e 83B1     		cbz	r3, .L12
3313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
3316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
ARM GAS  /tmp/ccPLDEwZ.s 			page 62


3321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
 163              		.loc 1 3322 0
 164 0010 C36C     		ldr	r3, [r0, #76]
 165              	.LVL4:
3323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 166              		.loc 1 3323 0
 167 0012 0268     		ldr	r2, [r0]
 168 0014 1B88     		ldrh	r3, [r3]
 169              	.LVL5:
 170 0016 C3F30803 		ubfx	r3, r3, #0, #9
 171 001a 9362     		str	r3, [r2, #40]
 172              	.LVL6:
3324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 173              		.loc 1 3324 0
 174 001c C36C     		ldr	r3, [r0, #76]
 175 001e 0233     		adds	r3, r3, #2
 176 0020 C364     		str	r3, [r0, #76]
3325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
 177              		.loc 1 3325 0
 178 0022 B0F85230 		ldrh	r3, [r0, #82]
 179 0026 9BB2     		uxth	r3, r3
 180 0028 013B     		subs	r3, r3, #1
 181 002a 9BB2     		uxth	r3, r3
 182 002c A0F85230 		strh	r3, [r0, #82]	@ movhi
3326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 183              		.loc 1 3328 0
 184 0030 E9E7     		b	.L8
 185              	.L12:
3315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 186              		.loc 1 3315 0
 187 0032 0268     		ldr	r2, [r0]
 188 0034 1368     		ldr	r3, [r2]
 189 0036 23F08003 		bic	r3, r3, #128
 190 003a 1360     		str	r3, [r2]
3318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 191              		.loc 1 3318 0
 192 003c 0268     		ldr	r2, [r0]
 193 003e 1368     		ldr	r3, [r2]
 194 0040 43F04003 		orr	r3, r3, #64
 195 0044 1360     		str	r3, [r2]
 196 0046 7047     		bx	lr
 197              		.cfi_endproc
 198              	.LFE197:
 200              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 201              		.align	1
 202              		.weak	HAL_UART_MspInit
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv5-d16
 208              	HAL_UART_MspInit:
 209              	.LFB146:
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 210              		.loc 1 660 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 63


 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215              	.LVL7:
 216 0000 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE146:
 220              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 221              		.align	1
 222              		.weak	HAL_UART_MspDeInit
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu fpv5-d16
 228              	HAL_UART_MspDeInit:
 229              	.LFB147:
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 230              		.loc 1 675 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235              	.LVL8:
 236 0000 7047     		bx	lr
 237              		.cfi_endproc
 238              	.LFE147:
 240              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 241              		.align	1
 242              		.global	HAL_UART_DeInit
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 246              		.fpu fpv5-d16
 248              	HAL_UART_DeInit:
 249              	.LFB145:
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 250              		.loc 1 613 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              	.LVL9:
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 255              		.loc 1 615 0
 256 0000 C0B1     		cbz	r0, .L17
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 257              		.loc 1 613 0
 258 0002 38B5     		push	{r3, r4, r5, lr}
 259              	.LCFI0:
 260              		.cfi_def_cfa_offset 16
 261              		.cfi_offset 3, -16
 262              		.cfi_offset 4, -12
 263              		.cfi_offset 5, -8
 264              		.cfi_offset 14, -4
 265 0004 0446     		mov	r4, r0
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 266              		.loc 1 623 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 64


 267 0006 2423     		movs	r3, #36
 268 0008 4367     		str	r3, [r0, #116]
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 269              		.loc 1 626 0
 270 000a 0268     		ldr	r2, [r0]
 271 000c 1368     		ldr	r3, [r2]
 272 000e 23F00103 		bic	r3, r3, #1
 273 0012 1360     		str	r3, [r2]
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 274              		.loc 1 628 0
 275 0014 0368     		ldr	r3, [r0]
 276 0016 0025     		movs	r5, #0
 277 0018 1D60     		str	r5, [r3]
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 278              		.loc 1 629 0
 279 001a 0368     		ldr	r3, [r0]
 280 001c 5D60     		str	r5, [r3, #4]
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 281              		.loc 1 630 0
 282 001e 0368     		ldr	r3, [r0]
 283 0020 9D60     		str	r5, [r3, #8]
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 284              		.loc 1 641 0
 285 0022 FFF7FEFF 		bl	HAL_UART_MspDeInit
 286              	.LVL10:
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 287              		.loc 1 644 0
 288 0026 E567     		str	r5, [r4, #124]
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 289              		.loc 1 645 0
 290 0028 6567     		str	r5, [r4, #116]
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 291              		.loc 1 646 0
 292 002a A567     		str	r5, [r4, #120]
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 293              		.loc 1 649 0
 294 002c 84F87050 		strb	r5, [r4, #112]
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 295              		.loc 1 651 0
 296 0030 2846     		mov	r0, r5
 297 0032 38BD     		pop	{r3, r4, r5, pc}
 298              	.LVL11:
 299              	.L17:
 300              	.LCFI1:
 301              		.cfi_def_cfa_offset 0
 302              		.cfi_restore 3
 303              		.cfi_restore 4
 304              		.cfi_restore 5
 305              		.cfi_restore 14
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 306              		.loc 1 617 0
 307 0034 0120     		movs	r0, #1
 308              	.LVL12:
 309 0036 7047     		bx	lr
 310              		.cfi_endproc
 311              	.LFE145:
 313              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
ARM GAS  /tmp/ccPLDEwZ.s 			page 65


 314              		.align	1
 315              		.global	HAL_UART_Transmit_IT
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv5-d16
 321              	HAL_UART_Transmit_IT:
 322              	.LFB150:
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 323              		.loc 1 1191 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              	.LVL13:
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 329              		.loc 1 1193 0
 330 0000 436F     		ldr	r3, [r0, #116]
 331 0002 202B     		cmp	r3, #32
 332 0004 01D0     		beq	.L29
1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 333              		.loc 1 1231 0
 334 0006 0220     		movs	r0, #2
 335              	.LVL14:
 336 0008 7047     		bx	lr
 337              	.LVL15:
 338              	.L29:
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 339              		.loc 1 1195 0
 340 000a 002A     		cmp	r2, #0
 341 000c 18BF     		it	ne
 342 000e 0029     		cmpne	r1, #0
 343 0010 26D0     		beq	.L27
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 344              		.loc 1 1201 0
 345 0012 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 346 0016 012B     		cmp	r3, #1
 347 0018 24D0     		beq	.L28
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 348              		.loc 1 1201 0 is_stmt 0 discriminator 2
 349 001a 0123     		movs	r3, #1
 350 001c 80F87030 		strb	r3, [r0, #112]
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 351              		.loc 1 1203 0 is_stmt 1 discriminator 2
 352 0020 C164     		str	r1, [r0, #76]
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 353              		.loc 1 1204 0 discriminator 2
 354 0022 A0F85020 		strh	r2, [r0, #80]	@ movhi
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR       = NULL;
 355              		.loc 1 1205 0 discriminator 2
 356 0026 A0F85220 		strh	r2, [r0, #82]	@ movhi
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 357              		.loc 1 1206 0 discriminator 2
 358 002a 0023     		movs	r3, #0
 359 002c 4366     		str	r3, [r0, #100]
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 360              		.loc 1 1208 0 discriminator 2
ARM GAS  /tmp/ccPLDEwZ.s 			page 66


 361 002e C367     		str	r3, [r0, #124]
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 362              		.loc 1 1209 0 discriminator 2
 363 0030 2123     		movs	r3, #33
 364 0032 4367     		str	r3, [r0, #116]
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 365              		.loc 1 1212 0 discriminator 2
 366 0034 8368     		ldr	r3, [r0, #8]
 367 0036 B3F5805F 		cmp	r3, #4096
 368 003a 0BD0     		beq	.L30
 369              	.L24:
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 370              		.loc 1 1218 0
 371 003c 0A4B     		ldr	r3, .L31
 372 003e 4366     		str	r3, [r0, #100]
 373              	.L25:
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 374              		.loc 1 1222 0
 375 0040 0023     		movs	r3, #0
 376 0042 80F87030 		strb	r3, [r0, #112]
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 377              		.loc 1 1225 0
 378 0046 0168     		ldr	r1, [r0]
 379              	.LVL16:
 380 0048 0A68     		ldr	r2, [r1]
 381              	.LVL17:
 382 004a 42F08002 		orr	r2, r2, #128
 383 004e 0A60     		str	r2, [r1]
 384              	.LVL18:
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 385              		.loc 1 1227 0
 386 0050 1846     		mov	r0, r3
 387              	.LVL19:
 388 0052 7047     		bx	lr
 389              	.LVL20:
 390              	.L30:
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 391              		.loc 1 1212 0 discriminator 1
 392 0054 0369     		ldr	r3, [r0, #16]
 393 0056 002B     		cmp	r3, #0
 394 0058 F0D1     		bne	.L24
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 395              		.loc 1 1214 0
 396 005a 044B     		ldr	r3, .L31+4
 397 005c 4366     		str	r3, [r0, #100]
 398 005e EFE7     		b	.L25
 399              	.L27:
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 400              		.loc 1 1197 0
 401 0060 0120     		movs	r0, #1
 402              	.LVL21:
 403 0062 7047     		bx	lr
 404              	.LVL22:
 405              	.L28:
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 406              		.loc 1 1201 0
 407 0064 0220     		movs	r0, #2
ARM GAS  /tmp/ccPLDEwZ.s 			page 67


 408              	.LVL23:
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 409              		.loc 1 1233 0
 410 0066 7047     		bx	lr
 411              	.L32:
 412              		.align	2
 413              	.L31:
 414 0068 00000000 		.word	UART_TxISR_8BIT
 415 006c 00000000 		.word	UART_TxISR_16BIT
 416              		.cfi_endproc
 417              	.LFE150:
 419              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 420              		.align	1
 421              		.global	HAL_UART_Receive_IT
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu fpv5-d16
 427              	HAL_UART_Receive_IT:
 428              	.LFB151:
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 429              		.loc 1 1243 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434              	.LVL24:
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 435              		.loc 1 1245 0
 436 0000 836F     		ldr	r3, [r0, #120]
 437 0002 202B     		cmp	r3, #32
 438 0004 01D0     		beq	.L47
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 439              		.loc 1 1289 0
 440 0006 0220     		movs	r0, #2
 441              	.LVL25:
 442 0008 7047     		bx	lr
 443              	.LVL26:
 444              	.L47:
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 445              		.loc 1 1247 0
 446 000a 002A     		cmp	r2, #0
 447 000c 18BF     		it	ne
 448 000e 0029     		cmpne	r1, #0
 449 0010 56D0     		beq	.L45
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 450              		.loc 1 1253 0
 451 0012 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 452 0016 012B     		cmp	r3, #1
 453 0018 54D0     		beq	.L46
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 454              		.loc 1 1253 0 is_stmt 0 discriminator 2
 455 001a 0123     		movs	r3, #1
 456 001c 80F87030 		strb	r3, [r0, #112]
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize  = Size;
 457              		.loc 1 1255 0 is_stmt 1 discriminator 2
 458 0020 4165     		str	r1, [r0, #84]
ARM GAS  /tmp/ccPLDEwZ.s 			page 68


1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
 459              		.loc 1 1256 0 discriminator 2
 460 0022 A0F85820 		strh	r2, [r0, #88]	@ movhi
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR       = NULL;
 461              		.loc 1 1257 0 discriminator 2
 462 0026 A0F85A20 		strh	r2, [r0, #90]	@ movhi
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 463              		.loc 1 1258 0 discriminator 2
 464 002a 0023     		movs	r3, #0
 465 002c 0366     		str	r3, [r0, #96]
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 466              		.loc 1 1261 0 discriminator 2
 467 002e 8368     		ldr	r3, [r0, #8]
 468 0030 B3F5805F 		cmp	r3, #4096
 469 0034 06D0     		beq	.L48
 470 0036 A3B9     		cbnz	r3, .L38
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 471              		.loc 1 1261 0 is_stmt 0 discriminator 5
 472 0038 0369     		ldr	r3, [r0, #16]
 473 003a 73B9     		cbnz	r3, .L39
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 474              		.loc 1 1261 0 discriminator 7
 475 003c FF23     		movs	r3, #255
 476 003e A0F85C30 		strh	r3, [r0, #92]	@ movhi
 477 0042 14E0     		b	.L37
 478              	.L48:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 479              		.loc 1 1261 0 discriminator 1
 480 0044 0369     		ldr	r3, [r0, #16]
 481 0046 23B9     		cbnz	r3, .L36
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 482              		.loc 1 1261 0 discriminator 3
 483 0048 40F2FF13 		movw	r3, #511
 484 004c A0F85C30 		strh	r3, [r0, #92]	@ movhi
 485 0050 0DE0     		b	.L37
 486              	.L36:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 487              		.loc 1 1261 0 discriminator 4
 488 0052 FF23     		movs	r3, #255
 489 0054 A0F85C30 		strh	r3, [r0, #92]	@ movhi
 490 0058 09E0     		b	.L37
 491              	.L39:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 492              		.loc 1 1261 0 discriminator 8
 493 005a 7F23     		movs	r3, #127
 494 005c A0F85C30 		strh	r3, [r0, #92]	@ movhi
 495 0060 05E0     		b	.L37
 496              	.L38:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 497              		.loc 1 1261 0 discriminator 6
 498 0062 B3F1805F 		cmp	r3, #268435456
 499 0066 1BD0     		beq	.L49
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 500              		.loc 1 1261 0 discriminator 10
 501 0068 0023     		movs	r3, #0
 502 006a A0F85C30 		strh	r3, [r0, #92]	@ movhi
 503              	.L37:
ARM GAS  /tmp/ccPLDEwZ.s 			page 69


1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 504              		.loc 1 1263 0 is_stmt 1
 505 006e 0023     		movs	r3, #0
 506 0070 C367     		str	r3, [r0, #124]
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 507              		.loc 1 1264 0
 508 0072 2223     		movs	r3, #34
 509 0074 8367     		str	r3, [r0, #120]
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 510              		.loc 1 1267 0
 511 0076 0268     		ldr	r2, [r0]
 512              	.LVL27:
 513 0078 9368     		ldr	r3, [r2, #8]
 514 007a 43F00103 		orr	r3, r3, #1
 515 007e 9360     		str	r3, [r2, #8]
 516              	.LVL28:
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 517              		.loc 1 1270 0
 518 0080 8368     		ldr	r3, [r0, #8]
 519 0082 B3F5805F 		cmp	r3, #4096
 520 0086 15D0     		beq	.L50
 521              	.L42:
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 522              		.loc 1 1276 0
 523 0088 0F4B     		ldr	r3, .L51
 524 008a 0366     		str	r3, [r0, #96]
 525              	.L43:
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 526              		.loc 1 1280 0
 527 008c 0023     		movs	r3, #0
 528 008e 80F87030 		strb	r3, [r0, #112]
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 529              		.loc 1 1283 0
 530 0092 0168     		ldr	r1, [r0]
 531              	.LVL29:
 532 0094 0A68     		ldr	r2, [r1]
 533 0096 42F49072 		orr	r2, r2, #288
 534 009a 0A60     		str	r2, [r1]
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 535              		.loc 1 1285 0
 536 009c 1846     		mov	r0, r3
 537              	.LVL30:
 538 009e 7047     		bx	lr
 539              	.LVL31:
 540              	.L49:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 541              		.loc 1 1261 0 discriminator 9
 542 00a0 0369     		ldr	r3, [r0, #16]
 543 00a2 1BB9     		cbnz	r3, .L41
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 544              		.loc 1 1261 0 is_stmt 0 discriminator 11
 545 00a4 7F23     		movs	r3, #127
 546 00a6 A0F85C30 		strh	r3, [r0, #92]	@ movhi
 547 00aa E0E7     		b	.L37
 548              	.L41:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 549              		.loc 1 1261 0 discriminator 12
ARM GAS  /tmp/ccPLDEwZ.s 			page 70


 550 00ac 3F23     		movs	r3, #63
 551 00ae A0F85C30 		strh	r3, [r0, #92]	@ movhi
 552 00b2 DCE7     		b	.L37
 553              	.LVL32:
 554              	.L50:
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 555              		.loc 1 1270 0 is_stmt 1 discriminator 1
 556 00b4 0369     		ldr	r3, [r0, #16]
 557 00b6 002B     		cmp	r3, #0
 558 00b8 E6D1     		bne	.L42
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 559              		.loc 1 1272 0
 560 00ba 044B     		ldr	r3, .L51+4
 561 00bc 0366     		str	r3, [r0, #96]
 562 00be E5E7     		b	.L43
 563              	.LVL33:
 564              	.L45:
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 565              		.loc 1 1249 0
 566 00c0 0120     		movs	r0, #1
 567              	.LVL34:
 568 00c2 7047     		bx	lr
 569              	.LVL35:
 570              	.L46:
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 571              		.loc 1 1253 0
 572 00c4 0220     		movs	r0, #2
 573              	.LVL36:
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 574              		.loc 1 1291 0
 575 00c6 7047     		bx	lr
 576              	.L52:
 577              		.align	2
 578              	.L51:
 579 00c8 00000000 		.word	UART_RxISR_8BIT
 580 00cc 00000000 		.word	UART_RxISR_16BIT
 581              		.cfi_endproc
 582              	.LFE151:
 584              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 585              		.align	1
 586              		.global	HAL_UART_Transmit_DMA
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu fpv5-d16
 592              	HAL_UART_Transmit_DMA:
 593              	.LFB152:
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 594              		.loc 1 1301 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              	.LVL37:
 599 0000 10B5     		push	{r4, lr}
 600              	.LCFI2:
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 4, -8
ARM GAS  /tmp/ccPLDEwZ.s 			page 71


 603              		.cfi_offset 14, -4
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 604              		.loc 1 1303 0
 605 0002 446F     		ldr	r4, [r0, #116]
 606 0004 202C     		cmp	r4, #32
 607 0006 01D0     		beq	.L60
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 608              		.loc 1 1363 0
 609 0008 0220     		movs	r0, #2
 610              	.LVL38:
 611 000a 10BD     		pop	{r4, pc}
 612              	.LVL39:
 613              	.L60:
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 614              		.loc 1 1305 0
 615 000c 002A     		cmp	r2, #0
 616 000e 18BF     		it	ne
 617 0010 0029     		cmpne	r1, #0
 618 0012 3AD0     		beq	.L57
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 619              		.loc 1 1311 0
 620 0014 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 621 0018 012B     		cmp	r3, #1
 622 001a 38D0     		beq	.L58
 623 001c 1346     		mov	r3, r2
 624 001e 0446     		mov	r4, r0
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 625              		.loc 1 1311 0 is_stmt 0 discriminator 2
 626 0020 0122     		movs	r2, #1
 627              	.LVL40:
 628 0022 80F87020 		strb	r2, [r0, #112]
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 629              		.loc 1 1313 0 is_stmt 1 discriminator 2
 630 0026 C164     		str	r1, [r0, #76]
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 631              		.loc 1 1314 0 discriminator 2
 632 0028 A0F85030 		strh	r3, [r0, #80]	@ movhi
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 633              		.loc 1 1315 0 discriminator 2
 634 002c A0F85230 		strh	r3, [r0, #82]	@ movhi
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 635              		.loc 1 1317 0 discriminator 2
 636 0030 0022     		movs	r2, #0
 637 0032 C267     		str	r2, [r0, #124]
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 638              		.loc 1 1318 0 discriminator 2
 639 0034 2122     		movs	r2, #33
 640 0036 4267     		str	r2, [r0, #116]
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 641              		.loc 1 1320 0 discriminator 2
 642 0038 826E     		ldr	r2, [r0, #104]
 643 003a 8AB1     		cbz	r2, .L55
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 644              		.loc 1 1323 0
 645 003c 1549     		ldr	r1, .L62
 646              	.LVL41:
 647 003e D163     		str	r1, [r2, #60]
ARM GAS  /tmp/ccPLDEwZ.s 			page 72


 648              	.LVL42:
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 649              		.loc 1 1326 0
 650 0040 826E     		ldr	r2, [r0, #104]
 651 0042 1549     		ldr	r1, .L62+4
 652 0044 1164     		str	r1, [r2, #64]
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 653              		.loc 1 1329 0
 654 0046 826E     		ldr	r2, [r0, #104]
 655 0048 1449     		ldr	r1, .L62+8
 656 004a D164     		str	r1, [r2, #76]
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 657              		.loc 1 1332 0
 658 004c 826E     		ldr	r2, [r0, #104]
 659 004e 0021     		movs	r1, #0
 660 0050 1165     		str	r1, [r2, #80]
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 661              		.loc 1 1335 0
 662 0052 0268     		ldr	r2, [r0]
 663 0054 2832     		adds	r2, r2, #40
 664 0056 C16C     		ldr	r1, [r0, #76]
 665 0058 806E     		ldr	r0, [r0, #104]
 666              	.LVL43:
 667 005a FFF7FEFF 		bl	HAL_DMA_Start_IT
 668              	.LVL44:
 669 005e 58B9     		cbnz	r0, .L61
 670              	.L55:
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 671              		.loc 1 1350 0
 672 0060 2368     		ldr	r3, [r4]
 673 0062 4022     		movs	r2, #64
 674 0064 1A62     		str	r2, [r3, #32]
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 675              		.loc 1 1353 0
 676 0066 0020     		movs	r0, #0
 677 0068 84F87000 		strb	r0, [r4, #112]
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 678              		.loc 1 1357 0
 679 006c 2268     		ldr	r2, [r4]
 680 006e 9368     		ldr	r3, [r2, #8]
 681 0070 43F08003 		orr	r3, r3, #128
 682 0074 9360     		str	r3, [r2, #8]
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 683              		.loc 1 1359 0
 684 0076 10BD     		pop	{r4, pc}
 685              	.LVL45:
 686              	.L61:
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 687              		.loc 1 1338 0
 688 0078 1023     		movs	r3, #16
 689 007a E367     		str	r3, [r4, #124]
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 690              		.loc 1 1341 0
 691 007c 0023     		movs	r3, #0
 692 007e 84F87030 		strb	r3, [r4, #112]
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 693              		.loc 1 1344 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 73


 694 0082 2023     		movs	r3, #32
 695 0084 6367     		str	r3, [r4, #116]
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 696              		.loc 1 1346 0
 697 0086 0120     		movs	r0, #1
 698 0088 10BD     		pop	{r4, pc}
 699              	.LVL46:
 700              	.L57:
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 701              		.loc 1 1307 0
 702 008a 0120     		movs	r0, #1
 703              	.LVL47:
 704 008c 10BD     		pop	{r4, pc}
 705              	.LVL48:
 706              	.L58:
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 707              		.loc 1 1311 0
 708 008e 0220     		movs	r0, #2
 709              	.LVL49:
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 710              		.loc 1 1365 0
 711 0090 10BD     		pop	{r4, pc}
 712              	.L63:
 713 0092 00BF     		.align	2
 714              	.L62:
 715 0094 00000000 		.word	UART_DMATransmitCplt
 716 0098 00000000 		.word	UART_DMATxHalfCplt
 717 009c 00000000 		.word	UART_DMAError
 718              		.cfi_endproc
 719              	.LFE152:
 721              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 722              		.align	1
 723              		.global	HAL_UART_Receive_DMA
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu fpv5-d16
 729              	HAL_UART_Receive_DMA:
 730              	.LFB153:
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 731              		.loc 1 1377 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735              	.LVL50:
 736 0000 10B5     		push	{r4, lr}
 737              	.LCFI3:
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 4, -8
 740              		.cfi_offset 14, -4
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 741              		.loc 1 1379 0
 742 0002 846F     		ldr	r4, [r0, #120]
 743 0004 202C     		cmp	r4, #32
 744 0006 01D0     		beq	.L71
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 745              		.loc 1 1441 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 74


 746 0008 0220     		movs	r0, #2
 747              	.LVL51:
 748 000a 10BD     		pop	{r4, pc}
 749              	.LVL52:
 750              	.L71:
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 751              		.loc 1 1381 0
 752 000c 002A     		cmp	r2, #0
 753 000e 18BF     		it	ne
 754 0010 0029     		cmpne	r1, #0
 755 0012 3FD0     		beq	.L68
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 756              		.loc 1 1387 0
 757 0014 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 758 0018 012B     		cmp	r3, #1
 759 001a 3DD0     		beq	.L69
 760 001c 1346     		mov	r3, r2
 761 001e 0446     		mov	r4, r0
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 762              		.loc 1 1387 0 is_stmt 0 discriminator 2
 763 0020 0122     		movs	r2, #1
 764              	.LVL53:
 765 0022 80F87020 		strb	r2, [r0, #112]
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize = Size;
 766              		.loc 1 1389 0 is_stmt 1 discriminator 2
 767 0026 4165     		str	r1, [r0, #84]
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 768              		.loc 1 1390 0 discriminator 2
 769 0028 A0F85830 		strh	r3, [r0, #88]	@ movhi
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 770              		.loc 1 1392 0 discriminator 2
 771 002c 0022     		movs	r2, #0
 772 002e C267     		str	r2, [r0, #124]
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 773              		.loc 1 1393 0 discriminator 2
 774 0030 2222     		movs	r2, #34
 775 0032 8267     		str	r2, [r0, #120]
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 776              		.loc 1 1395 0 discriminator 2
 777 0034 C26E     		ldr	r2, [r0, #108]
 778 0036 8AB1     		cbz	r2, .L66
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 779              		.loc 1 1398 0
 780 0038 1849     		ldr	r1, .L73
 781              	.LVL54:
 782 003a D163     		str	r1, [r2, #60]
 783              	.LVL55:
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 784              		.loc 1 1401 0
 785 003c C26E     		ldr	r2, [r0, #108]
 786 003e 1849     		ldr	r1, .L73+4
 787 0040 1164     		str	r1, [r2, #64]
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 788              		.loc 1 1404 0
 789 0042 C26E     		ldr	r2, [r0, #108]
 790 0044 1749     		ldr	r1, .L73+8
 791 0046 D164     		str	r1, [r2, #76]
ARM GAS  /tmp/ccPLDEwZ.s 			page 75


1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 792              		.loc 1 1407 0
 793 0048 C26E     		ldr	r2, [r0, #108]
 794 004a 0021     		movs	r1, #0
 795 004c 1165     		str	r1, [r2, #80]
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 796              		.loc 1 1410 0
 797 004e 0168     		ldr	r1, [r0]
 798 0050 426D     		ldr	r2, [r0, #84]
 799 0052 2431     		adds	r1, r1, #36
 800 0054 C06E     		ldr	r0, [r0, #108]
 801              	.LVL56:
 802 0056 FFF7FEFF 		bl	HAL_DMA_Start_IT
 803              	.LVL57:
 804 005a 90B9     		cbnz	r0, .L72
 805              	.L66:
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 806              		.loc 1 1425 0
 807 005c 0020     		movs	r0, #0
 808 005e 84F87000 		strb	r0, [r4, #112]
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 809              		.loc 1 1428 0
 810 0062 2268     		ldr	r2, [r4]
 811 0064 1368     		ldr	r3, [r2]
 812 0066 43F48073 		orr	r3, r3, #256
 813 006a 1360     		str	r3, [r2]
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 814              		.loc 1 1431 0
 815 006c 2268     		ldr	r2, [r4]
 816 006e 9368     		ldr	r3, [r2, #8]
 817 0070 43F00103 		orr	r3, r3, #1
 818 0074 9360     		str	r3, [r2, #8]
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 819              		.loc 1 1435 0
 820 0076 2268     		ldr	r2, [r4]
 821 0078 9368     		ldr	r3, [r2, #8]
 822 007a 43F04003 		orr	r3, r3, #64
 823 007e 9360     		str	r3, [r2, #8]
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 824              		.loc 1 1437 0
 825 0080 10BD     		pop	{r4, pc}
 826              	.LVL58:
 827              	.L72:
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 828              		.loc 1 1413 0
 829 0082 1023     		movs	r3, #16
 830 0084 E367     		str	r3, [r4, #124]
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 831              		.loc 1 1416 0
 832 0086 0023     		movs	r3, #0
 833 0088 84F87030 		strb	r3, [r4, #112]
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 834              		.loc 1 1419 0
 835 008c 2023     		movs	r3, #32
 836 008e 6367     		str	r3, [r4, #116]
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 837              		.loc 1 1421 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 76


 838 0090 0120     		movs	r0, #1
 839 0092 10BD     		pop	{r4, pc}
 840              	.LVL59:
 841              	.L68:
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 842              		.loc 1 1383 0
 843 0094 0120     		movs	r0, #1
 844              	.LVL60:
 845 0096 10BD     		pop	{r4, pc}
 846              	.LVL61:
 847              	.L69:
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 848              		.loc 1 1387 0
 849 0098 0220     		movs	r0, #2
 850              	.LVL62:
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 851              		.loc 1 1443 0
 852 009a 10BD     		pop	{r4, pc}
 853              	.L74:
 854              		.align	2
 855              	.L73:
 856 009c 00000000 		.word	UART_DMAReceiveCplt
 857 00a0 00000000 		.word	UART_DMARxHalfCplt
 858 00a4 00000000 		.word	UART_DMAError
 859              		.cfi_endproc
 860              	.LFE153:
 862              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 863              		.align	1
 864              		.global	HAL_UART_DMAPause
 865              		.syntax unified
 866              		.thumb
 867              		.thumb_func
 868              		.fpu fpv5-d16
 870              	HAL_UART_DMAPause:
 871              	.LFB154:
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 872              		.loc 1 1451 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              		@ link register save eliminated.
 877              	.LVL63:
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 878              		.loc 1 1452 0
 879 0000 416F     		ldr	r1, [r0, #116]
 880              	.LVL64:
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 881              		.loc 1 1453 0
 882 0002 826F     		ldr	r2, [r0, #120]
 883              	.LVL65:
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 884              		.loc 1 1456 0
 885 0004 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 886 0008 012B     		cmp	r3, #1
 887 000a 2CD0     		beq	.L79
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 888              		.loc 1 1451 0 discriminator 2
ARM GAS  /tmp/ccPLDEwZ.s 			page 77


 889 000c 10B4     		push	{r4}
 890              	.LCFI4:
 891              		.cfi_def_cfa_offset 4
 892              		.cfi_offset 4, -4
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 893              		.loc 1 1456 0 discriminator 2
 894 000e 0123     		movs	r3, #1
 895 0010 80F87030 		strb	r3, [r0, #112]
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 896              		.loc 1 1458 0 discriminator 2
 897 0014 0368     		ldr	r3, [r0]
 898 0016 9C68     		ldr	r4, [r3, #8]
 899 0018 14F0800F 		tst	r4, #128
 900 001c 01D0     		beq	.L77
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 901              		.loc 1 1458 0 is_stmt 0 discriminator 1
 902 001e 2129     		cmp	r1, #33
 903 0020 0DD0     		beq	.L84
 904              	.LVL66:
 905              	.L77:
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 906              		.loc 1 1464 0 is_stmt 1
 907 0022 0368     		ldr	r3, [r0]
 908 0024 9968     		ldr	r1, [r3, #8]
 909 0026 11F0400F 		tst	r1, #64
 910 002a 01D0     		beq	.L78
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 911              		.loc 1 1464 0 is_stmt 0 discriminator 1
 912 002c 222A     		cmp	r2, #34
 913 002e 0BD0     		beq	.L85
 914              	.LVL67:
 915              	.L78:
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 916              		.loc 1 1476 0 is_stmt 1
 917 0030 0023     		movs	r3, #0
 918 0032 80F87030 		strb	r3, [r0, #112]
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 919              		.loc 1 1478 0
 920 0036 1846     		mov	r0, r3
 921              	.LVL68:
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 922              		.loc 1 1479 0
 923 0038 5DF8044B 		ldr	r4, [sp], #4
 924              	.LCFI5:
 925              		.cfi_remember_state
 926              		.cfi_restore 4
 927              		.cfi_def_cfa_offset 0
 928 003c 7047     		bx	lr
 929              	.LVL69:
 930              	.L84:
 931              	.LCFI6:
 932              		.cfi_restore_state
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 933              		.loc 1 1462 0
 934 003e 9968     		ldr	r1, [r3, #8]
 935              	.LVL70:
 936 0040 21F08001 		bic	r1, r1, #128
ARM GAS  /tmp/ccPLDEwZ.s 			page 78


 937 0044 9960     		str	r1, [r3, #8]
 938 0046 ECE7     		b	.L77
 939              	.L85:
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 940              		.loc 1 1468 0
 941 0048 1A68     		ldr	r2, [r3]
 942              	.LVL71:
 943 004a 22F48072 		bic	r2, r2, #256
 944 004e 1A60     		str	r2, [r3]
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 945              		.loc 1 1469 0
 946 0050 0268     		ldr	r2, [r0]
 947 0052 9368     		ldr	r3, [r2, #8]
 948 0054 23F00103 		bic	r3, r3, #1
 949 0058 9360     		str	r3, [r2, #8]
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 950              		.loc 1 1472 0
 951 005a 0268     		ldr	r2, [r0]
 952 005c 9368     		ldr	r3, [r2, #8]
 953 005e 23F04003 		bic	r3, r3, #64
 954 0062 9360     		str	r3, [r2, #8]
 955 0064 E4E7     		b	.L78
 956              	.LVL72:
 957              	.L79:
 958              	.LCFI7:
 959              		.cfi_def_cfa_offset 0
 960              		.cfi_restore 4
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 961              		.loc 1 1456 0
 962 0066 0220     		movs	r0, #2
 963              	.LVL73:
 964 0068 7047     		bx	lr
 965              		.cfi_endproc
 966              	.LFE154:
 968              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 969              		.align	1
 970              		.global	HAL_UART_DMAResume
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 974              		.fpu fpv5-d16
 976              	HAL_UART_DMAResume:
 977              	.LFB155:
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
 978              		.loc 1 1487 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 983              	.LVL74:
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 984              		.loc 1 1489 0
 985 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 986 0004 012B     		cmp	r3, #1
 987 0006 26D0     		beq	.L90
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 988              		.loc 1 1489 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccPLDEwZ.s 			page 79


 989 0008 0123     		movs	r3, #1
 990 000a 80F87030 		strb	r3, [r0, #112]
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 991              		.loc 1 1491 0 is_stmt 1 discriminator 2
 992 000e 436F     		ldr	r3, [r0, #116]
 993 0010 212B     		cmp	r3, #33
 994 0012 07D0     		beq	.L91
 995              	.L88:
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 996              		.loc 1 1496 0
 997 0014 836F     		ldr	r3, [r0, #120]
 998 0016 222B     		cmp	r3, #34
 999 0018 0AD0     		beq	.L92
 1000              	.L89:
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1001              		.loc 1 1510 0
 1002 001a 0023     		movs	r3, #0
 1003 001c 80F87030 		strb	r3, [r0, #112]
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1004              		.loc 1 1512 0
 1005 0020 1846     		mov	r0, r3
 1006              	.LVL75:
 1007 0022 7047     		bx	lr
 1008              	.LVL76:
 1009              	.L91:
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1010              		.loc 1 1494 0
 1011 0024 0268     		ldr	r2, [r0]
 1012 0026 9368     		ldr	r3, [r2, #8]
 1013 0028 43F08003 		orr	r3, r3, #128
 1014 002c 9360     		str	r3, [r2, #8]
 1015 002e F1E7     		b	.L88
 1016              	.L92:
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1017              		.loc 1 1499 0
 1018 0030 0368     		ldr	r3, [r0]
 1019 0032 0822     		movs	r2, #8
 1020 0034 1A62     		str	r2, [r3, #32]
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1021              		.loc 1 1502 0
 1022 0036 0268     		ldr	r2, [r0]
 1023 0038 1368     		ldr	r3, [r2]
 1024 003a 43F48073 		orr	r3, r3, #256
 1025 003e 1360     		str	r3, [r2]
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1026              		.loc 1 1503 0
 1027 0040 0268     		ldr	r2, [r0]
 1028 0042 9368     		ldr	r3, [r2, #8]
 1029 0044 43F00103 		orr	r3, r3, #1
 1030 0048 9360     		str	r3, [r2, #8]
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1031              		.loc 1 1506 0
 1032 004a 0268     		ldr	r2, [r0]
 1033 004c 9368     		ldr	r3, [r2, #8]
 1034 004e 43F04003 		orr	r3, r3, #64
 1035 0052 9360     		str	r3, [r2, #8]
 1036 0054 E1E7     		b	.L89
ARM GAS  /tmp/ccPLDEwZ.s 			page 80


 1037              	.L90:
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1038              		.loc 1 1489 0
 1039 0056 0220     		movs	r0, #2
 1040              	.LVL77:
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1041              		.loc 1 1513 0
 1042 0058 7047     		bx	lr
 1043              		.cfi_endproc
 1044              	.LFE155:
 1046              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1047              		.align	1
 1048              		.global	HAL_UART_DMAStop
 1049              		.syntax unified
 1050              		.thumb
 1051              		.thumb_func
 1052              		.fpu fpv5-d16
 1054              	HAL_UART_DMAStop:
 1055              	.LFB156:
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
 1056              		.loc 1 1521 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 1060              	.LVL78:
 1061 0000 38B5     		push	{r3, r4, r5, lr}
 1062              	.LCFI8:
 1063              		.cfi_def_cfa_offset 16
 1064              		.cfi_offset 3, -16
 1065              		.cfi_offset 4, -12
 1066              		.cfi_offset 5, -8
 1067              		.cfi_offset 14, -4
 1068 0002 0446     		mov	r4, r0
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1069              		.loc 1 1529 0
 1070 0004 416F     		ldr	r1, [r0, #116]
 1071              	.LVL79:
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1072              		.loc 1 1530 0
 1073 0006 856F     		ldr	r5, [r0, #120]
 1074              	.LVL80:
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1075              		.loc 1 1533 0
 1076 0008 0368     		ldr	r3, [r0]
 1077 000a 9A68     		ldr	r2, [r3, #8]
 1078 000c 12F0800F 		tst	r2, #128
 1079 0010 01D0     		beq	.L94
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1080              		.loc 1 1533 0 is_stmt 0 discriminator 1
 1081 0012 2129     		cmp	r1, #33
 1082 0014 08D0     		beq	.L101
 1083              	.LVL81:
 1084              	.L94:
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1085              		.loc 1 1557 0 is_stmt 1
 1086 0016 2368     		ldr	r3, [r4]
 1087 0018 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccPLDEwZ.s 			page 81


 1088 001a 12F0400F 		tst	r2, #64
 1089 001e 30D0     		beq	.L98
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1090              		.loc 1 1557 0 is_stmt 0 discriminator 1
 1091 0020 222D     		cmp	r5, #34
 1092 0022 17D0     		beq	.L102
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1093              		.loc 1 1580 0 is_stmt 1
 1094 0024 0020     		movs	r0, #0
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1095              		.loc 1 1581 0
 1096 0026 38BD     		pop	{r3, r4, r5, pc}
 1097              	.LVL82:
 1098              	.L101:
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1099              		.loc 1 1536 0
 1100 0028 9A68     		ldr	r2, [r3, #8]
 1101 002a 22F08002 		bic	r2, r2, #128
 1102 002e 9A60     		str	r2, [r3, #8]
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1103              		.loc 1 1539 0
 1104 0030 806E     		ldr	r0, [r0, #104]
 1105              	.LVL83:
 1106 0032 10B1     		cbz	r0, .L95
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1107              		.loc 1 1541 0
 1108 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1109              	.LVL84:
 1110 0038 18B9     		cbnz	r0, .L103
 1111              	.L95:
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1112              		.loc 1 1553 0
 1113 003a 2046     		mov	r0, r4
 1114 003c FFF7FEFF 		bl	UART_EndTxTransfer
 1115              	.LVL85:
 1116 0040 E9E7     		b	.L94
 1117              	.L103:
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1118              		.loc 1 1543 0
 1119 0042 A06E     		ldr	r0, [r4, #104]
 1120 0044 FFF7FEFF 		bl	HAL_DMA_GetError
 1121              	.LVL86:
 1122 0048 2028     		cmp	r0, #32
 1123 004a F6D1     		bne	.L95
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1124              		.loc 1 1546 0
 1125 004c 1023     		movs	r3, #16
 1126 004e E367     		str	r3, [r4, #124]
1548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1127              		.loc 1 1548 0
 1128 0050 0320     		movs	r0, #3
 1129 0052 38BD     		pop	{r3, r4, r5, pc}
 1130              	.LVL87:
 1131              	.L102:
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1132              		.loc 1 1560 0
 1133 0054 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccPLDEwZ.s 			page 82


 1134 0056 22F04002 		bic	r2, r2, #64
 1135 005a 9A60     		str	r2, [r3, #8]
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1136              		.loc 1 1563 0
 1137 005c E06E     		ldr	r0, [r4, #108]
 1138 005e 10B1     		cbz	r0, .L97
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1139              		.loc 1 1565 0
 1140 0060 FFF7FEFF 		bl	HAL_DMA_Abort
 1141              	.LVL88:
 1142 0064 20B9     		cbnz	r0, .L104
 1143              	.L97:
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1144              		.loc 1 1577 0
 1145 0066 2046     		mov	r0, r4
 1146 0068 FFF7FEFF 		bl	UART_EndRxTransfer
 1147              	.LVL89:
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1148              		.loc 1 1580 0
 1149 006c 0020     		movs	r0, #0
 1150 006e 38BD     		pop	{r3, r4, r5, pc}
 1151              	.LVL90:
 1152              	.L104:
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1153              		.loc 1 1567 0
 1154 0070 E06E     		ldr	r0, [r4, #108]
 1155 0072 FFF7FEFF 		bl	HAL_DMA_GetError
 1156              	.LVL91:
 1157 0076 2028     		cmp	r0, #32
 1158 0078 F5D1     		bne	.L97
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1159              		.loc 1 1570 0
 1160 007a 1023     		movs	r3, #16
 1161 007c E367     		str	r3, [r4, #124]
1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1162              		.loc 1 1572 0
 1163 007e 0320     		movs	r0, #3
 1164 0080 38BD     		pop	{r3, r4, r5, pc}
 1165              	.LVL92:
 1166              	.L98:
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1167              		.loc 1 1580 0
 1168 0082 0020     		movs	r0, #0
 1169 0084 38BD     		pop	{r3, r4, r5, pc}
 1170              		.cfi_endproc
 1171              	.LFE156:
 1173              		.section	.text.HAL_UART_Abort,"ax",%progbits
 1174              		.align	1
 1175              		.global	HAL_UART_Abort
 1176              		.syntax unified
 1177              		.thumb
 1178              		.thumb_func
 1179              		.fpu fpv5-d16
 1181              	HAL_UART_Abort:
 1182              	.LFB157:
1596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1183              		.loc 1 1596 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 83


 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              	.LVL93:
 1188 0000 10B5     		push	{r4, lr}
 1189              	.LCFI9:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 4, -8
 1192              		.cfi_offset 14, -4
 1193 0002 0446     		mov	r4, r0
1598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1194              		.loc 1 1598 0
 1195 0004 0268     		ldr	r2, [r0]
 1196 0006 1368     		ldr	r3, [r2]
 1197 0008 23F4F073 		bic	r3, r3, #480
 1198 000c 1360     		str	r3, [r2]
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1199              		.loc 1 1599 0
 1200 000e 0268     		ldr	r2, [r0]
 1201 0010 9368     		ldr	r3, [r2, #8]
 1202 0012 23F00103 		bic	r3, r3, #1
 1203 0016 9360     		str	r3, [r2, #8]
1602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1204              		.loc 1 1602 0
 1205 0018 0368     		ldr	r3, [r0]
 1206 001a 9A68     		ldr	r2, [r3, #8]
 1207 001c 12F0800F 		tst	r2, #128
 1208 0020 0BD0     		beq	.L106
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1209              		.loc 1 1604 0
 1210 0022 9A68     		ldr	r2, [r3, #8]
 1211 0024 22F08002 		bic	r2, r2, #128
 1212 0028 9A60     		str	r2, [r3, #8]
1607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1213              		.loc 1 1607 0
 1214 002a 836E     		ldr	r3, [r0, #104]
 1215 002c 2BB1     		cbz	r3, .L106
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1216              		.loc 1 1611 0
 1217 002e 0022     		movs	r2, #0
 1218 0030 1A65     		str	r2, [r3, #80]
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1219              		.loc 1 1613 0
 1220 0032 806E     		ldr	r0, [r0, #104]
 1221              	.LVL94:
 1222 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1223              	.LVL95:
 1224 0038 10BB     		cbnz	r0, .L110
 1225              	.L106:
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1226              		.loc 1 1627 0
 1227 003a 2368     		ldr	r3, [r4]
 1228 003c 9A68     		ldr	r2, [r3, #8]
 1229 003e 12F0400F 		tst	r2, #64
 1230 0042 0BD0     		beq	.L108
1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1231              		.loc 1 1629 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 84


 1232 0044 9A68     		ldr	r2, [r3, #8]
 1233 0046 22F04002 		bic	r2, r2, #64
 1234 004a 9A60     		str	r2, [r3, #8]
1632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1235              		.loc 1 1632 0
 1236 004c E36E     		ldr	r3, [r4, #108]
 1237 004e 2BB1     		cbz	r3, .L108
1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1238              		.loc 1 1636 0
 1239 0050 0022     		movs	r2, #0
 1240 0052 1A65     		str	r2, [r3, #80]
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1241              		.loc 1 1638 0
 1242 0054 E06E     		ldr	r0, [r4, #108]
 1243 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 1244              	.LVL96:
 1245 005a D0B9     		cbnz	r0, .L111
 1246              	.L108:
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 1247              		.loc 1 1652 0
 1248 005c 0020     		movs	r0, #0
 1249 005e A4F85200 		strh	r0, [r4, #82]	@ movhi
1653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1250              		.loc 1 1653 0
 1251 0062 A4F85A00 		strh	r0, [r4, #90]	@ movhi
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1252              		.loc 1 1656 0
 1253 0066 2368     		ldr	r3, [r4]
 1254 0068 0F22     		movs	r2, #15
 1255 006a 1A62     		str	r2, [r3, #32]
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1256              		.loc 1 1660 0
 1257 006c 2268     		ldr	r2, [r4]
 1258 006e 9369     		ldr	r3, [r2, #24]
 1259 0070 43F00803 		orr	r3, r3, #8
 1260 0074 9361     		str	r3, [r2, #24]
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 1261              		.loc 1 1663 0
 1262 0076 2023     		movs	r3, #32
 1263 0078 6367     		str	r3, [r4, #116]
1664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1264              		.loc 1 1664 0
 1265 007a A367     		str	r3, [r4, #120]
1667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1266              		.loc 1 1667 0
 1267 007c E067     		str	r0, [r4, #124]
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1268              		.loc 1 1670 0
 1269 007e 10BD     		pop	{r4, pc}
 1270              	.LVL97:
 1271              	.L110:
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1272              		.loc 1 1615 0
 1273 0080 A06E     		ldr	r0, [r4, #104]
 1274 0082 FFF7FEFF 		bl	HAL_DMA_GetError
 1275              	.LVL98:
 1276 0086 2028     		cmp	r0, #32
ARM GAS  /tmp/ccPLDEwZ.s 			page 85


 1277 0088 D7D1     		bne	.L106
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1278              		.loc 1 1618 0
 1279 008a 1023     		movs	r3, #16
 1280 008c E367     		str	r3, [r4, #124]
1620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1281              		.loc 1 1620 0
 1282 008e 0320     		movs	r0, #3
 1283 0090 10BD     		pop	{r4, pc}
 1284              	.LVL99:
 1285              	.L111:
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1286              		.loc 1 1640 0
 1287 0092 E06E     		ldr	r0, [r4, #108]
 1288 0094 FFF7FEFF 		bl	HAL_DMA_GetError
 1289              	.LVL100:
 1290 0098 2028     		cmp	r0, #32
 1291 009a DFD1     		bne	.L108
1643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1292              		.loc 1 1643 0
 1293 009c 1023     		movs	r3, #16
 1294 009e E367     		str	r3, [r4, #124]
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1295              		.loc 1 1645 0
 1296 00a0 0320     		movs	r0, #3
 1297 00a2 10BD     		pop	{r4, pc}
 1298              		.cfi_endproc
 1299              	.LFE157:
 1301              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 1302              		.align	1
 1303              		.global	HAL_UART_AbortTransmit
 1304              		.syntax unified
 1305              		.thumb
 1306              		.thumb_func
 1307              		.fpu fpv5-d16
 1309              	HAL_UART_AbortTransmit:
 1310              	.LFB158:
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 1311              		.loc 1 1685 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              	.LVL101:
 1316 0000 10B5     		push	{r4, lr}
 1317              	.LCFI10:
 1318              		.cfi_def_cfa_offset 8
 1319              		.cfi_offset 4, -8
 1320              		.cfi_offset 14, -4
 1321 0002 0446     		mov	r4, r0
1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1322              		.loc 1 1687 0
 1323 0004 0268     		ldr	r2, [r0]
 1324 0006 1368     		ldr	r3, [r2]
 1325 0008 23F0C003 		bic	r3, r3, #192
 1326 000c 1360     		str	r3, [r2]
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1327              		.loc 1 1690 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 86


 1328 000e 0368     		ldr	r3, [r0]
 1329 0010 9A68     		ldr	r2, [r3, #8]
 1330 0012 12F0800F 		tst	r2, #128
 1331 0016 0BD0     		beq	.L113
1692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1332              		.loc 1 1692 0
 1333 0018 9A68     		ldr	r2, [r3, #8]
 1334 001a 22F08002 		bic	r2, r2, #128
 1335 001e 9A60     		str	r2, [r3, #8]
1695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1336              		.loc 1 1695 0
 1337 0020 836E     		ldr	r3, [r0, #104]
 1338 0022 2BB1     		cbz	r3, .L113
1699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1339              		.loc 1 1699 0
 1340 0024 0022     		movs	r2, #0
 1341 0026 1A65     		str	r2, [r3, #80]
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1342              		.loc 1 1701 0
 1343 0028 806E     		ldr	r0, [r0, #104]
 1344              	.LVL102:
 1345 002a FFF7FEFF 		bl	HAL_DMA_Abort
 1346              	.LVL103:
 1347 002e 28B9     		cbnz	r0, .L116
 1348              	.L113:
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1349              		.loc 1 1715 0
 1350 0030 0020     		movs	r0, #0
 1351 0032 A4F85200 		strh	r0, [r4, #82]	@ movhi
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1352              		.loc 1 1719 0
 1353 0036 2023     		movs	r3, #32
 1354 0038 6367     		str	r3, [r4, #116]
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1355              		.loc 1 1722 0
 1356 003a 10BD     		pop	{r4, pc}
 1357              	.LVL104:
 1358              	.L116:
1703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1359              		.loc 1 1703 0
 1360 003c A06E     		ldr	r0, [r4, #104]
 1361 003e FFF7FEFF 		bl	HAL_DMA_GetError
 1362              	.LVL105:
 1363 0042 2028     		cmp	r0, #32
 1364 0044 F4D1     		bne	.L113
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1365              		.loc 1 1706 0
 1366 0046 1023     		movs	r3, #16
 1367 0048 E367     		str	r3, [r4, #124]
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1368              		.loc 1 1708 0
 1369 004a 0320     		movs	r0, #3
 1370 004c 10BD     		pop	{r4, pc}
 1371              		.cfi_endproc
 1372              	.LFE158:
 1374              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 1375              		.align	1
ARM GAS  /tmp/ccPLDEwZ.s 			page 87


 1376              		.global	HAL_UART_AbortReceive
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1380              		.fpu fpv5-d16
 1382              	HAL_UART_AbortReceive:
 1383              	.LFB159:
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1384              		.loc 1 1737 0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388              	.LVL106:
 1389 0000 10B5     		push	{r4, lr}
 1390              	.LCFI11:
 1391              		.cfi_def_cfa_offset 8
 1392              		.cfi_offset 4, -8
 1393              		.cfi_offset 14, -4
 1394 0002 0446     		mov	r4, r0
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1395              		.loc 1 1739 0
 1396 0004 0268     		ldr	r2, [r0]
 1397 0006 1368     		ldr	r3, [r2]
 1398 0008 23F49073 		bic	r3, r3, #288
 1399 000c 1360     		str	r3, [r2]
1740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1400              		.loc 1 1740 0
 1401 000e 0268     		ldr	r2, [r0]
 1402 0010 9368     		ldr	r3, [r2, #8]
 1403 0012 23F00103 		bic	r3, r3, #1
 1404 0016 9360     		str	r3, [r2, #8]
1743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1405              		.loc 1 1743 0
 1406 0018 0368     		ldr	r3, [r0]
 1407 001a 9A68     		ldr	r2, [r3, #8]
 1408 001c 12F0400F 		tst	r2, #64
 1409 0020 0BD0     		beq	.L118
1745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1410              		.loc 1 1745 0
 1411 0022 9A68     		ldr	r2, [r3, #8]
 1412 0024 22F04002 		bic	r2, r2, #64
 1413 0028 9A60     		str	r2, [r3, #8]
1748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1414              		.loc 1 1748 0
 1415 002a C36E     		ldr	r3, [r0, #108]
 1416 002c 2BB1     		cbz	r3, .L118
1752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1417              		.loc 1 1752 0
 1418 002e 0022     		movs	r2, #0
 1419 0030 1A65     		str	r2, [r3, #80]
1754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1420              		.loc 1 1754 0
 1421 0032 C06E     		ldr	r0, [r0, #108]
 1422              	.LVL107:
 1423 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1424              	.LVL108:
 1425 0038 68B9     		cbnz	r0, .L121
ARM GAS  /tmp/ccPLDEwZ.s 			page 88


 1426              	.L118:
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1427              		.loc 1 1768 0
 1428 003a 0020     		movs	r0, #0
 1429 003c A4F85A00 		strh	r0, [r4, #90]	@ movhi
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1430              		.loc 1 1771 0
 1431 0040 2368     		ldr	r3, [r4]
 1432 0042 0F22     		movs	r2, #15
 1433 0044 1A62     		str	r2, [r3, #32]
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1434              		.loc 1 1774 0
 1435 0046 2268     		ldr	r2, [r4]
 1436 0048 9369     		ldr	r3, [r2, #24]
 1437 004a 43F00803 		orr	r3, r3, #8
 1438 004e 9361     		str	r3, [r2, #24]
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1439              		.loc 1 1777 0
 1440 0050 2023     		movs	r3, #32
 1441 0052 A367     		str	r3, [r4, #120]
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1442              		.loc 1 1780 0
 1443 0054 10BD     		pop	{r4, pc}
 1444              	.LVL109:
 1445              	.L121:
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1446              		.loc 1 1756 0
 1447 0056 E06E     		ldr	r0, [r4, #108]
 1448 0058 FFF7FEFF 		bl	HAL_DMA_GetError
 1449              	.LVL110:
 1450 005c 2028     		cmp	r0, #32
 1451 005e ECD1     		bne	.L118
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1452              		.loc 1 1759 0
 1453 0060 1023     		movs	r3, #16
 1454 0062 E367     		str	r3, [r4, #124]
1761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1455              		.loc 1 1761 0
 1456 0064 0320     		movs	r0, #3
 1457 0066 10BD     		pop	{r4, pc}
 1458              		.cfi_endproc
 1459              	.LFE159:
 1461              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1462              		.align	1
 1463              		.weak	HAL_UART_TxCpltCallback
 1464              		.syntax unified
 1465              		.thumb
 1466              		.thumb_func
 1467              		.fpu fpv5-d16
 1469              	HAL_UART_TxCpltCallback:
 1470              	.LFB164:
2279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1471              		.loc 1 2279 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475              		@ link register save eliminated.
ARM GAS  /tmp/ccPLDEwZ.s 			page 89


 1476              	.LVL111:
 1477 0000 7047     		bx	lr
 1478              		.cfi_endproc
 1479              	.LFE164:
 1481              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 1482              		.align	1
 1483              		.syntax unified
 1484              		.thumb
 1485              		.thumb_func
 1486              		.fpu fpv5-d16
 1488              	UART_DMATransmitCplt:
 1489              	.LFB186:
2949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1490              		.loc 1 2949 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 1494              	.LVL112:
2949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1495              		.loc 1 2949 0
 1496 0000 08B5     		push	{r3, lr}
 1497              	.LCFI12:
 1498              		.cfi_def_cfa_offset 8
 1499              		.cfi_offset 3, -8
 1500              		.cfi_offset 14, -4
2950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1501              		.loc 1 2950 0
 1502 0002 836B     		ldr	r3, [r0, #56]
 1503              	.LVL113:
2953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1504              		.loc 1 2953 0
 1505 0004 C269     		ldr	r2, [r0, #28]
 1506 0006 B2F5807F 		cmp	r2, #256
 1507 000a 0DD0     		beq	.L124
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1508              		.loc 1 2955 0
 1509 000c 0022     		movs	r2, #0
 1510 000e A3F85220 		strh	r2, [r3, #82]	@ movhi
2959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1511              		.loc 1 2959 0
 1512 0012 1968     		ldr	r1, [r3]
 1513 0014 8A68     		ldr	r2, [r1, #8]
 1514 0016 22F08002 		bic	r2, r2, #128
 1515 001a 8A60     		str	r2, [r1, #8]
2962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1516              		.loc 1 2962 0
 1517 001c 1A68     		ldr	r2, [r3]
 1518 001e 1368     		ldr	r3, [r2]
 1519              	.LVL114:
 1520 0020 43F04003 		orr	r3, r3, #64
 1521 0024 1360     		str	r3, [r2]
 1522 0026 08BD     		pop	{r3, pc}
 1523              	.LVL115:
 1524              	.L124:
2972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1525              		.loc 1 2972 0
 1526 0028 1846     		mov	r0, r3
ARM GAS  /tmp/ccPLDEwZ.s 			page 90


 1527              	.LVL116:
 1528 002a FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1529              	.LVL117:
 1530 002e 08BD     		pop	{r3, pc}
 1531              		.cfi_endproc
 1532              	.LFE186:
 1534              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 1535              		.align	1
 1536              		.syntax unified
 1537              		.thumb
 1538              		.thumb_func
 1539              		.fpu fpv5-d16
 1541              	UART_EndTransmit_IT:
 1542              	.LFB198:
3329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
3333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
3334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 1543              		.loc 1 3338 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547              	.LVL118:
 1548 0000 08B5     		push	{r3, lr}
 1549              	.LCFI13:
 1550              		.cfi_def_cfa_offset 8
 1551              		.cfi_offset 3, -8
 1552              		.cfi_offset 14, -4
3339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 1553              		.loc 1 3340 0
 1554 0002 0168     		ldr	r1, [r0]
 1555 0004 0A68     		ldr	r2, [r1]
 1556 0006 22F04002 		bic	r2, r2, #64
 1557 000a 0A60     		str	r2, [r1]
3341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 1558              		.loc 1 3343 0
 1559 000c 2022     		movs	r2, #32
 1560 000e 4267     		str	r2, [r0, #116]
3344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Cleat TxISR function pointer */
3346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
 1561              		.loc 1 3346 0
 1562 0010 0022     		movs	r2, #0
 1563 0012 4266     		str	r2, [r0, #100]
3347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxCpltCallback(huart);
ARM GAS  /tmp/ccPLDEwZ.s 			page 91


3351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 1564              		.loc 1 3353 0
 1565 0014 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1566              	.LVL119:
 1567 0018 08BD     		pop	{r3, pc}
 1568              		.cfi_endproc
 1569              	.LFE198:
 1571              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 1572              		.align	1
 1573              		.weak	HAL_UART_TxHalfCpltCallback
 1574              		.syntax unified
 1575              		.thumb
 1576              		.thumb_func
 1577              		.fpu fpv5-d16
 1579              	HAL_UART_TxHalfCpltCallback:
 1580              	.LFB165:
2294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1581              		.loc 1 2294 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              		@ link register save eliminated.
 1586              	.LVL120:
 1587 0000 7047     		bx	lr
 1588              		.cfi_endproc
 1589              	.LFE165:
 1591              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 1592              		.align	1
 1593              		.syntax unified
 1594              		.thumb
 1595              		.thumb_func
 1596              		.fpu fpv5-d16
 1598              	UART_DMATxHalfCplt:
 1599              	.LFB187:
2983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1600              		.loc 1 2983 0
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 0
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 1604              	.LVL121:
2983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1605              		.loc 1 2983 0
 1606 0000 08B5     		push	{r3, lr}
 1607              	.LCFI14:
 1608              		.cfi_def_cfa_offset 8
 1609              		.cfi_offset 3, -8
 1610              		.cfi_offset 14, -4
 1611              	.LVL122:
2991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1612              		.loc 1 2991 0
 1613 0002 806B     		ldr	r0, [r0, #56]
 1614              	.LVL123:
 1615 0004 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
 1616              	.LVL124:
 1617 0008 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccPLDEwZ.s 			page 92


 1618              		.cfi_endproc
 1619              	.LFE187:
 1621              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1622              		.align	1
 1623              		.weak	HAL_UART_RxCpltCallback
 1624              		.syntax unified
 1625              		.thumb
 1626              		.thumb_func
 1627              		.fpu fpv5-d16
 1629              	HAL_UART_RxCpltCallback:
 1630              	.LFB166:
2309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1631              		.loc 1 2309 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636              	.LVL125:
 1637 0000 7047     		bx	lr
 1638              		.cfi_endproc
 1639              	.LFE166:
 1641              		.section	.text.UART_RxISR_8BIT,"ax",%progbits
 1642              		.align	1
 1643              		.syntax unified
 1644              		.thumb
 1645              		.thumb_func
 1646              		.fpu fpv5-d16
 1648              	UART_RxISR_8BIT:
 1649              	.LFB199:
3354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief RX interrrupt handler for 7 or 8 bits data word length .
3359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
3363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 1650              		.loc 1 3363 0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 1654              	.LVL126:
 1655              		.loc 1 3363 0
 1656 0000 08B5     		push	{r3, lr}
 1657              	.LCFI15:
 1658              		.cfi_def_cfa_offset 8
 1659              		.cfi_offset 3, -8
 1660              		.cfi_offset 14, -4
3364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 1661              		.loc 1 3364 0
 1662 0002 B0F85C30 		ldrh	r3, [r0, #92]
 1663              	.LVL127:
3365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t  uhdata;
3366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
ARM GAS  /tmp/ccPLDEwZ.s 			page 93


3368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1664              		.loc 1 3368 0
 1665 0006 826F     		ldr	r2, [r0, #120]
 1666 0008 222A     		cmp	r2, #34
 1667 000a 05D0     		beq	.L137
3369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
3372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr++;
3373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
3374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
3376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupts */
3378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
3379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = NULL;
3388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 1668              		.loc 1 3401 0
 1669 000c 0268     		ldr	r2, [r0]
 1670 000e 9369     		ldr	r3, [r2, #24]
 1671              	.LVL128:
 1672 0010 43F00803 		orr	r3, r3, #8
 1673 0014 9361     		str	r3, [r2, #24]
 1674              	.LVL129:
 1675              	.L133:
 1676 0016 08BD     		pop	{r3, pc}
 1677              	.LVL130:
 1678              	.L137:
3370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 1679              		.loc 1 3370 0
 1680 0018 0268     		ldr	r2, [r0]
 1681 001a 516A     		ldr	r1, [r2, #36]
 1682              	.LVL131:
3371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr++;
 1683              		.loc 1 3371 0
 1684 001c 426D     		ldr	r2, [r0, #84]
ARM GAS  /tmp/ccPLDEwZ.s 			page 94


 1685 001e DBB2     		uxtb	r3, r3
 1686              	.LVL132:
 1687 0020 0B40     		ands	r3, r3, r1
 1688 0022 1370     		strb	r3, [r2]
 1689              	.LVL133:
3372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
 1690              		.loc 1 3372 0
 1691 0024 436D     		ldr	r3, [r0, #84]
 1692 0026 0133     		adds	r3, r3, #1
 1693 0028 4365     		str	r3, [r0, #84]
3373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1694              		.loc 1 3373 0
 1695 002a B0F85A30 		ldrh	r3, [r0, #90]
 1696 002e 9BB2     		uxth	r3, r3
 1697 0030 013B     		subs	r3, r3, #1
 1698 0032 9BB2     		uxth	r3, r3
 1699 0034 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1700              		.loc 1 3375 0
 1701 0038 B0F85A30 		ldrh	r3, [r0, #90]
 1702 003c 9BB2     		uxth	r3, r3
 1703 003e 002B     		cmp	r3, #0
 1704 0040 E9D1     		bne	.L133
3378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1705              		.loc 1 3378 0
 1706 0042 0268     		ldr	r2, [r0]
 1707 0044 1368     		ldr	r3, [r2]
 1708 0046 23F49073 		bic	r3, r3, #288
 1709 004a 1360     		str	r3, [r2]
3381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1710              		.loc 1 3381 0
 1711 004c 0268     		ldr	r2, [r0]
 1712 004e 9368     		ldr	r3, [r2, #8]
 1713 0050 23F00103 		bic	r3, r3, #1
 1714 0054 9360     		str	r3, [r2, #8]
3384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1715              		.loc 1 3384 0
 1716 0056 2023     		movs	r3, #32
 1717 0058 8367     		str	r3, [r0, #120]
3387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1718              		.loc 1 3387 0
 1719 005a 0023     		movs	r3, #0
 1720 005c 0366     		str	r3, [r0, #96]
3394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1721              		.loc 1 3394 0
 1722 005e FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 1723              	.LVL134:
 1724 0062 08BD     		pop	{r3, pc}
 1725              		.cfi_endproc
 1726              	.LFE199:
 1728              		.section	.text.UART_RxISR_16BIT,"ax",%progbits
 1729              		.align	1
 1730              		.syntax unified
 1731              		.thumb
 1732              		.thumb_func
 1733              		.fpu fpv5-d16
 1735              	UART_RxISR_16BIT:
ARM GAS  /tmp/ccPLDEwZ.s 			page 95


 1736              	.LFB200:
3402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief RX interrrupt handler for 9 bits data word length .
3407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
3409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
3413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 1737              		.loc 1 3413 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 0
 1740              		@ frame_needed = 0, uses_anonymous_args = 0
 1741              	.LVL135:
 1742 0000 08B5     		push	{r3, lr}
 1743              	.LCFI16:
 1744              		.cfi_def_cfa_offset 8
 1745              		.cfi_offset 3, -8
 1746              		.cfi_offset 14, -4
3414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *tmp;
3415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 1747              		.loc 1 3415 0
 1748 0002 B0F85C20 		ldrh	r2, [r0, #92]
 1749              	.LVL136:
3416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t  uhdata;
3417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1750              		.loc 1 3419 0
 1751 0006 836F     		ldr	r3, [r0, #120]
 1752 0008 222B     		cmp	r3, #34
 1753 000a 05D0     		beq	.L142
3420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
3423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
3424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
3425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
3426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
3428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
3430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
3431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = NULL;
3440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 96


3441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 1754              		.loc 1 3453 0
 1755 000c 0268     		ldr	r2, [r0]
 1756              	.LVL137:
 1757 000e 9369     		ldr	r3, [r2, #24]
 1758 0010 43F00803 		orr	r3, r3, #8
 1759 0014 9361     		str	r3, [r2, #24]
 1760              	.LVL138:
 1761              	.L138:
 1762 0016 08BD     		pop	{r3, pc}
 1763              	.LVL139:
 1764              	.L142:
3421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
 1765              		.loc 1 3421 0
 1766 0018 0368     		ldr	r3, [r0]
 1767 001a 5B6A     		ldr	r3, [r3, #36]
 1768              	.LVL140:
3422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
 1769              		.loc 1 3422 0
 1770 001c 416D     		ldr	r1, [r0, #84]
 1771              	.LVL141:
3423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
 1772              		.loc 1 3423 0
 1773 001e 1A40     		ands	r2, r2, r3
 1774              	.LVL142:
 1775 0020 0A80     		strh	r2, [r1]	@ movhi
 1776              	.LVL143:
3424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
 1777              		.loc 1 3424 0
 1778 0022 436D     		ldr	r3, [r0, #84]
 1779              	.LVL144:
 1780 0024 0233     		adds	r3, r3, #2
 1781 0026 4365     		str	r3, [r0, #84]
3425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1782              		.loc 1 3425 0
 1783 0028 B0F85A30 		ldrh	r3, [r0, #90]
 1784 002c 9BB2     		uxth	r3, r3
 1785 002e 013B     		subs	r3, r3, #1
 1786 0030 9BB2     		uxth	r3, r3
 1787 0032 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1788              		.loc 1 3427 0
 1789 0036 B0F85A30 		ldrh	r3, [r0, #90]
 1790 003a 9BB2     		uxth	r3, r3
 1791 003c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccPLDEwZ.s 			page 97


 1792 003e EAD1     		bne	.L138
3430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1793              		.loc 1 3430 0
 1794 0040 0268     		ldr	r2, [r0]
 1795 0042 1368     		ldr	r3, [r2]
 1796 0044 23F49073 		bic	r3, r3, #288
 1797 0048 1360     		str	r3, [r2]
3433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1798              		.loc 1 3433 0
 1799 004a 0268     		ldr	r2, [r0]
 1800 004c 9368     		ldr	r3, [r2, #8]
 1801 004e 23F00103 		bic	r3, r3, #1
 1802 0052 9360     		str	r3, [r2, #8]
3436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1803              		.loc 1 3436 0
 1804 0054 2023     		movs	r3, #32
 1805 0056 8367     		str	r3, [r0, #120]
3439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1806              		.loc 1 3439 0
 1807 0058 0023     		movs	r3, #0
 1808 005a 0366     		str	r3, [r0, #96]
3446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1809              		.loc 1 3446 0
 1810 005c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 1811              	.LVL145:
 1812 0060 08BD     		pop	{r3, pc}
 1813              		.cfi_endproc
 1814              	.LFE200:
 1816              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 1817              		.align	1
 1818              		.syntax unified
 1819              		.thumb
 1820              		.thumb_func
 1821              		.fpu fpv5-d16
 1823              	UART_DMAReceiveCplt:
 1824              	.LFB188:
3001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1825              		.loc 1 3001 0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829              	.LVL146:
 1830 0000 08B5     		push	{r3, lr}
 1831              	.LCFI17:
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 3, -8
 1834              		.cfi_offset 14, -4
3002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1835              		.loc 1 3002 0
 1836 0002 836B     		ldr	r3, [r0, #56]
 1837              	.LVL147:
3005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1838              		.loc 1 3005 0
 1839 0004 C269     		ldr	r2, [r0, #28]
 1840 0006 B2F5807F 		cmp	r2, #256
 1841 000a 13D0     		beq	.L144
3007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 98


 1842              		.loc 1 3007 0
 1843 000c 0022     		movs	r2, #0
 1844 000e A3F85A20 		strh	r2, [r3, #90]	@ movhi
3010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1845              		.loc 1 3010 0
 1846 0012 1968     		ldr	r1, [r3]
 1847 0014 0A68     		ldr	r2, [r1]
 1848 0016 22F48072 		bic	r2, r2, #256
 1849 001a 0A60     		str	r2, [r1]
3011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1850              		.loc 1 3011 0
 1851 001c 1968     		ldr	r1, [r3]
 1852 001e 8A68     		ldr	r2, [r1, #8]
 1853 0020 22F00102 		bic	r2, r2, #1
 1854 0024 8A60     		str	r2, [r1, #8]
3015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1855              		.loc 1 3015 0
 1856 0026 1968     		ldr	r1, [r3]
 1857 0028 8A68     		ldr	r2, [r1, #8]
 1858 002a 22F04002 		bic	r2, r2, #64
 1859 002e 8A60     		str	r2, [r1, #8]
3018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1860              		.loc 1 3018 0
 1861 0030 2022     		movs	r2, #32
 1862 0032 9A67     		str	r2, [r3, #120]
 1863              	.L144:
3026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1864              		.loc 1 3026 0
 1865 0034 1846     		mov	r0, r3
 1866              	.LVL148:
 1867 0036 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 1868              	.LVL149:
 1869 003a 08BD     		pop	{r3, pc}
 1870              		.cfi_endproc
 1871              	.LFE188:
 1873              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 1874              		.align	1
 1875              		.weak	HAL_UART_RxHalfCpltCallback
 1876              		.syntax unified
 1877              		.thumb
 1878              		.thumb_func
 1879              		.fpu fpv5-d16
 1881              	HAL_UART_RxHalfCpltCallback:
 1882              	.LFB167:
2324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1883              		.loc 1 2324 0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
 1887              		@ link register save eliminated.
 1888              	.LVL150:
 1889 0000 7047     		bx	lr
 1890              		.cfi_endproc
 1891              	.LFE167:
 1893              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 1894              		.align	1
 1895              		.syntax unified
ARM GAS  /tmp/ccPLDEwZ.s 			page 99


 1896              		.thumb
 1897              		.thumb_func
 1898              		.fpu fpv5-d16
 1900              	UART_DMARxHalfCplt:
 1901              	.LFB189:
3036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1902              		.loc 1 3036 0
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 0
 1905              		@ frame_needed = 0, uses_anonymous_args = 0
 1906              	.LVL151:
3036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1907              		.loc 1 3036 0
 1908 0000 08B5     		push	{r3, lr}
 1909              	.LCFI18:
 1910              		.cfi_def_cfa_offset 8
 1911              		.cfi_offset 3, -8
 1912              		.cfi_offset 14, -4
 1913              	.LVL152:
3044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1914              		.loc 1 3044 0
 1915 0002 806B     		ldr	r0, [r0, #56]
 1916              	.LVL153:
 1917 0004 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 1918              	.LVL154:
 1919 0008 08BD     		pop	{r3, pc}
 1920              		.cfi_endproc
 1921              	.LFE189:
 1923              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 1924              		.align	1
 1925              		.weak	HAL_UART_ErrorCallback
 1926              		.syntax unified
 1927              		.thumb
 1928              		.thumb_func
 1929              		.fpu fpv5-d16
 1931              	HAL_UART_ErrorCallback:
 1932              	.LFB168:
2339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1933              		.loc 1 2339 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 0
 1936              		@ frame_needed = 0, uses_anonymous_args = 0
 1937              		@ link register save eliminated.
 1938              	.LVL155:
 1939 0000 7047     		bx	lr
 1940              		.cfi_endproc
 1941              	.LFE168:
 1943              		.section	.text.UART_DMAError,"ax",%progbits
 1944              		.align	1
 1945              		.syntax unified
 1946              		.thumb
 1947              		.thumb_func
 1948              		.fpu fpv5-d16
 1950              	UART_DMAError:
 1951              	.LFB190:
3054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1952              		.loc 1 3054 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 100


 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 0
 1955              		@ frame_needed = 0, uses_anonymous_args = 0
 1956              	.LVL156:
3054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1957              		.loc 1 3054 0
 1958 0000 38B5     		push	{r3, r4, r5, lr}
 1959              	.LCFI19:
 1960              		.cfi_def_cfa_offset 16
 1961              		.cfi_offset 3, -16
 1962              		.cfi_offset 4, -12
 1963              		.cfi_offset 5, -8
 1964              		.cfi_offset 14, -4
3055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1965              		.loc 1 3055 0
 1966 0002 846B     		ldr	r4, [r0, #56]
 1967              	.LVL157:
3057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1968              		.loc 1 3057 0
 1969 0004 626F     		ldr	r2, [r4, #116]
 1970              	.LVL158:
3058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1971              		.loc 1 3058 0
 1972 0006 A56F     		ldr	r5, [r4, #120]
 1973              	.LVL159:
3061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1974              		.loc 1 3061 0
 1975 0008 2368     		ldr	r3, [r4]
 1976 000a 9B68     		ldr	r3, [r3, #8]
 1977 000c 13F0800F 		tst	r3, #128
 1978 0010 01D0     		beq	.L151
3061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1979              		.loc 1 3061 0 is_stmt 0 discriminator 1
 1980 0012 212A     		cmp	r2, #33
 1981 0014 0ED0     		beq	.L154
 1982              	.LVL160:
 1983              	.L151:
3069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1984              		.loc 1 3069 0 is_stmt 1
 1985 0016 2368     		ldr	r3, [r4]
 1986 0018 9B68     		ldr	r3, [r3, #8]
 1987 001a 13F0400F 		tst	r3, #64
 1988 001e 01D0     		beq	.L152
3069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1989              		.loc 1 3069 0 is_stmt 0 discriminator 1
 1990 0020 222D     		cmp	r5, #34
 1991 0022 0ED0     		beq	.L155
 1992              	.L152:
3076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1993              		.loc 1 3076 0 is_stmt 1
 1994 0024 E36F     		ldr	r3, [r4, #124]
 1995 0026 43F01003 		orr	r3, r3, #16
 1996 002a E367     		str	r3, [r4, #124]
3083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1997              		.loc 1 3083 0
 1998 002c 2046     		mov	r0, r4
 1999 002e FFF7FEFF 		bl	HAL_UART_ErrorCallback
ARM GAS  /tmp/ccPLDEwZ.s 			page 101


 2000              	.LVL161:
 2001 0032 38BD     		pop	{r3, r4, r5, pc}
 2002              	.LVL162:
 2003              	.L154:
3064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2004              		.loc 1 3064 0
 2005 0034 0023     		movs	r3, #0
 2006 0036 A4F85230 		strh	r3, [r4, #82]	@ movhi
3065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 2007              		.loc 1 3065 0
 2008 003a 2046     		mov	r0, r4
 2009              	.LVL163:
 2010 003c FFF7FEFF 		bl	UART_EndTxTransfer
 2011              	.LVL164:
 2012 0040 E9E7     		b	.L151
 2013              	.L155:
3072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2014              		.loc 1 3072 0
 2015 0042 0023     		movs	r3, #0
 2016 0044 A4F85A30 		strh	r3, [r4, #90]	@ movhi
3073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 2017              		.loc 1 3073 0
 2018 0048 2046     		mov	r0, r4
 2019 004a FFF7FEFF 		bl	UART_EndRxTransfer
 2020              	.LVL165:
 2021 004e E9E7     		b	.L152
 2022              		.cfi_endproc
 2023              	.LFE190:
 2025              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2026              		.align	1
 2027              		.global	HAL_UART_IRQHandler
 2028              		.syntax unified
 2029              		.thumb
 2030              		.thumb_func
 2031              		.fpu fpv5-d16
 2033              	HAL_UART_IRQHandler:
 2034              	.LFB163:
2104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 2035              		.loc 1 2104 0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 0
 2038              		@ frame_needed = 0, uses_anonymous_args = 0
 2039              	.LVL166:
 2040 0000 38B5     		push	{r3, r4, r5, lr}
 2041              	.LCFI20:
 2042              		.cfi_def_cfa_offset 16
 2043              		.cfi_offset 3, -16
 2044              		.cfi_offset 4, -12
 2045              		.cfi_offset 5, -8
 2046              		.cfi_offset 14, -4
 2047 0002 0446     		mov	r4, r0
2105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2048              		.loc 1 2105 0
 2049 0004 0268     		ldr	r2, [r0]
 2050 0006 D369     		ldr	r3, [r2, #28]
 2051              	.LVL167:
2106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
ARM GAS  /tmp/ccPLDEwZ.s 			page 102


 2052              		.loc 1 2106 0
 2053 0008 1568     		ldr	r5, [r2]
 2054              	.LVL168:
2107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2055              		.loc 1 2107 0
 2056 000a 9068     		ldr	r0, [r2, #8]
 2057              	.LVL169:
2114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2058              		.loc 1 2114 0
 2059 000c 13F00F01 		ands	r1, r3, #15
 2060              	.LVL170:
 2061 0010 0CD1     		bne	.L157
2117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
 2062              		.loc 1 2117 0
 2063 0012 13F0200F 		tst	r3, #32
 2064 0016 09D0     		beq	.L157
2118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2065              		.loc 1 2118 0
 2066 0018 15F0200F 		tst	r5, #32
 2067 001c 06D0     		beq	.L157
2120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2068              		.loc 1 2120 0
 2069 001e 236E     		ldr	r3, [r4, #96]
 2070              	.LVL171:
 2071 0020 002B     		cmp	r3, #0
 2072 0022 00F08680 		beq	.L156
2122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2073              		.loc 1 2122 0
 2074 0026 2046     		mov	r0, r4
 2075              	.LVL172:
 2076 0028 9847     		blx	r3
 2077              	.LVL173:
 2078 002a 38BD     		pop	{r3, r4, r5, pc}
 2079              	.LVL174:
 2080              	.L157:
2129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
 2081              		.loc 1 2129 0
 2082 002c 0029     		cmp	r1, #0
 2083 002e 6FD0     		beq	.L159
2130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 2084              		.loc 1 2130 0
 2085 0030 10F00100 		ands	r0, r0, #1
 2086              	.LVL175:
 2087 0034 02D1     		bne	.L160
2131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2088              		.loc 1 2131 0
 2089 0036 15F4907F 		tst	r5, #288
 2090 003a 69D0     		beq	.L159
 2091              	.L160:
2134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2092              		.loc 1 2134 0
 2093 003c 13F0010F 		tst	r3, #1
 2094 0040 07D0     		beq	.L161
2134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2095              		.loc 1 2134 0 is_stmt 0 discriminator 1
 2096 0042 15F4807F 		tst	r5, #256
 2097 0046 04D0     		beq	.L161
ARM GAS  /tmp/ccPLDEwZ.s 			page 103


2136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2098              		.loc 1 2136 0 is_stmt 1
 2099 0048 0121     		movs	r1, #1
 2100              	.LVL176:
 2101 004a 1162     		str	r1, [r2, #32]
2138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2102              		.loc 1 2138 0
 2103 004c E26F     		ldr	r2, [r4, #124]
 2104 004e 0A43     		orrs	r2, r2, r1
 2105 0050 E267     		str	r2, [r4, #124]
 2106              	.L161:
2142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2107              		.loc 1 2142 0
 2108 0052 13F0020F 		tst	r3, #2
 2109 0056 07D0     		beq	.L162
2142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2110              		.loc 1 2142 0 is_stmt 0 discriminator 1
 2111 0058 30B1     		cbz	r0, .L162
2144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2112              		.loc 1 2144 0 is_stmt 1
 2113 005a 2268     		ldr	r2, [r4]
 2114 005c 0221     		movs	r1, #2
 2115 005e 1162     		str	r1, [r2, #32]
2146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2116              		.loc 1 2146 0
 2117 0060 E26F     		ldr	r2, [r4, #124]
 2118 0062 42F00402 		orr	r2, r2, #4
 2119 0066 E267     		str	r2, [r4, #124]
 2120              	.L162:
2150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2121              		.loc 1 2150 0
 2122 0068 13F0040F 		tst	r3, #4
 2123 006c 07D0     		beq	.L163
2150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2124              		.loc 1 2150 0 is_stmt 0 discriminator 1
 2125 006e 30B1     		cbz	r0, .L163
2152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2126              		.loc 1 2152 0 is_stmt 1
 2127 0070 2268     		ldr	r2, [r4]
 2128 0072 0421     		movs	r1, #4
 2129 0074 1162     		str	r1, [r2, #32]
2154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2130              		.loc 1 2154 0
 2131 0076 E26F     		ldr	r2, [r4, #124]
 2132 0078 42F00202 		orr	r2, r2, #2
 2133 007c E267     		str	r2, [r4, #124]
 2134              	.L163:
2158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 2135              		.loc 1 2158 0
 2136 007e 13F0080F 		tst	r3, #8
 2137 0082 09D0     		beq	.L164
2159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
 2138              		.loc 1 2159 0
 2139 0084 15F0200F 		tst	r5, #32
 2140 0088 00D1     		bne	.L165
2159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
 2141              		.loc 1 2159 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccPLDEwZ.s 			page 104


 2142 008a 28B1     		cbz	r0, .L164
 2143              	.L165:
2162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2144              		.loc 1 2162 0 is_stmt 1
 2145 008c 2268     		ldr	r2, [r4]
 2146 008e 0821     		movs	r1, #8
 2147 0090 1162     		str	r1, [r2, #32]
2164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2148              		.loc 1 2164 0
 2149 0092 E26F     		ldr	r2, [r4, #124]
 2150 0094 0A43     		orrs	r2, r2, r1
 2151 0096 E267     		str	r2, [r4, #124]
 2152              	.L164:
2168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2153              		.loc 1 2168 0
 2154 0098 E26F     		ldr	r2, [r4, #124]
 2155 009a 002A     		cmp	r2, #0
 2156 009c 49D0     		beq	.L156
2171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
 2157              		.loc 1 2171 0
 2158 009e 13F0200F 		tst	r3, #32
 2159 00a2 06D0     		beq	.L166
2172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2160              		.loc 1 2172 0
 2161 00a4 15F0200F 		tst	r5, #32
 2162 00a8 03D0     		beq	.L166
2174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 2163              		.loc 1 2174 0
 2164 00aa 236E     		ldr	r3, [r4, #96]
 2165              	.LVL177:
 2166 00ac 0BB1     		cbz	r3, .L166
2176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 2167              		.loc 1 2176 0
 2168 00ae 2046     		mov	r0, r4
 2169 00b0 9847     		blx	r3
 2170              	.LVL178:
 2171              	.L166:
2182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 2172              		.loc 1 2182 0
 2173 00b2 E26F     		ldr	r2, [r4, #124]
 2174              	.LVL179:
2183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 2175              		.loc 1 2183 0
 2176 00b4 2368     		ldr	r3, [r4]
 2177 00b6 9B68     		ldr	r3, [r3, #8]
 2178 00b8 13F0400F 		tst	r3, #64
 2179 00bc 02D1     		bne	.L167
2183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 2180              		.loc 1 2183 0 is_stmt 0 discriminator 1
 2181 00be 12F0080F 		tst	r2, #8
 2182 00c2 1FD0     		beq	.L168
 2183              	.L167:
2189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2184              		.loc 1 2189 0 is_stmt 1
 2185 00c4 2046     		mov	r0, r4
 2186 00c6 FFF7FEFF 		bl	UART_EndRxTransfer
 2187              	.LVL180:
ARM GAS  /tmp/ccPLDEwZ.s 			page 105


2192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 2188              		.loc 1 2192 0
 2189 00ca 2368     		ldr	r3, [r4]
 2190 00cc 9A68     		ldr	r2, [r3, #8]
 2191 00ce 12F0400F 		tst	r2, #64
 2192 00d2 13D0     		beq	.L169
2194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2193              		.loc 1 2194 0
 2194 00d4 9A68     		ldr	r2, [r3, #8]
 2195 00d6 22F04002 		bic	r2, r2, #64
 2196 00da 9A60     		str	r2, [r3, #8]
2197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
 2197              		.loc 1 2197 0
 2198 00dc E36E     		ldr	r3, [r4, #108]
 2199 00de 4BB1     		cbz	r3, .L170
2201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2200              		.loc 1 2201 0
 2201 00e0 164A     		ldr	r2, .L174
 2202 00e2 1A65     		str	r2, [r3, #80]
2204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             {
 2203              		.loc 1 2204 0
 2204 00e4 E06E     		ldr	r0, [r4, #108]
 2205 00e6 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2206              	.LVL181:
 2207 00ea 10B3     		cbz	r0, .L156
2207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             }
 2208              		.loc 1 2207 0
 2209 00ec E06E     		ldr	r0, [r4, #108]
 2210 00ee 036D     		ldr	r3, [r0, #80]
 2211 00f0 9847     		blx	r3
 2212              	.LVL182:
 2213 00f2 38BD     		pop	{r3, r4, r5, pc}
 2214              	.LVL183:
 2215              	.L170:
2218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2216              		.loc 1 2218 0
 2217 00f4 2046     		mov	r0, r4
 2218 00f6 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2219              	.LVL184:
 2220 00fa 38BD     		pop	{r3, r4, r5, pc}
 2221              	.LVL185:
 2222              	.L169:
2231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2223              		.loc 1 2231 0
 2224 00fc 2046     		mov	r0, r4
 2225 00fe FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2226              	.LVL186:
 2227 0102 38BD     		pop	{r3, r4, r5, pc}
 2228              	.LVL187:
 2229              	.L168:
2244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2230              		.loc 1 2244 0
 2231 0104 2046     		mov	r0, r4
 2232 0106 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2233              	.LVL188:
2246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2234              		.loc 1 2246 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 106


 2235 010a 0023     		movs	r3, #0
 2236 010c E367     		str	r3, [r4, #124]
 2237 010e 38BD     		pop	{r3, r4, r5, pc}
 2238              	.LVL189:
 2239              	.L159:
2254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
 2240              		.loc 1 2254 0
 2241 0110 13F0800F 		tst	r3, #128
 2242 0114 07D0     		beq	.L171
2255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2243              		.loc 1 2255 0
 2244 0116 15F0800F 		tst	r5, #128
 2245 011a 04D0     		beq	.L171
2257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2246              		.loc 1 2257 0
 2247 011c 636E     		ldr	r3, [r4, #100]
 2248              	.LVL190:
 2249 011e 43B1     		cbz	r3, .L156
2259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2250              		.loc 1 2259 0
 2251 0120 2046     		mov	r0, r4
 2252 0122 9847     		blx	r3
 2253              	.LVL191:
 2254 0124 38BD     		pop	{r3, r4, r5, pc}
 2255              	.LVL192:
 2256              	.L171:
2265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2257              		.loc 1 2265 0
 2258 0126 13F0400F 		tst	r3, #64
 2259 012a 02D0     		beq	.L156
2265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2260              		.loc 1 2265 0 is_stmt 0 discriminator 1
 2261 012c 15F0400F 		tst	r5, #64
 2262 0130 00D1     		bne	.L173
 2263              	.LVL193:
 2264              	.L156:
 2265 0132 38BD     		pop	{r3, r4, r5, pc}
 2266              	.LVL194:
 2267              	.L173:
2267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
 2268              		.loc 1 2267 0 is_stmt 1
 2269 0134 2046     		mov	r0, r4
 2270 0136 FFF7FEFF 		bl	UART_EndTransmit_IT
 2271              	.LVL195:
2268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 2272              		.loc 1 2268 0
 2273 013a FAE7     		b	.L156
 2274              	.L175:
 2275              		.align	2
 2276              	.L174:
 2277 013c 00000000 		.word	UART_DMAAbortOnError
 2278              		.cfi_endproc
 2279              	.LFE163:
 2281              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 2282              		.align	1
 2283              		.syntax unified
 2284              		.thumb
ARM GAS  /tmp/ccPLDEwZ.s 			page 107


 2285              		.thumb_func
 2286              		.fpu fpv5-d16
 2288              	UART_DMAAbortOnError:
 2289              	.LFB191:
3094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2290              		.loc 1 3094 0
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 0
 2293              		@ frame_needed = 0, uses_anonymous_args = 0
 2294              	.LVL196:
 2295 0000 08B5     		push	{r3, lr}
 2296              	.LCFI21:
 2297              		.cfi_def_cfa_offset 8
 2298              		.cfi_offset 3, -8
 2299              		.cfi_offset 14, -4
3095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2300              		.loc 1 3095 0
 2301 0002 806B     		ldr	r0, [r0, #56]
 2302              	.LVL197:
3096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2303              		.loc 1 3096 0
 2304 0004 0023     		movs	r3, #0
 2305 0006 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2306              		.loc 1 3097 0
 2307 000a A0F85230 		strh	r3, [r0, #82]	@ movhi
3104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2308              		.loc 1 3104 0
 2309 000e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2310              	.LVL198:
 2311 0012 08BD     		pop	{r3, pc}
 2312              		.cfi_endproc
 2313              	.LFE191:
 2315              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 2316              		.align	1
 2317              		.weak	HAL_UART_AbortCpltCallback
 2318              		.syntax unified
 2319              		.thumb
 2320              		.thumb_func
 2321              		.fpu fpv5-d16
 2323              	HAL_UART_AbortCpltCallback:
 2324              	.LFB169:
2354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2325              		.loc 1 2354 0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 0
 2328              		@ frame_needed = 0, uses_anonymous_args = 0
 2329              		@ link register save eliminated.
 2330              	.LVL199:
 2331 0000 7047     		bx	lr
 2332              		.cfi_endproc
 2333              	.LFE169:
 2335              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 2336              		.align	1
 2337              		.global	HAL_UART_Abort_IT
 2338              		.syntax unified
 2339              		.thumb
ARM GAS  /tmp/ccPLDEwZ.s 			page 108


 2340              		.thumb_func
 2341              		.fpu fpv5-d16
 2343              	HAL_UART_Abort_IT:
 2344              	.LFB160:
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 2345              		.loc 1 1797 0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349              	.LVL200:
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 2350              		.loc 1 1797 0
 2351 0000 10B5     		push	{r4, lr}
 2352              	.LCFI22:
 2353              		.cfi_def_cfa_offset 8
 2354              		.cfi_offset 4, -8
 2355              		.cfi_offset 14, -4
 2356 0002 0446     		mov	r4, r0
 2357              	.LVL201:
1801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2358              		.loc 1 1801 0
 2359 0004 0268     		ldr	r2, [r0]
 2360 0006 1368     		ldr	r3, [r2]
 2361 0008 23F4F073 		bic	r3, r3, #480
 2362 000c 1360     		str	r3, [r2]
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2363              		.loc 1 1802 0
 2364 000e 0268     		ldr	r2, [r0]
 2365 0010 9368     		ldr	r3, [r2, #8]
 2366 0012 23F00103 		bic	r3, r3, #1
 2367 0016 9360     		str	r3, [r2, #8]
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2368              		.loc 1 1807 0
 2369 0018 836E     		ldr	r3, [r0, #104]
 2370 001a 33B1     		cbz	r3, .L180
1811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2371              		.loc 1 1811 0
 2372 001c 0268     		ldr	r2, [r0]
 2373 001e 9268     		ldr	r2, [r2, #8]
 2374 0020 12F0800F 		tst	r2, #128
 2375 0024 1DD0     		beq	.L181
1813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2376              		.loc 1 1813 0
 2377 0026 2B4A     		ldr	r2, .L193
 2378 0028 1A65     		str	r2, [r3, #80]
 2379              	.L180:
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2380              		.loc 1 1821 0
 2381 002a E36E     		ldr	r3, [r4, #108]
 2382 002c 33B1     		cbz	r3, .L182
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2383              		.loc 1 1825 0
 2384 002e 2268     		ldr	r2, [r4]
 2385 0030 9268     		ldr	r2, [r2, #8]
 2386 0032 12F0400F 		tst	r2, #64
 2387 0036 17D0     		beq	.L183
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccPLDEwZ.s 			page 109


 2388              		.loc 1 1827 0
 2389 0038 274A     		ldr	r2, .L193+4
 2390 003a 1A65     		str	r2, [r3, #80]
 2391              	.L182:
1836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2392              		.loc 1 1836 0
 2393 003c 2368     		ldr	r3, [r4]
 2394 003e 9A68     		ldr	r2, [r3, #8]
 2395 0040 12F0800F 		tst	r2, #128
 2396 0044 13D0     		beq	.L187
1839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2397              		.loc 1 1839 0
 2398 0046 9A68     		ldr	r2, [r3, #8]
 2399 0048 22F08002 		bic	r2, r2, #128
 2400 004c 9A60     		str	r2, [r3, #8]
1842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2401              		.loc 1 1842 0
 2402 004e A06E     		ldr	r0, [r4, #104]
 2403              	.LVL202:
 2404 0050 18B3     		cbz	r0, .L188
1848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2405              		.loc 1 1848 0
 2406 0052 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2407              	.LVL203:
 2408 0056 10B3     		cbz	r0, .L189
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2409              		.loc 1 1850 0
 2410 0058 A36E     		ldr	r3, [r4, #104]
 2411 005a 0022     		movs	r2, #0
 2412 005c 1A65     		str	r2, [r3, #80]
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2413              		.loc 1 1798 0
 2414 005e 0122     		movs	r2, #1
 2415 0060 06E0     		b	.L184
 2416              	.LVL204:
 2417              	.L181:
1817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2418              		.loc 1 1817 0
 2419 0062 0022     		movs	r2, #0
 2420 0064 1A65     		str	r2, [r3, #80]
 2421 0066 E0E7     		b	.L180
 2422              	.L183:
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2423              		.loc 1 1831 0
 2424 0068 0022     		movs	r2, #0
 2425 006a 1A65     		str	r2, [r3, #80]
 2426 006c E6E7     		b	.L182
 2427              	.L187:
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2428              		.loc 1 1798 0
 2429 006e 0122     		movs	r2, #1
 2430              	.LVL205:
 2431              	.L184:
1860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2432              		.loc 1 1860 0
 2433 0070 2368     		ldr	r3, [r4]
 2434 0072 9968     		ldr	r1, [r3, #8]
ARM GAS  /tmp/ccPLDEwZ.s 			page 110


 2435 0074 11F0400F 		tst	r1, #64
 2436 0078 0CD0     		beq	.L185
1862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2437              		.loc 1 1862 0
 2438 007a 9968     		ldr	r1, [r3, #8]
 2439 007c 21F04001 		bic	r1, r1, #64
 2440 0080 9960     		str	r1, [r3, #8]
1865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2441              		.loc 1 1865 0
 2442 0082 E06E     		ldr	r0, [r4, #108]
 2443 0084 30B1     		cbz	r0, .L185
1871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2444              		.loc 1 1871 0
 2445 0086 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2446              	.LVL206:
 2447 008a 50B1     		cbz	r0, .L190
1873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 1U;
 2448              		.loc 1 1873 0
 2449 008c E36E     		ldr	r3, [r4, #108]
 2450 008e 0022     		movs	r2, #0
 2451 0090 1A65     		str	r2, [r3, #80]
 2452              	.LVL207:
1874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2453              		.loc 1 1874 0
 2454 0092 0122     		movs	r2, #1
 2455              	.LVL208:
 2456              	.L185:
1884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2457              		.loc 1 1884 0
 2458 0094 3AB9     		cbnz	r2, .L192
 2459              	.LVL209:
 2460              	.L186:
1919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2461              		.loc 1 1919 0
 2462 0096 0020     		movs	r0, #0
 2463 0098 10BD     		pop	{r4, pc}
 2464              	.LVL210:
 2465              	.L188:
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2466              		.loc 1 1798 0
 2467 009a 0122     		movs	r2, #1
 2468 009c E8E7     		b	.L184
 2469              	.L189:
1854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2470              		.loc 1 1854 0
 2471 009e 0022     		movs	r2, #0
 2472 00a0 E6E7     		b	.L184
 2473              	.LVL211:
 2474              	.L190:
1878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2475              		.loc 1 1878 0
 2476 00a2 0022     		movs	r2, #0
 2477 00a4 F6E7     		b	.L185
 2478              	.LVL212:
 2479              	.L192:
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
 2480              		.loc 1 1887 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 111


 2481 00a6 0023     		movs	r3, #0
 2482 00a8 A4F85230 		strh	r3, [r4, #82]	@ movhi
1888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2483              		.loc 1 1888 0
 2484 00ac A4F85A30 		strh	r3, [r4, #90]	@ movhi
1891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
 2485              		.loc 1 1891 0
 2486 00b0 2366     		str	r3, [r4, #96]
1892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2487              		.loc 1 1892 0
 2488 00b2 6366     		str	r3, [r4, #100]
1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2489              		.loc 1 1895 0
 2490 00b4 E367     		str	r3, [r4, #124]
1898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2491              		.loc 1 1898 0
 2492 00b6 2368     		ldr	r3, [r4]
 2493 00b8 0F22     		movs	r2, #15
 2494              	.LVL213:
 2495 00ba 1A62     		str	r2, [r3, #32]
1902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2496              		.loc 1 1902 0
 2497 00bc 2268     		ldr	r2, [r4]
 2498 00be 9369     		ldr	r3, [r2, #24]
 2499 00c0 43F00803 		orr	r3, r3, #8
 2500 00c4 9361     		str	r3, [r2, #24]
1905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2501              		.loc 1 1905 0
 2502 00c6 2023     		movs	r3, #32
 2503 00c8 6367     		str	r3, [r4, #116]
1906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2504              		.loc 1 1906 0
 2505 00ca A367     		str	r3, [r4, #120]
1914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2506              		.loc 1 1914 0
 2507 00cc 2046     		mov	r0, r4
 2508 00ce FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2509              	.LVL214:
 2510 00d2 E0E7     		b	.L186
 2511              	.L194:
 2512              		.align	2
 2513              	.L193:
 2514 00d4 00000000 		.word	UART_DMATxAbortCallback
 2515 00d8 00000000 		.word	UART_DMARxAbortCallback
 2516              		.cfi_endproc
 2517              	.LFE160:
 2519              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 2520              		.align	1
 2521              		.syntax unified
 2522              		.thumb
 2523              		.thumb_func
 2524              		.fpu fpv5-d16
 2526              	UART_DMARxAbortCallback:
 2527              	.LFB193:
3166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2528              		.loc 1 3166 0
 2529              		.cfi_startproc
ARM GAS  /tmp/ccPLDEwZ.s 			page 112


 2530              		@ args = 0, pretend = 0, frame = 0
 2531              		@ frame_needed = 0, uses_anonymous_args = 0
 2532              	.LVL215:
 2533 0000 08B5     		push	{r3, lr}
 2534              	.LCFI23:
 2535              		.cfi_def_cfa_offset 8
 2536              		.cfi_offset 3, -8
 2537              		.cfi_offset 14, -4
3167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2538              		.loc 1 3167 0
 2539 0002 806B     		ldr	r0, [r0, #56]
 2540              	.LVL216:
3169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2541              		.loc 1 3169 0
 2542 0004 C36E     		ldr	r3, [r0, #108]
 2543 0006 0022     		movs	r2, #0
 2544 0008 1A65     		str	r2, [r3, #80]
3172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2545              		.loc 1 3172 0
 2546 000a 836E     		ldr	r3, [r0, #104]
 2547 000c 13B1     		cbz	r3, .L196
3174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2548              		.loc 1 3174 0
 2549 000e 1B6D     		ldr	r3, [r3, #80]
 2550 0010 03B1     		cbz	r3, .L196
 2551              	.LVL217:
 2552              	.L195:
 2553 0012 08BD     		pop	{r3, pc}
 2554              	.LVL218:
 2555              	.L196:
3181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2556              		.loc 1 3181 0
 2557 0014 0023     		movs	r3, #0
 2558 0016 A0F85230 		strh	r3, [r0, #82]	@ movhi
3182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2559              		.loc 1 3182 0
 2560 001a A0F85A30 		strh	r3, [r0, #90]	@ movhi
3185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2561              		.loc 1 3185 0
 2562 001e C367     		str	r3, [r0, #124]
3188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2563              		.loc 1 3188 0
 2564 0020 0368     		ldr	r3, [r0]
 2565 0022 0F22     		movs	r2, #15
 2566 0024 1A62     		str	r2, [r3, #32]
3191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2567              		.loc 1 3191 0
 2568 0026 0268     		ldr	r2, [r0]
 2569 0028 9369     		ldr	r3, [r2, #24]
 2570 002a 43F00803 		orr	r3, r3, #8
 2571 002e 9361     		str	r3, [r2, #24]
3194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2572              		.loc 1 3194 0
 2573 0030 2023     		movs	r3, #32
 2574 0032 4367     		str	r3, [r0, #116]
3195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2575              		.loc 1 3195 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 113


 2576 0034 8367     		str	r3, [r0, #120]
3203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2577              		.loc 1 3203 0
 2578 0036 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2579              	.LVL219:
 2580 003a EAE7     		b	.L195
 2581              		.cfi_endproc
 2582              	.LFE193:
 2584              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 2585              		.align	1
 2586              		.syntax unified
 2587              		.thumb
 2588              		.thumb_func
 2589              		.fpu fpv5-d16
 2591              	UART_DMATxAbortCallback:
 2592              	.LFB192:
3117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2593              		.loc 1 3117 0
 2594              		.cfi_startproc
 2595              		@ args = 0, pretend = 0, frame = 0
 2596              		@ frame_needed = 0, uses_anonymous_args = 0
 2597              	.LVL220:
 2598 0000 08B5     		push	{r3, lr}
 2599              	.LCFI24:
 2600              		.cfi_def_cfa_offset 8
 2601              		.cfi_offset 3, -8
 2602              		.cfi_offset 14, -4
3118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2603              		.loc 1 3118 0
 2604 0002 806B     		ldr	r0, [r0, #56]
 2605              	.LVL221:
3120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2606              		.loc 1 3120 0
 2607 0004 836E     		ldr	r3, [r0, #104]
 2608 0006 0022     		movs	r2, #0
 2609 0008 1A65     		str	r2, [r3, #80]
3123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2610              		.loc 1 3123 0
 2611 000a C36E     		ldr	r3, [r0, #108]
 2612 000c 13B1     		cbz	r3, .L200
3125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2613              		.loc 1 3125 0
 2614 000e 1B6D     		ldr	r3, [r3, #80]
 2615 0010 03B1     		cbz	r3, .L200
 2616              	.LVL222:
 2617              	.L199:
 2618 0012 08BD     		pop	{r3, pc}
 2619              	.LVL223:
 2620              	.L200:
3132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2621              		.loc 1 3132 0
 2622 0014 0023     		movs	r3, #0
 2623 0016 A0F85230 		strh	r3, [r0, #82]	@ movhi
3133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2624              		.loc 1 3133 0
 2625 001a A0F85A30 		strh	r3, [r0, #90]	@ movhi
3136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 114


 2626              		.loc 1 3136 0
 2627 001e C367     		str	r3, [r0, #124]
3139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2628              		.loc 1 3139 0
 2629 0020 0368     		ldr	r3, [r0]
 2630 0022 0F22     		movs	r2, #15
 2631 0024 1A62     		str	r2, [r3, #32]
3143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2632              		.loc 1 3143 0
 2633 0026 2023     		movs	r3, #32
 2634 0028 4367     		str	r3, [r0, #116]
3144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2635              		.loc 1 3144 0
 2636 002a 8367     		str	r3, [r0, #120]
3152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2637              		.loc 1 3152 0
 2638 002c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2639              	.LVL224:
 2640 0030 EFE7     		b	.L199
 2641              		.cfi_endproc
 2642              	.LFE192:
 2644              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 2645              		.align	1
 2646              		.weak	HAL_UART_AbortTransmitCpltCallback
 2647              		.syntax unified
 2648              		.thumb
 2649              		.thumb_func
 2650              		.fpu fpv5-d16
 2652              	HAL_UART_AbortTransmitCpltCallback:
 2653              	.LFB170:
2369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2654              		.loc 1 2369 0
 2655              		.cfi_startproc
 2656              		@ args = 0, pretend = 0, frame = 0
 2657              		@ frame_needed = 0, uses_anonymous_args = 0
 2658              		@ link register save eliminated.
 2659              	.LVL225:
 2660 0000 7047     		bx	lr
 2661              		.cfi_endproc
 2662              	.LFE170:
 2664              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 2665              		.align	1
 2666              		.global	HAL_UART_AbortTransmit_IT
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2670              		.fpu fpv5-d16
 2672              	HAL_UART_AbortTransmit_IT:
 2673              	.LFB161:
1936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
 2674              		.loc 1 1936 0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 2678              	.LVL226:
1936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
 2679              		.loc 1 1936 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 115


 2680 0000 10B5     		push	{r4, lr}
 2681              	.LCFI25:
 2682              		.cfi_def_cfa_offset 8
 2683              		.cfi_offset 4, -8
 2684              		.cfi_offset 14, -4
 2685 0002 0446     		mov	r4, r0
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2686              		.loc 1 1938 0
 2687 0004 0268     		ldr	r2, [r0]
 2688 0006 1368     		ldr	r3, [r2]
 2689 0008 23F0C003 		bic	r3, r3, #192
 2690 000c 1360     		str	r3, [r2]
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2691              		.loc 1 1941 0
 2692 000e 0368     		ldr	r3, [r0]
 2693 0010 9A68     		ldr	r2, [r3, #8]
 2694 0012 12F0800F 		tst	r2, #128
 2695 0016 1AD0     		beq	.L205
1943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2696              		.loc 1 1943 0
 2697 0018 9A68     		ldr	r2, [r3, #8]
 2698 001a 22F08002 		bic	r2, r2, #128
 2699 001e 9A60     		str	r2, [r3, #8]
1946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2700              		.loc 1 1946 0
 2701 0020 836E     		ldr	r3, [r0, #104]
 2702 0022 5BB1     		cbz	r3, .L206
1950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2703              		.loc 1 1950 0
 2704 0024 0E4A     		ldr	r2, .L210
 2705 0026 1A65     		str	r2, [r3, #80]
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2706              		.loc 1 1953 0
 2707 0028 806E     		ldr	r0, [r0, #104]
 2708              	.LVL227:
 2709 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2710              	.LVL228:
 2711 002e 08B9     		cbnz	r0, .L209
 2712              	.L207:
2003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2713              		.loc 1 2003 0
 2714 0030 0020     		movs	r0, #0
 2715 0032 10BD     		pop	{r4, pc}
 2716              	.LVL229:
 2717              	.L209:
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2718              		.loc 1 1956 0
 2719 0034 A06E     		ldr	r0, [r4, #104]
 2720 0036 036D     		ldr	r3, [r0, #80]
 2721 0038 9847     		blx	r3
 2722              	.LVL230:
 2723 003a F9E7     		b	.L207
 2724              	.LVL231:
 2725              	.L206:
1962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2726              		.loc 1 1962 0
 2727 003c 0023     		movs	r3, #0
ARM GAS  /tmp/ccPLDEwZ.s 			page 116


 2728 003e A0F85230 		strh	r3, [r0, #82]	@ movhi
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2729              		.loc 1 1965 0
 2730 0042 4366     		str	r3, [r0, #100]
1968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2731              		.loc 1 1968 0
 2732 0044 2023     		movs	r3, #32
 2733 0046 4367     		str	r3, [r0, #116]
1976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2734              		.loc 1 1976 0
 2735 0048 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2736              	.LVL232:
 2737 004c F0E7     		b	.L207
 2738              	.LVL233:
 2739              	.L205:
1983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2740              		.loc 1 1983 0
 2741 004e 0023     		movs	r3, #0
 2742 0050 A0F85230 		strh	r3, [r0, #82]	@ movhi
1986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2743              		.loc 1 1986 0
 2744 0054 4366     		str	r3, [r0, #100]
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2745              		.loc 1 1990 0
 2746 0056 2023     		movs	r3, #32
 2747 0058 4367     		str	r3, [r0, #116]
1998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2748              		.loc 1 1998 0
 2749 005a FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2750              	.LVL234:
 2751 005e E7E7     		b	.L207
 2752              	.L211:
 2753              		.align	2
 2754              	.L210:
 2755 0060 00000000 		.word	UART_DMATxOnlyAbortCallback
 2756              		.cfi_endproc
 2757              	.LFE161:
 2759              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 2760              		.align	1
 2761              		.syntax unified
 2762              		.thumb
 2763              		.thumb_func
 2764              		.fpu fpv5-d16
 2766              	UART_DMATxOnlyAbortCallback:
 2767              	.LFB194:
3217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2768              		.loc 1 3217 0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772              	.LVL235:
 2773 0000 08B5     		push	{r3, lr}
 2774              	.LCFI26:
 2775              		.cfi_def_cfa_offset 8
 2776              		.cfi_offset 3, -8
 2777              		.cfi_offset 14, -4
3218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 117


 2778              		.loc 1 3218 0
 2779 0002 806B     		ldr	r0, [r0, #56]
 2780              	.LVL236:
3220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2781              		.loc 1 3220 0
 2782 0004 0023     		movs	r3, #0
 2783 0006 A0F85230 		strh	r3, [r0, #82]	@ movhi
3224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2784              		.loc 1 3224 0
 2785 000a 2023     		movs	r3, #32
 2786 000c 4367     		str	r3, [r0, #116]
3232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2787              		.loc 1 3232 0
 2788 000e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2789              	.LVL237:
 2790 0012 08BD     		pop	{r3, pc}
 2791              		.cfi_endproc
 2792              	.LFE194:
 2794              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 2795              		.align	1
 2796              		.weak	HAL_UART_AbortReceiveCpltCallback
 2797              		.syntax unified
 2798              		.thumb
 2799              		.thumb_func
 2800              		.fpu fpv5-d16
 2802              	HAL_UART_AbortReceiveCpltCallback:
 2803              	.LFB171:
2384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2804              		.loc 1 2384 0
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 0
 2807              		@ frame_needed = 0, uses_anonymous_args = 0
 2808              		@ link register save eliminated.
 2809              	.LVL238:
 2810 0000 7047     		bx	lr
 2811              		.cfi_endproc
 2812              	.LFE171:
 2814              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2815              		.align	1
 2816              		.global	HAL_UART_AbortReceive_IT
 2817              		.syntax unified
 2818              		.thumb
 2819              		.thumb_func
 2820              		.fpu fpv5-d16
 2822              	HAL_UART_AbortReceive_IT:
 2823              	.LFB162:
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2824              		.loc 1 2020 0
 2825              		.cfi_startproc
 2826              		@ args = 0, pretend = 0, frame = 0
 2827              		@ frame_needed = 0, uses_anonymous_args = 0
 2828              	.LVL239:
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2829              		.loc 1 2020 0
 2830 0000 10B5     		push	{r4, lr}
 2831              	.LCFI27:
 2832              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccPLDEwZ.s 			page 118


 2833              		.cfi_offset 4, -8
 2834              		.cfi_offset 14, -4
 2835 0002 0446     		mov	r4, r0
2022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2836              		.loc 1 2022 0
 2837 0004 0268     		ldr	r2, [r0]
 2838 0006 1368     		ldr	r3, [r2]
 2839 0008 23F49073 		bic	r3, r3, #288
 2840 000c 1360     		str	r3, [r2]
2023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2841              		.loc 1 2023 0
 2842 000e 0268     		ldr	r2, [r0]
 2843 0010 9368     		ldr	r3, [r2, #8]
 2844 0012 23F00103 		bic	r3, r3, #1
 2845 0016 9360     		str	r3, [r2, #8]
2026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2846              		.loc 1 2026 0
 2847 0018 0368     		ldr	r3, [r0]
 2848 001a 9A68     		ldr	r2, [r3, #8]
 2849 001c 12F0400F 		tst	r2, #64
 2850 0020 22D0     		beq	.L216
2028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2851              		.loc 1 2028 0
 2852 0022 9A68     		ldr	r2, [r3, #8]
 2853 0024 22F04002 		bic	r2, r2, #64
 2854 0028 9A60     		str	r2, [r3, #8]
2031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2855              		.loc 1 2031 0
 2856 002a C36E     		ldr	r3, [r0, #108]
 2857 002c 5BB1     		cbz	r3, .L217
2035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2858              		.loc 1 2035 0
 2859 002e 144A     		ldr	r2, .L221
 2860 0030 1A65     		str	r2, [r3, #80]
2038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2861              		.loc 1 2038 0
 2862 0032 C06E     		ldr	r0, [r0, #108]
 2863              	.LVL240:
 2864 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2865              	.LVL241:
 2866 0038 08B9     		cbnz	r0, .L220
 2867              	.L218:
2096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2868              		.loc 1 2096 0
 2869 003a 0020     		movs	r0, #0
 2870 003c 10BD     		pop	{r4, pc}
 2871              	.LVL242:
 2872              	.L220:
2041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2873              		.loc 1 2041 0
 2874 003e E06E     		ldr	r0, [r4, #108]
 2875 0040 036D     		ldr	r3, [r0, #80]
 2876 0042 9847     		blx	r3
 2877              	.LVL243:
 2878 0044 F9E7     		b	.L218
 2879              	.LVL244:
 2880              	.L217:
ARM GAS  /tmp/ccPLDEwZ.s 			page 119


2047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2881              		.loc 1 2047 0
 2882 0046 0023     		movs	r3, #0
 2883 0048 A0F85A30 		strh	r3, [r0, #90]	@ movhi
2050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2884              		.loc 1 2050 0
 2885 004c 4365     		str	r3, [r0, #84]
2053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2886              		.loc 1 2053 0
 2887 004e 0368     		ldr	r3, [r0]
 2888 0050 0F22     		movs	r2, #15
 2889 0052 1A62     		str	r2, [r3, #32]
2056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2890              		.loc 1 2056 0
 2891 0054 0268     		ldr	r2, [r0]
 2892 0056 9369     		ldr	r3, [r2, #24]
 2893 0058 43F00803 		orr	r3, r3, #8
 2894 005c 9361     		str	r3, [r2, #24]
2059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2895              		.loc 1 2059 0
 2896 005e 2023     		movs	r3, #32
 2897 0060 8367     		str	r3, [r0, #120]
2067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2898              		.loc 1 2067 0
 2899 0062 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2900              	.LVL245:
 2901 0066 E8E7     		b	.L218
 2902              	.LVL246:
 2903              	.L216:
2074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2904              		.loc 1 2074 0
 2905 0068 0022     		movs	r2, #0
 2906 006a A0F85A20 		strh	r2, [r0, #90]	@ movhi
2077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2907              		.loc 1 2077 0
 2908 006e 4265     		str	r2, [r0, #84]
2080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2909              		.loc 1 2080 0
 2910 0070 0F22     		movs	r2, #15
 2911 0072 1A62     		str	r2, [r3, #32]
2083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2912              		.loc 1 2083 0
 2913 0074 2023     		movs	r3, #32
 2914 0076 8367     		str	r3, [r0, #120]
2091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2915              		.loc 1 2091 0
 2916 0078 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2917              	.LVL247:
 2918 007c DDE7     		b	.L218
 2919              	.L222:
 2920 007e 00BF     		.align	2
 2921              	.L221:
 2922 0080 00000000 		.word	UART_DMARxOnlyAbortCallback
 2923              		.cfi_endproc
 2924              	.LFE162:
 2926              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 2927              		.align	1
ARM GAS  /tmp/ccPLDEwZ.s 			page 120


 2928              		.syntax unified
 2929              		.thumb
 2930              		.thumb_func
 2931              		.fpu fpv5-d16
 2933              	UART_DMARxOnlyAbortCallback:
 2934              	.LFB195:
3245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2935              		.loc 1 3245 0
 2936              		.cfi_startproc
 2937              		@ args = 0, pretend = 0, frame = 0
 2938              		@ frame_needed = 0, uses_anonymous_args = 0
 2939              	.LVL248:
 2940 0000 08B5     		push	{r3, lr}
 2941              	.LCFI28:
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 3, -8
 2944              		.cfi_offset 14, -4
3246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2945              		.loc 1 3246 0
 2946 0002 806B     		ldr	r0, [r0, #56]
 2947              	.LVL249:
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2948              		.loc 1 3248 0
 2949 0004 0023     		movs	r3, #0
 2950 0006 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2951              		.loc 1 3251 0
 2952 000a 0368     		ldr	r3, [r0]
 2953 000c 0F22     		movs	r2, #15
 2954 000e 1A62     		str	r2, [r3, #32]
3254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2955              		.loc 1 3254 0
 2956 0010 0268     		ldr	r2, [r0]
 2957 0012 9369     		ldr	r3, [r2, #24]
 2958 0014 43F00803 		orr	r3, r3, #8
 2959 0018 9361     		str	r3, [r2, #24]
3257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2960              		.loc 1 3257 0
 2961 001a 2023     		movs	r3, #32
 2962 001c 8367     		str	r3, [r0, #120]
3265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2963              		.loc 1 3265 0
 2964 001e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2965              	.LVL250:
 2966 0022 08BD     		pop	{r3, pc}
 2967              		.cfi_endproc
 2968              	.LFE195:
 2970              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 2971              		.align	1
 2972              		.global	HAL_MultiProcessor_EnterMuteMode
 2973              		.syntax unified
 2974              		.thumb
 2975              		.thumb_func
 2976              		.fpu fpv5-d16
 2978              	HAL_MultiProcessor_EnterMuteMode:
 2979              	.LFB174:
2468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
ARM GAS  /tmp/ccPLDEwZ.s 			page 121


 2980              		.loc 1 2468 0
 2981              		.cfi_startproc
 2982              		@ args = 0, pretend = 0, frame = 0
 2983              		@ frame_needed = 0, uses_anonymous_args = 0
 2984              		@ link register save eliminated.
 2985              	.LVL251:
2469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 2986              		.loc 1 2469 0
 2987 0000 0268     		ldr	r2, [r0]
 2988 0002 9369     		ldr	r3, [r2, #24]
 2989 0004 43F00403 		orr	r3, r3, #4
 2990 0008 9361     		str	r3, [r2, #24]
 2991 000a 7047     		bx	lr
 2992              		.cfi_endproc
 2993              	.LFE174:
 2995              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 2996              		.align	1
 2997              		.global	HAL_HalfDuplex_EnableTransmitter
 2998              		.syntax unified
 2999              		.thumb
 3000              		.thumb_func
 3001              		.fpu fpv5-d16
 3003              	HAL_HalfDuplex_EnableTransmitter:
 3004              	.LFB175:
2478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
 3005              		.loc 1 2478 0
 3006              		.cfi_startproc
 3007              		@ args = 0, pretend = 0, frame = 0
 3008              		@ frame_needed = 0, uses_anonymous_args = 0
 3009              		@ link register save eliminated.
 3010              	.LVL252:
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3011              		.loc 1 2480 0
 3012 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3013 0004 012B     		cmp	r3, #1
 3014 0006 15D0     		beq	.L228
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3015              		.loc 1 2480 0 is_stmt 0 discriminator 2
 3016 0008 0123     		movs	r3, #1
 3017 000a 80F87030 		strb	r3, [r0, #112]
2481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3018              		.loc 1 2481 0 is_stmt 1 discriminator 2
 3019 000e 2423     		movs	r3, #36
 3020 0010 4367     		str	r3, [r0, #116]
2484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3021              		.loc 1 2484 0 discriminator 2
 3022 0012 0268     		ldr	r2, [r0]
 3023 0014 1368     		ldr	r3, [r2]
 3024 0016 23F00C03 		bic	r3, r3, #12
 3025 001a 1360     		str	r3, [r2]
2487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3026              		.loc 1 2487 0 discriminator 2
 3027 001c 0268     		ldr	r2, [r0]
 3028 001e 1368     		ldr	r3, [r2]
 3029 0020 43F00803 		orr	r3, r3, #8
 3030 0024 1360     		str	r3, [r2]
2489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 122


 3031              		.loc 1 2489 0 discriminator 2
 3032 0026 2023     		movs	r3, #32
 3033 0028 4367     		str	r3, [r0, #116]
2492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3034              		.loc 1 2492 0 discriminator 2
 3035 002a 0023     		movs	r3, #0
 3036 002c 80F87030 		strb	r3, [r0, #112]
2494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3037              		.loc 1 2494 0 discriminator 2
 3038 0030 1846     		mov	r0, r3
 3039              	.LVL253:
 3040 0032 7047     		bx	lr
 3041              	.LVL254:
 3042              	.L228:
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3043              		.loc 1 2480 0
 3044 0034 0220     		movs	r0, #2
 3045              	.LVL255:
2495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3046              		.loc 1 2495 0
 3047 0036 7047     		bx	lr
 3048              		.cfi_endproc
 3049              	.LFE175:
 3051              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3052              		.align	1
 3053              		.global	HAL_HalfDuplex_EnableReceiver
 3054              		.syntax unified
 3055              		.thumb
 3056              		.thumb_func
 3057              		.fpu fpv5-d16
 3059              	HAL_HalfDuplex_EnableReceiver:
 3060              	.LFB176:
2503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
 3061              		.loc 1 2503 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 0
 3064              		@ frame_needed = 0, uses_anonymous_args = 0
 3065              		@ link register save eliminated.
 3066              	.LVL256:
2505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3067              		.loc 1 2505 0
 3068 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3069 0004 012B     		cmp	r3, #1
 3070 0006 15D0     		beq	.L231
2505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3071              		.loc 1 2505 0 is_stmt 0 discriminator 2
 3072 0008 0123     		movs	r3, #1
 3073 000a 80F87030 		strb	r3, [r0, #112]
2506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3074              		.loc 1 2506 0 is_stmt 1 discriminator 2
 3075 000e 2423     		movs	r3, #36
 3076 0010 4367     		str	r3, [r0, #116]
2509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3077              		.loc 1 2509 0 discriminator 2
 3078 0012 0268     		ldr	r2, [r0]
 3079 0014 1368     		ldr	r3, [r2]
 3080 0016 23F00C03 		bic	r3, r3, #12
ARM GAS  /tmp/ccPLDEwZ.s 			page 123


 3081 001a 1360     		str	r3, [r2]
2512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3082              		.loc 1 2512 0 discriminator 2
 3083 001c 0268     		ldr	r2, [r0]
 3084 001e 1368     		ldr	r3, [r2]
 3085 0020 43F00403 		orr	r3, r3, #4
 3086 0024 1360     		str	r3, [r2]
2514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3087              		.loc 1 2514 0 discriminator 2
 3088 0026 2023     		movs	r3, #32
 3089 0028 4367     		str	r3, [r0, #116]
2517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3090              		.loc 1 2517 0 discriminator 2
 3091 002a 0023     		movs	r3, #0
 3092 002c 80F87030 		strb	r3, [r0, #112]
2519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3093              		.loc 1 2519 0 discriminator 2
 3094 0030 1846     		mov	r0, r3
 3095              	.LVL257:
 3096 0032 7047     		bx	lr
 3097              	.LVL258:
 3098              	.L231:
2505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3099              		.loc 1 2505 0
 3100 0034 0220     		movs	r0, #2
 3101              	.LVL259:
2520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3102              		.loc 1 2520 0
 3103 0036 7047     		bx	lr
 3104              		.cfi_endproc
 3105              	.LFE176:
 3107              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3108              		.align	1
 3109              		.global	HAL_LIN_SendBreak
 3110              		.syntax unified
 3111              		.thumb
 3112              		.thumb_func
 3113              		.fpu fpv5-d16
 3115              	HAL_LIN_SendBreak:
 3116              	.LFB177:
2529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
 3117              		.loc 1 2529 0
 3118              		.cfi_startproc
 3119              		@ args = 0, pretend = 0, frame = 0
 3120              		@ frame_needed = 0, uses_anonymous_args = 0
 3121              		@ link register save eliminated.
 3122              	.LVL260:
2534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3123              		.loc 1 2534 0
 3124 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3125 0004 012B     		cmp	r3, #1
 3126 0006 10D0     		beq	.L234
2534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3127              		.loc 1 2534 0 is_stmt 0 discriminator 2
 3128 0008 0123     		movs	r3, #1
 3129 000a 80F87030 		strb	r3, [r0, #112]
2536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 124


 3130              		.loc 1 2536 0 is_stmt 1 discriminator 2
 3131 000e 2423     		movs	r3, #36
 3132 0010 4367     		str	r3, [r0, #116]
2539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3133              		.loc 1 2539 0 discriminator 2
 3134 0012 0268     		ldr	r2, [r0]
 3135 0014 9369     		ldr	r3, [r2, #24]
 3136 0016 43F00203 		orr	r3, r3, #2
 3137 001a 9361     		str	r3, [r2, #24]
2541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3138              		.loc 1 2541 0 discriminator 2
 3139 001c 2023     		movs	r3, #32
 3140 001e 4367     		str	r3, [r0, #116]
2544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3141              		.loc 1 2544 0 discriminator 2
 3142 0020 0023     		movs	r3, #0
 3143 0022 80F87030 		strb	r3, [r0, #112]
2546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3144              		.loc 1 2546 0 discriminator 2
 3145 0026 1846     		mov	r0, r3
 3146              	.LVL261:
 3147 0028 7047     		bx	lr
 3148              	.LVL262:
 3149              	.L234:
2534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3150              		.loc 1 2534 0
 3151 002a 0220     		movs	r0, #2
 3152              	.LVL263:
2547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3153              		.loc 1 2547 0
 3154 002c 7047     		bx	lr
 3155              		.cfi_endproc
 3156              	.LFE177:
 3158              		.section	.text.HAL_UART_GetState,"ax",%progbits
 3159              		.align	1
 3160              		.global	HAL_UART_GetState
 3161              		.syntax unified
 3162              		.thumb
 3163              		.thumb_func
 3164              		.fpu fpv5-d16
 3166              	HAL_UART_GetState:
 3167              	.LFB178:
2576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp1, temp2;
 3168              		.loc 1 2576 0
 3169              		.cfi_startproc
 3170              		@ args = 0, pretend = 0, frame = 0
 3171              		@ frame_needed = 0, uses_anonymous_args = 0
 3172              		@ link register save eliminated.
 3173              	.LVL264:
2578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp2 = huart->RxState;
 3174              		.loc 1 2578 0
 3175 0000 426F     		ldr	r2, [r0, #116]
 3176              	.LVL265:
2579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3177              		.loc 1 2579 0
 3178 0002 806F     		ldr	r0, [r0, #120]
 3179              	.LVL266:
ARM GAS  /tmp/ccPLDEwZ.s 			page 125


2582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3180              		.loc 1 2582 0
 3181 0004 1043     		orrs	r0, r0, r2
 3182              	.LVL267:
 3183 0006 7047     		bx	lr
 3184              		.cfi_endproc
 3185              	.LFE178:
 3187              		.section	.text.HAL_UART_GetError,"ax",%progbits
 3188              		.align	1
 3189              		.global	HAL_UART_GetError
 3190              		.syntax unified
 3191              		.thumb
 3192              		.thumb_func
 3193              		.fpu fpv5-d16
 3195              	HAL_UART_GetError:
 3196              	.LFB179:
2591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return huart->ErrorCode;
 3197              		.loc 1 2591 0
 3198              		.cfi_startproc
 3199              		@ args = 0, pretend = 0, frame = 0
 3200              		@ frame_needed = 0, uses_anonymous_args = 0
 3201              		@ link register save eliminated.
 3202              	.LVL268:
2592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3203              		.loc 1 2592 0
 3204 0000 C06F     		ldr	r0, [r0, #124]
 3205              	.LVL269:
2593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 3206              		.loc 1 2593 0
 3207 0002 7047     		bx	lr
 3208              		.cfi_endproc
 3209              	.LFE179:
 3211              		.section	.text.UART_SetConfig,"ax",%progbits
 3212              		.align	1
 3213              		.global	UART_SetConfig
 3214              		.syntax unified
 3215              		.thumb
 3216              		.thumb_func
 3217              		.fpu fpv5-d16
 3219              	UART_SetConfig:
 3220              	.LFB180:
2633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tmpreg;
 3221              		.loc 1 2633 0
 3222              		.cfi_startproc
 3223              		@ args = 0, pretend = 0, frame = 0
 3224              		@ frame_needed = 0, uses_anonymous_args = 0
 3225              	.LVL270:
 3226 0000 10B5     		push	{r4, lr}
 3227              	.LCFI29:
 3228              		.cfi_def_cfa_offset 8
 3229              		.cfi_offset 4, -8
 3230              		.cfi_offset 14, -4
 3231 0002 0446     		mov	r4, r0
 3232              	.LVL271:
2658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 3233              		.loc 1 2658 0
 3234 0004 8368     		ldr	r3, [r0, #8]
ARM GAS  /tmp/ccPLDEwZ.s 			page 126


 3235 0006 0269     		ldr	r2, [r0, #16]
 3236 0008 1343     		orrs	r3, r3, r2
 3237 000a 4269     		ldr	r2, [r0, #20]
 3238 000c 1343     		orrs	r3, r3, r2
 3239 000e C269     		ldr	r2, [r0, #28]
 3240 0010 1343     		orrs	r3, r3, r2
 3241              	.LVL272:
2659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3242              		.loc 1 2659 0
 3243 0012 0168     		ldr	r1, [r0]
 3244 0014 0868     		ldr	r0, [r1]
 3245              	.LVL273:
 3246 0016 9C4A     		ldr	r2, .L331
 3247 0018 0240     		ands	r2, r2, r0
 3248 001a 1343     		orrs	r3, r3, r2
 3249              	.LVL274:
 3250 001c 0B60     		str	r3, [r1]
 3251              	.LVL275:
2664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3252              		.loc 1 2664 0
 3253 001e 2268     		ldr	r2, [r4]
 3254 0020 5368     		ldr	r3, [r2, #4]
 3255 0022 23F44053 		bic	r3, r3, #12288
 3256 0026 E168     		ldr	r1, [r4, #12]
 3257 0028 0B43     		orrs	r3, r3, r1
 3258 002a 5360     		str	r3, [r2, #4]
2672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3259              		.loc 1 2672 0
 3260 002c A369     		ldr	r3, [r4, #24]
 3261              	.LVL276:
2674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 3262              		.loc 1 2674 0
 3263 002e 226A     		ldr	r2, [r4, #32]
 3264 0030 1343     		orrs	r3, r3, r2
 3265              	.LVL277:
2675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3266              		.loc 1 2675 0
 3267 0032 2168     		ldr	r1, [r4]
 3268 0034 8A68     		ldr	r2, [r1, #8]
 3269 0036 22F43062 		bic	r2, r2, #2816
 3270 003a 1343     		orrs	r3, r3, r2
 3271              	.LVL278:
 3272 003c 8B60     		str	r3, [r1, #8]
 3273              	.LVL279:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3274              		.loc 1 2679 0
 3275 003e 2368     		ldr	r3, [r4]
 3276 0040 924A     		ldr	r2, .L331+4
 3277 0042 9342     		cmp	r3, r2
 3278 0044 2BD0     		beq	.L316
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3279              		.loc 1 2679 0 is_stmt 0 discriminator 2
 3280 0046 924A     		ldr	r2, .L331+8
 3281 0048 9342     		cmp	r3, r2
 3282 004a 3BD0     		beq	.L317
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3283              		.loc 1 2679 0 discriminator 9
ARM GAS  /tmp/ccPLDEwZ.s 			page 127


 3284 004c 914A     		ldr	r2, .L331+12
 3285 004e 9342     		cmp	r3, r2
 3286 0050 50D0     		beq	.L318
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3287              		.loc 1 2679 0 discriminator 16
 3288 0052 914A     		ldr	r2, .L331+16
 3289 0054 9342     		cmp	r3, r2
 3290 0056 63D0     		beq	.L319
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3291              		.loc 1 2679 0 discriminator 23
 3292 0058 904A     		ldr	r2, .L331+20
 3293 005a 9342     		cmp	r3, r2
 3294 005c 75D0     		beq	.L320
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3295              		.loc 1 2679 0 discriminator 30
 3296 005e 904A     		ldr	r2, .L331+24
 3297 0060 9342     		cmp	r3, r2
 3298 0062 00F08A80 		beq	.L321
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3299              		.loc 1 2679 0 discriminator 37
 3300 0066 8F4A     		ldr	r2, .L331+28
 3301 0068 9342     		cmp	r3, r2
 3302 006a 00F09E80 		beq	.L322
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3303              		.loc 1 2679 0 discriminator 44
 3304 006e 8E4A     		ldr	r2, .L331+32
 3305 0070 9342     		cmp	r3, r2
 3306 0072 00F0B280 		beq	.L323
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3307              		.loc 1 2679 0
 3308 0076 1023     		movs	r3, #16
 3309              	.L243:
 3310              	.LVL280:
2681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3311              		.loc 1 2681 0 is_stmt 1
 3312 0078 E269     		ldr	r2, [r4, #28]
 3313 007a B2F5004F 		cmp	r2, #32768
 3314 007e 00F0D480 		beq	.L324
2720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3315              		.loc 1 2720 0
 3316 0082 082B     		cmp	r3, #8
 3317 0084 00F26F81 		bhi	.L313
 3318 0088 DFE813F0 		tbh	[pc, r3, lsl #1]
 3319              	.L297:
 3320 008c 3201     		.2byte	(.L296-.L297)/2
 3321 008e 4701     		.2byte	(.L298-.L297)/2
 3322 0090 5101     		.2byte	(.L299-.L297)/2
 3323 0092 6D01     		.2byte	(.L313-.L297)/2
 3324 0094 5A01     		.2byte	(.L300-.L297)/2
 3325 0096 6D01     		.2byte	(.L313-.L297)/2
 3326 0098 6D01     		.2byte	(.L313-.L297)/2
 3327 009a 6D01     		.2byte	(.L313-.L297)/2
 3328 009c 6401     		.2byte	(.L301-.L297)/2
 3329              	.LVL281:
 3330              		.p2align 1
 3331              	.L316:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccPLDEwZ.s 			page 128


 3332              		.loc 1 2679 0 discriminator 1
 3333 009e 834B     		ldr	r3, .L331+36
 3334 00a0 D3F89030 		ldr	r3, [r3, #144]
 3335 00a4 03F00303 		and	r3, r3, #3
 3336 00a8 032B     		cmp	r3, #3
 3337 00aa 09D8     		bhi	.L239
 3338 00ac DFE803F0 		tbb	[pc, r3]
 3339              	.L241:
 3340 00b0 02       		.byte	(.L240-.L241)/2
 3341 00b1 04       		.byte	(.L242-.L241)/2
 3342 00b2 AD       		.byte	(.L302-.L241)/2
 3343 00b3 06       		.byte	(.L244-.L241)/2
 3344              		.p2align 1
 3345              	.L240:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3346              		.loc 1 2679 0 is_stmt 0
 3347 00b4 0123     		movs	r3, #1
 3348 00b6 DFE7     		b	.L243
 3349              	.L242:
 3350              	.LVL282:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3351              		.loc 1 2679 0 discriminator 5
 3352 00b8 0423     		movs	r3, #4
 3353 00ba DDE7     		b	.L243
 3354              	.LVL283:
 3355              	.L244:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3356              		.loc 1 2679 0 discriminator 7
 3357 00bc 0823     		movs	r3, #8
 3358 00be DBE7     		b	.L243
 3359              	.LVL284:
 3360              	.L239:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3361              		.loc 1 2679 0 discriminator 3
 3362 00c0 1023     		movs	r3, #16
 3363 00c2 D9E7     		b	.L243
 3364              	.LVL285:
 3365              	.L317:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3366              		.loc 1 2679 0 discriminator 8
 3367 00c4 794B     		ldr	r3, .L331+36
 3368 00c6 D3F89030 		ldr	r3, [r3, #144]
 3369 00ca 03F00C03 		and	r3, r3, #12
 3370 00ce 0C2B     		cmp	r3, #12
 3371 00d0 0ED8     		bhi	.L246
 3372 00d2 DFE803F0 		tbb	[pc, r3]
 3373              	.L248:
 3374 00d6 07       		.byte	(.L247-.L248)/2
 3375 00d7 0D       		.byte	(.L246-.L248)/2
 3376 00d8 0D       		.byte	(.L246-.L248)/2
 3377 00d9 0D       		.byte	(.L246-.L248)/2
 3378 00da 09       		.byte	(.L249-.L248)/2
 3379 00db 0D       		.byte	(.L246-.L248)/2
 3380 00dc 0D       		.byte	(.L246-.L248)/2
 3381 00dd 0D       		.byte	(.L246-.L248)/2
 3382 00de 9C       		.byte	(.L303-.L248)/2
 3383 00df 0D       		.byte	(.L246-.L248)/2
ARM GAS  /tmp/ccPLDEwZ.s 			page 129


 3384 00e0 0D       		.byte	(.L246-.L248)/2
 3385 00e1 0D       		.byte	(.L246-.L248)/2
 3386 00e2 0B       		.byte	(.L250-.L248)/2
 3387 00e3 00       		.p2align 1
 3388              	.L247:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3389              		.loc 1 2679 0
 3390 00e4 0023     		movs	r3, #0
 3391 00e6 C7E7     		b	.L243
 3392              	.L249:
 3393              	.LVL286:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3394              		.loc 1 2679 0 discriminator 12
 3395 00e8 0423     		movs	r3, #4
 3396 00ea C5E7     		b	.L243
 3397              	.LVL287:
 3398              	.L250:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3399              		.loc 1 2679 0 discriminator 14
 3400 00ec 0823     		movs	r3, #8
 3401 00ee C3E7     		b	.L243
 3402              	.LVL288:
 3403              	.L246:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3404              		.loc 1 2679 0 discriminator 10
 3405 00f0 1023     		movs	r3, #16
 3406 00f2 C1E7     		b	.L243
 3407              	.LVL289:
 3408              	.L318:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3409              		.loc 1 2679 0 discriminator 15
 3410 00f4 6D4B     		ldr	r3, .L331+36
 3411 00f6 D3F89030 		ldr	r3, [r3, #144]
 3412 00fa 03F03003 		and	r3, r3, #48
 3413 00fe 102B     		cmp	r3, #16
 3414 0100 0AD0     		beq	.L253
 3415 0102 06D9     		bls	.L325
 3416 0104 202B     		cmp	r3, #32
 3417 0106 00F08480 		beq	.L304
 3418 010a 302B     		cmp	r3, #48
 3419 010c 06D1     		bne	.L252
 3420              	.LVL290:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3421              		.loc 1 2679 0 discriminator 21
 3422 010e 0823     		movs	r3, #8
 3423 0110 B2E7     		b	.L243
 3424              	.LVL291:
 3425              	.L325:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3426              		.loc 1 2679 0 discriminator 15
 3427 0112 1BB9     		cbnz	r3, .L252
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3428              		.loc 1 2679 0
 3429 0114 0023     		movs	r3, #0
 3430 0116 AFE7     		b	.L243
 3431              	.L253:
 3432              	.LVL292:
ARM GAS  /tmp/ccPLDEwZ.s 			page 130


2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3433              		.loc 1 2679 0 discriminator 19
 3434 0118 0423     		movs	r3, #4
 3435 011a ADE7     		b	.L243
 3436              	.LVL293:
 3437              	.L252:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3438              		.loc 1 2679 0 discriminator 17
 3439 011c 1023     		movs	r3, #16
 3440 011e ABE7     		b	.L243
 3441              	.LVL294:
 3442              	.L319:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3443              		.loc 1 2679 0 discriminator 22
 3444 0120 624B     		ldr	r3, .L331+36
 3445 0122 D3F89030 		ldr	r3, [r3, #144]
 3446 0126 03F0C003 		and	r3, r3, #192
 3447 012a 402B     		cmp	r3, #64
 3448 012c 09D0     		beq	.L259
 3449 012e 05D9     		bls	.L326
 3450 0130 802B     		cmp	r3, #128
 3451 0132 70D0     		beq	.L305
 3452 0134 C02B     		cmp	r3, #192
 3453 0136 06D1     		bne	.L258
 3454              	.LVL295:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3455              		.loc 1 2679 0 discriminator 28
 3456 0138 0823     		movs	r3, #8
 3457 013a 9DE7     		b	.L243
 3458              	.LVL296:
 3459              	.L326:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3460              		.loc 1 2679 0 discriminator 22
 3461 013c 1BB9     		cbnz	r3, .L258
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3462              		.loc 1 2679 0
 3463 013e 0023     		movs	r3, #0
 3464 0140 9AE7     		b	.L243
 3465              	.L259:
 3466              	.LVL297:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3467              		.loc 1 2679 0 discriminator 26
 3468 0142 0423     		movs	r3, #4
 3469 0144 98E7     		b	.L243
 3470              	.LVL298:
 3471              	.L258:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3472              		.loc 1 2679 0 discriminator 24
 3473 0146 1023     		movs	r3, #16
 3474 0148 96E7     		b	.L243
 3475              	.LVL299:
 3476              	.L320:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3477              		.loc 1 2679 0 discriminator 29
 3478 014a 584B     		ldr	r3, .L331+36
 3479 014c D3F89030 		ldr	r3, [r3, #144]
 3480 0150 03F44073 		and	r3, r3, #768
ARM GAS  /tmp/ccPLDEwZ.s 			page 131


 3481 0154 B3F5807F 		cmp	r3, #256
 3482 0158 0BD0     		beq	.L265
 3483 015a 07D9     		bls	.L327
 3484 015c B3F5007F 		cmp	r3, #512
 3485 0160 5BD0     		beq	.L306
 3486 0162 B3F5407F 		cmp	r3, #768
 3487 0166 06D1     		bne	.L264
 3488              	.LVL300:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3489              		.loc 1 2679 0 discriminator 35
 3490 0168 0823     		movs	r3, #8
 3491 016a 85E7     		b	.L243
 3492              	.LVL301:
 3493              	.L327:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3494              		.loc 1 2679 0 discriminator 29
 3495 016c 1BB9     		cbnz	r3, .L264
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3496              		.loc 1 2679 0
 3497 016e 0023     		movs	r3, #0
 3498 0170 82E7     		b	.L243
 3499              	.L265:
 3500              	.LVL302:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3501              		.loc 1 2679 0 discriminator 33
 3502 0172 0423     		movs	r3, #4
 3503 0174 80E7     		b	.L243
 3504              	.LVL303:
 3505              	.L264:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3506              		.loc 1 2679 0 discriminator 31
 3507 0176 1023     		movs	r3, #16
 3508 0178 7EE7     		b	.L243
 3509              	.LVL304:
 3510              	.L321:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3511              		.loc 1 2679 0 discriminator 36
 3512 017a 4C4B     		ldr	r3, .L331+36
 3513 017c D3F89030 		ldr	r3, [r3, #144]
 3514 0180 03F44063 		and	r3, r3, #3072
 3515 0184 B3F5806F 		cmp	r3, #1024
 3516 0188 0BD0     		beq	.L271
 3517 018a 07D9     		bls	.L328
 3518 018c B3F5006F 		cmp	r3, #2048
 3519 0190 45D0     		beq	.L307
 3520 0192 B3F5406F 		cmp	r3, #3072
 3521 0196 06D1     		bne	.L270
 3522              	.LVL305:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3523              		.loc 1 2679 0 discriminator 42
 3524 0198 0823     		movs	r3, #8
 3525 019a 6DE7     		b	.L243
 3526              	.LVL306:
 3527              	.L328:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3528              		.loc 1 2679 0 discriminator 36
 3529 019c 1BB9     		cbnz	r3, .L270
ARM GAS  /tmp/ccPLDEwZ.s 			page 132


2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3530              		.loc 1 2679 0
 3531 019e 0123     		movs	r3, #1
 3532 01a0 6AE7     		b	.L243
 3533              	.L271:
 3534              	.LVL307:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3535              		.loc 1 2679 0 discriminator 40
 3536 01a2 0423     		movs	r3, #4
 3537 01a4 68E7     		b	.L243
 3538              	.LVL308:
 3539              	.L270:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3540              		.loc 1 2679 0 discriminator 38
 3541 01a6 1023     		movs	r3, #16
 3542 01a8 66E7     		b	.L243
 3543              	.LVL309:
 3544              	.L322:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3545              		.loc 1 2679 0 discriminator 43
 3546 01aa 404B     		ldr	r3, .L331+36
 3547 01ac D3F89030 		ldr	r3, [r3, #144]
 3548 01b0 03F44053 		and	r3, r3, #12288
 3549 01b4 B3F5805F 		cmp	r3, #4096
 3550 01b8 0BD0     		beq	.L277
 3551 01ba 07D9     		bls	.L329
 3552 01bc B3F5005F 		cmp	r3, #8192
 3553 01c0 2FD0     		beq	.L308
 3554 01c2 B3F5405F 		cmp	r3, #12288
 3555 01c6 06D1     		bne	.L276
 3556              	.LVL310:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3557              		.loc 1 2679 0 discriminator 49
 3558 01c8 0823     		movs	r3, #8
 3559 01ca 55E7     		b	.L243
 3560              	.LVL311:
 3561              	.L329:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3562              		.loc 1 2679 0 discriminator 43
 3563 01cc 1BB9     		cbnz	r3, .L276
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3564              		.loc 1 2679 0
 3565 01ce 0023     		movs	r3, #0
 3566 01d0 52E7     		b	.L243
 3567              	.L277:
 3568              	.LVL312:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3569              		.loc 1 2679 0 discriminator 47
 3570 01d2 0423     		movs	r3, #4
 3571 01d4 50E7     		b	.L243
 3572              	.LVL313:
 3573              	.L276:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3574              		.loc 1 2679 0 discriminator 45
 3575 01d6 1023     		movs	r3, #16
 3576 01d8 4EE7     		b	.L243
 3577              	.LVL314:
ARM GAS  /tmp/ccPLDEwZ.s 			page 133


 3578              	.L323:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3579              		.loc 1 2679 0 discriminator 50
 3580 01da 344B     		ldr	r3, .L331+36
 3581 01dc D3F89030 		ldr	r3, [r3, #144]
 3582 01e0 03F44043 		and	r3, r3, #49152
 3583 01e4 B3F5804F 		cmp	r3, #16384
 3584 01e8 0BD0     		beq	.L282
 3585 01ea 07D9     		bls	.L330
 3586 01ec B3F5004F 		cmp	r3, #32768
 3587 01f0 19D0     		beq	.L310
 3588 01f2 B3F5404F 		cmp	r3, #49152
 3589 01f6 06D1     		bne	.L281
 3590              	.LVL315:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3591              		.loc 1 2679 0 discriminator 56
 3592 01f8 0823     		movs	r3, #8
 3593 01fa 3DE7     		b	.L243
 3594              	.LVL316:
 3595              	.L330:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3596              		.loc 1 2679 0 discriminator 50
 3597 01fc 1BB9     		cbnz	r3, .L281
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3598              		.loc 1 2679 0
 3599 01fe 0023     		movs	r3, #0
 3600 0200 3AE7     		b	.L243
 3601              	.L282:
 3602              	.LVL317:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3603              		.loc 1 2679 0 discriminator 54
 3604 0202 0423     		movs	r3, #4
 3605 0204 38E7     		b	.L243
 3606              	.LVL318:
 3607              	.L281:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3608              		.loc 1 2679 0 discriminator 52
 3609 0206 1023     		movs	r3, #16
 3610 0208 36E7     		b	.L243
 3611              	.LVL319:
 3612              	.L302:
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3613              		.loc 1 2679 0
 3614 020a 0223     		movs	r3, #2
 3615 020c 34E7     		b	.L243
 3616              	.L303:
 3617 020e 0223     		movs	r3, #2
 3618 0210 32E7     		b	.L243
 3619              	.L304:
 3620 0212 0223     		movs	r3, #2
 3621 0214 30E7     		b	.L243
 3622              	.L305:
 3623 0216 0223     		movs	r3, #2
 3624 0218 2EE7     		b	.L243
 3625              	.L306:
 3626 021a 0223     		movs	r3, #2
 3627 021c 2CE7     		b	.L243
ARM GAS  /tmp/ccPLDEwZ.s 			page 134


 3628              	.L307:
 3629 021e 0223     		movs	r3, #2
 3630 0220 2AE7     		b	.L243
 3631              	.L308:
 3632 0222 0223     		movs	r3, #2
 3633 0224 28E7     		b	.L243
 3634              	.L310:
 3635 0226 0223     		movs	r3, #2
 3636 0228 26E7     		b	.L243
 3637              	.LVL320:
 3638              	.L324:
2683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3639              		.loc 1 2683 0 is_stmt 1
 3640 022a 082B     		cmp	r3, #8
 3641 022c 5DD8     		bhi	.L311
 3642 022e DFE803F0 		tbb	[pc, r3]
 3643              	.L289:
 3644 0232 05       		.byte	(.L288-.L289)/2
 3645 0233 1F       		.byte	(.L290-.L289)/2
 3646 0234 3F       		.byte	(.L291-.L289)/2
 3647 0235 5C       		.byte	(.L311-.L289)/2
 3648 0236 48       		.byte	(.L292-.L289)/2
 3649 0237 5C       		.byte	(.L311-.L289)/2
 3650 0238 5C       		.byte	(.L311-.L289)/2
 3651 0239 5C       		.byte	(.L311-.L289)/2
 3652 023a 53       		.byte	(.L293-.L289)/2
 3653 023b 00       		.p2align 1
 3654              	.L288:
2686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3655              		.loc 1 2686 0
 3656 023c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3657              	.LVL321:
 3658 0240 6268     		ldr	r2, [r4, #4]
 3659 0242 5308     		lsrs	r3, r2, #1
 3660 0244 03EB4003 		add	r3, r3, r0, lsl #1
 3661 0248 B3FBF2F3 		udiv	r3, r3, r2
 3662 024c 9BB2     		uxth	r3, r3
 3663              	.LVL322:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3664              		.loc 1 2638 0
 3665 024e 0020     		movs	r0, #0
 3666              	.LVL323:
 3667              	.L287:
2707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3668              		.loc 1 2707 0
 3669 0250 A3F11001 		sub	r1, r3, #16
 3670 0254 4FF6EF72 		movw	r2, #65519
 3671 0258 9142     		cmp	r1, r2
 3672 025a 00F28780 		bhi	.L312
2709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 3673              		.loc 1 2709 0
 3674 025e 9AB2     		uxth	r2, r3
 3675 0260 22F00F02 		bic	r2, r2, #15
 3676              	.LVL324:
2710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->BRR = brrtemp;
 3677              		.loc 1 2710 0
 3678 0264 C3F34203 		ubfx	r3, r3, #1, #3
ARM GAS  /tmp/ccPLDEwZ.s 			page 135


 3679              	.LVL325:
 3680 0268 1343     		orrs	r3, r3, r2
 3681              	.LVL326:
2711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3682              		.loc 1 2711 0
 3683 026a 2268     		ldr	r2, [r4]
 3684 026c D360     		str	r3, [r2, #12]
 3685 026e 50E0     		b	.L294
 3686              	.LVL327:
 3687              	.L290:
2689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3688              		.loc 1 2689 0
 3689 0270 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3690              	.LVL328:
 3691 0274 6268     		ldr	r2, [r4, #4]
 3692 0276 5308     		lsrs	r3, r2, #1
 3693 0278 03EB4003 		add	r3, r3, r0, lsl #1
 3694 027c B3FBF2F3 		udiv	r3, r3, r2
 3695 0280 9BB2     		uxth	r3, r3
 3696              	.LVL329:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3697              		.loc 1 2638 0
 3698 0282 0020     		movs	r0, #0
2690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 3699              		.loc 1 2690 0
 3700 0284 E4E7     		b	.L287
 3701              	.L332:
 3702 0286 00BF     		.align	2
 3703              	.L331:
 3704 0288 F369FFEF 		.word	-268473869
 3705 028c 00100140 		.word	1073811456
 3706 0290 00440040 		.word	1073759232
 3707 0294 00480040 		.word	1073760256
 3708 0298 004C0040 		.word	1073761280
 3709 029c 00500040 		.word	1073762304
 3710 02a0 00140140 		.word	1073812480
 3711 02a4 00780040 		.word	1073772544
 3712 02a8 007C0040 		.word	1073773568
 3713 02ac 00380240 		.word	1073887232
 3714              	.LVL330:
 3715              	.L291:
2692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3716              		.loc 1 2692 0
 3717 02b0 6268     		ldr	r2, [r4, #4]
 3718 02b2 304B     		ldr	r3, .L333
 3719              	.LVL331:
 3720 02b4 03EB5203 		add	r3, r3, r2, lsr #1
 3721 02b8 B3FBF2F3 		udiv	r3, r3, r2
 3722 02bc 9BB2     		uxth	r3, r3
 3723              	.LVL332:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3724              		.loc 1 2638 0
 3725 02be 0020     		movs	r0, #0
2693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
 3726              		.loc 1 2693 0
 3727 02c0 C6E7     		b	.L287
 3728              	.LVL333:
ARM GAS  /tmp/ccPLDEwZ.s 			page 136


 3729              	.L292:
2695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3730              		.loc 1 2695 0
 3731 02c2 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 3732              	.LVL334:
 3733 02c6 6268     		ldr	r2, [r4, #4]
 3734 02c8 5308     		lsrs	r3, r2, #1
 3735 02ca 03EB4003 		add	r3, r3, r0, lsl #1
 3736 02ce B3FBF2F3 		udiv	r3, r3, r2
 3737 02d2 9BB2     		uxth	r3, r3
 3738              	.LVL335:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3739              		.loc 1 2638 0
 3740 02d4 0020     		movs	r0, #0
2696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 3741              		.loc 1 2696 0
 3742 02d6 BBE7     		b	.L287
 3743              	.LVL336:
 3744              	.L293:
2698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3745              		.loc 1 2698 0
 3746 02d8 6268     		ldr	r2, [r4, #4]
 3747 02da 5308     		lsrs	r3, r2, #1
 3748              	.LVL337:
 3749 02dc 03F58033 		add	r3, r3, #65536
 3750 02e0 B3FBF2F3 		udiv	r3, r3, r2
 3751 02e4 9BB2     		uxth	r3, r3
 3752              	.LVL338:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3753              		.loc 1 2638 0
 3754 02e6 0020     		movs	r0, #0
2699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 3755              		.loc 1 2699 0
 3756 02e8 B2E7     		b	.L287
 3757              	.LVL339:
 3758              	.L311:
2702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3759              		.loc 1 2702 0
 3760 02ea 0120     		movs	r0, #1
2637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 3761              		.loc 1 2637 0
 3762 02ec 0023     		movs	r3, #0
 3763              	.LVL340:
 3764 02ee AFE7     		b	.L287
 3765              	.LVL341:
 3766              	.L296:
2723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3767              		.loc 1 2723 0
 3768 02f0 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3769              	.LVL342:
 3770 02f4 6268     		ldr	r2, [r4, #4]
 3771 02f6 00EB5203 		add	r3, r0, r2, lsr #1
 3772 02fa B3FBF2F3 		udiv	r3, r3, r2
 3773 02fe 9BB2     		uxth	r3, r3
 3774              	.LVL343:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3775              		.loc 1 2638 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 137


 3776 0300 0020     		movs	r0, #0
 3777              	.LVL344:
 3778              	.L295:
2744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3779              		.loc 1 2744 0
 3780 0302 A3F11001 		sub	r1, r3, #16
 3781 0306 4FF6EF72 		movw	r2, #65519
 3782 030a 9142     		cmp	r1, r2
 3783 030c 30D8     		bhi	.L314
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3784              		.loc 1 2746 0
 3785 030e 2268     		ldr	r2, [r4]
 3786 0310 D360     		str	r3, [r2, #12]
 3787              	.LVL345:
 3788              	.L294:
2756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
 3789              		.loc 1 2756 0
 3790 0312 0023     		movs	r3, #0
 3791 0314 2366     		str	r3, [r4, #96]
2757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3792              		.loc 1 2757 0
 3793 0316 6366     		str	r3, [r4, #100]
2760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3794              		.loc 1 2760 0
 3795 0318 10BD     		pop	{r4, pc}
 3796              	.LVL346:
 3797              	.L298:
2726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3798              		.loc 1 2726 0
 3799 031a FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3800              	.LVL347:
 3801 031e 6268     		ldr	r2, [r4, #4]
 3802 0320 00EB5203 		add	r3, r0, r2, lsr #1
 3803 0324 B3FBF2F3 		udiv	r3, r3, r2
 3804 0328 9BB2     		uxth	r3, r3
 3805              	.LVL348:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3806              		.loc 1 2638 0
 3807 032a 0020     		movs	r0, #0
2727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 3808              		.loc 1 2727 0
 3809 032c E9E7     		b	.L295
 3810              	.LVL349:
 3811              	.L299:
2729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3812              		.loc 1 2729 0
 3813 032e 6268     		ldr	r2, [r4, #4]
 3814 0330 114B     		ldr	r3, .L333+4
 3815              	.LVL350:
 3816 0332 03EB5203 		add	r3, r3, r2, lsr #1
 3817 0336 B3FBF2F3 		udiv	r3, r3, r2
 3818 033a 9BB2     		uxth	r3, r3
 3819              	.LVL351:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3820              		.loc 1 2638 0
 3821 033c 0020     		movs	r0, #0
2730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
ARM GAS  /tmp/ccPLDEwZ.s 			page 138


 3822              		.loc 1 2730 0
 3823 033e E0E7     		b	.L295
 3824              	.LVL352:
 3825              	.L300:
2732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3826              		.loc 1 2732 0
 3827 0340 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 3828              	.LVL353:
 3829 0344 6268     		ldr	r2, [r4, #4]
 3830 0346 00EB5203 		add	r3, r0, r2, lsr #1
 3831 034a B3FBF2F3 		udiv	r3, r3, r2
 3832 034e 9BB2     		uxth	r3, r3
 3833              	.LVL354:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3834              		.loc 1 2638 0
 3835 0350 0020     		movs	r0, #0
2733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 3836              		.loc 1 2733 0
 3837 0352 D6E7     		b	.L295
 3838              	.LVL355:
 3839              	.L301:
2735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3840              		.loc 1 2735 0
 3841 0354 6268     		ldr	r2, [r4, #4]
 3842 0356 5308     		lsrs	r3, r2, #1
 3843              	.LVL356:
 3844 0358 03F50043 		add	r3, r3, #32768
 3845 035c B3FBF2F3 		udiv	r3, r3, r2
 3846 0360 9BB2     		uxth	r3, r3
 3847              	.LVL357:
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3848              		.loc 1 2638 0
 3849 0362 0020     		movs	r0, #0
2736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 3850              		.loc 1 2736 0
 3851 0364 CDE7     		b	.L295
 3852              	.LVL358:
 3853              	.L313:
2739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3854              		.loc 1 2739 0
 3855 0366 0120     		movs	r0, #1
2637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 3856              		.loc 1 2637 0
 3857 0368 0023     		movs	r3, #0
 3858              	.LVL359:
 3859 036a CAE7     		b	.L295
 3860              	.LVL360:
 3861              	.L312:
2715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3862              		.loc 1 2715 0
 3863 036c 0120     		movs	r0, #1
 3864              	.LVL361:
 3865 036e D0E7     		b	.L294
 3866              	.LVL362:
 3867              	.L314:
2750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3868              		.loc 1 2750 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 139


 3869 0370 0120     		movs	r0, #1
 3870              	.LVL363:
 3871 0372 CEE7     		b	.L294
 3872              	.L334:
 3873              		.align	2
 3874              	.L333:
 3875 0374 0048E801 		.word	32000000
 3876 0378 0024F400 		.word	16000000
 3877              		.cfi_endproc
 3878              	.LFE180:
 3880              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 3881              		.align	1
 3882              		.global	UART_AdvFeatureConfig
 3883              		.syntax unified
 3884              		.thumb
 3885              		.thumb_func
 3886              		.fpu fpv5-d16
 3888              	UART_AdvFeatureConfig:
 3889              	.LFB181:
2768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
 3890              		.loc 1 2768 0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 0
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
 3894              		@ link register save eliminated.
 3895              	.LVL364:
2773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3896              		.loc 1 2773 0
 3897 0000 436A     		ldr	r3, [r0, #36]
 3898 0002 13F0010F 		tst	r3, #1
 3899 0006 06D0     		beq	.L336
2776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3900              		.loc 1 2776 0
 3901 0008 0268     		ldr	r2, [r0]
 3902 000a 5368     		ldr	r3, [r2, #4]
 3903 000c 23F40033 		bic	r3, r3, #131072
 3904 0010 816A     		ldr	r1, [r0, #40]
 3905 0012 0B43     		orrs	r3, r3, r1
 3906 0014 5360     		str	r3, [r2, #4]
 3907              	.L336:
2780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3908              		.loc 1 2780 0
 3909 0016 436A     		ldr	r3, [r0, #36]
 3910 0018 13F0020F 		tst	r3, #2
 3911 001c 06D0     		beq	.L337
2783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3912              		.loc 1 2783 0
 3913 001e 0268     		ldr	r2, [r0]
 3914 0020 5368     		ldr	r3, [r2, #4]
 3915 0022 23F48033 		bic	r3, r3, #65536
 3916 0026 C16A     		ldr	r1, [r0, #44]
 3917 0028 0B43     		orrs	r3, r3, r1
 3918 002a 5360     		str	r3, [r2, #4]
 3919              	.L337:
2787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3920              		.loc 1 2787 0
 3921 002c 436A     		ldr	r3, [r0, #36]
ARM GAS  /tmp/ccPLDEwZ.s 			page 140


 3922 002e 13F0040F 		tst	r3, #4
 3923 0032 06D0     		beq	.L338
2790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3924              		.loc 1 2790 0
 3925 0034 0268     		ldr	r2, [r0]
 3926 0036 5368     		ldr	r3, [r2, #4]
 3927 0038 23F48023 		bic	r3, r3, #262144
 3928 003c 016B     		ldr	r1, [r0, #48]
 3929 003e 0B43     		orrs	r3, r3, r1
 3930 0040 5360     		str	r3, [r2, #4]
 3931              	.L338:
2794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3932              		.loc 1 2794 0
 3933 0042 436A     		ldr	r3, [r0, #36]
 3934 0044 13F0080F 		tst	r3, #8
 3935 0048 06D0     		beq	.L339
2797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3936              		.loc 1 2797 0
 3937 004a 0268     		ldr	r2, [r0]
 3938 004c 5368     		ldr	r3, [r2, #4]
 3939 004e 23F40043 		bic	r3, r3, #32768
 3940 0052 416B     		ldr	r1, [r0, #52]
 3941 0054 0B43     		orrs	r3, r3, r1
 3942 0056 5360     		str	r3, [r2, #4]
 3943              	.L339:
2801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3944              		.loc 1 2801 0
 3945 0058 436A     		ldr	r3, [r0, #36]
 3946 005a 13F0100F 		tst	r3, #16
 3947 005e 06D0     		beq	.L340
2804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3948              		.loc 1 2804 0
 3949 0060 0268     		ldr	r2, [r0]
 3950 0062 9368     		ldr	r3, [r2, #8]
 3951 0064 23F48053 		bic	r3, r3, #4096
 3952 0068 816B     		ldr	r1, [r0, #56]
 3953 006a 0B43     		orrs	r3, r3, r1
 3954 006c 9360     		str	r3, [r2, #8]
 3955              	.L340:
2808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3956              		.loc 1 2808 0
 3957 006e 436A     		ldr	r3, [r0, #36]
 3958 0070 13F0200F 		tst	r3, #32
 3959 0074 06D0     		beq	.L341
2811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3960              		.loc 1 2811 0
 3961 0076 0268     		ldr	r2, [r0]
 3962 0078 9368     		ldr	r3, [r2, #8]
 3963 007a 23F40053 		bic	r3, r3, #8192
 3964 007e C16B     		ldr	r1, [r0, #60]
 3965 0080 0B43     		orrs	r3, r3, r1
 3966 0082 9360     		str	r3, [r2, #8]
 3967              	.L341:
2815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3968              		.loc 1 2815 0
 3969 0084 436A     		ldr	r3, [r0, #36]
 3970 0086 13F0400F 		tst	r3, #64
ARM GAS  /tmp/ccPLDEwZ.s 			page 141


 3971 008a 0AD0     		beq	.L342
2819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
 3972              		.loc 1 2819 0
 3973 008c 0268     		ldr	r2, [r0]
 3974 008e 5368     		ldr	r3, [r2, #4]
 3975 0090 23F48013 		bic	r3, r3, #1048576
 3976 0094 016C     		ldr	r1, [r0, #64]
 3977 0096 0B43     		orrs	r3, r3, r1
 3978 0098 5360     		str	r3, [r2, #4]
2821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3979              		.loc 1 2821 0
 3980 009a 036C     		ldr	r3, [r0, #64]
 3981 009c B3F5801F 		cmp	r3, #1048576
 3982 00a0 0BD0     		beq	.L344
 3983              	.L342:
2829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3984              		.loc 1 2829 0
 3985 00a2 436A     		ldr	r3, [r0, #36]
 3986 00a4 13F0800F 		tst	r3, #128
 3987 00a8 06D0     		beq	.L335
2832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3988              		.loc 1 2832 0
 3989 00aa 0268     		ldr	r2, [r0]
 3990 00ac 5368     		ldr	r3, [r2, #4]
 3991 00ae 23F40023 		bic	r3, r3, #524288
 3992 00b2 816C     		ldr	r1, [r0, #72]
 3993 00b4 0B43     		orrs	r3, r3, r1
 3994 00b6 5360     		str	r3, [r2, #4]
 3995              	.L335:
 3996 00b8 7047     		bx	lr
 3997              	.L344:
2824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3998              		.loc 1 2824 0
 3999 00ba 0268     		ldr	r2, [r0]
 4000 00bc 5368     		ldr	r3, [r2, #4]
 4001 00be 23F4C003 		bic	r3, r3, #6291456
 4002 00c2 416C     		ldr	r1, [r0, #68]
 4003 00c4 0B43     		orrs	r3, r3, r1
 4004 00c6 5360     		str	r3, [r2, #4]
 4005 00c8 EBE7     		b	.L342
 4006              		.cfi_endproc
 4007              	.LFE181:
 4009              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4010              		.align	1
 4011              		.global	UART_WaitOnFlagUntilTimeout
 4012              		.syntax unified
 4013              		.thumb
 4014              		.thumb_func
 4015              		.fpu fpv5-d16
 4017              	UART_WaitOnFlagUntilTimeout:
 4018              	.LFB183:
2882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Wait until flag is set */
 4019              		.loc 1 2882 0
 4020              		.cfi_startproc
 4021              		@ args = 4, pretend = 0, frame = 0
 4022              		@ frame_needed = 0, uses_anonymous_args = 0
 4023              	.LVL365:
ARM GAS  /tmp/ccPLDEwZ.s 			page 142


 4024 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4025              	.LCFI30:
 4026              		.cfi_def_cfa_offset 24
 4027              		.cfi_offset 4, -24
 4028              		.cfi_offset 5, -20
 4029              		.cfi_offset 6, -16
 4030              		.cfi_offset 7, -12
 4031              		.cfi_offset 8, -8
 4032              		.cfi_offset 14, -4
 4033 0004 0546     		mov	r5, r0
 4034 0006 0F46     		mov	r7, r1
 4035 0008 1646     		mov	r6, r2
 4036 000a 9846     		mov	r8, r3
 4037 000c 069C     		ldr	r4, [sp, #24]
 4038              	.LVL366:
 4039              	.L347:
2884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4040              		.loc 1 2884 0
 4041 000e 2B68     		ldr	r3, [r5]
 4042 0010 DB69     		ldr	r3, [r3, #28]
 4043 0012 37EA0303 		bics	r3, r7, r3
 4044 0016 0CBF     		ite	eq
 4045 0018 0123     		moveq	r3, #1
 4046 001a 0023     		movne	r3, #0
 4047 001c B342     		cmp	r3, r6
 4048 001e 1DD1     		bne	.L352
2887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4049              		.loc 1 2887 0
 4050 0020 B4F1FF3F 		cmp	r4, #-1
 4051 0024 F3D0     		beq	.L347
2889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4052              		.loc 1 2889 0
 4053 0026 FFF7FEFF 		bl	HAL_GetTick
 4054              	.LVL367:
 4055 002a A0EB0800 		sub	r0, r0, r8
 4056 002e 8442     		cmp	r4, r0
 4057 0030 01D3     		bcc	.L348
2889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4058              		.loc 1 2889 0 is_stmt 0 discriminator 1
 4059 0032 002C     		cmp	r4, #0
 4060 0034 EBD1     		bne	.L347
 4061              	.L348:
2892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4062              		.loc 1 2892 0 is_stmt 1
 4063 0036 2A68     		ldr	r2, [r5]
 4064 0038 1368     		ldr	r3, [r2]
 4065 003a 23F4D073 		bic	r3, r3, #416
 4066 003e 1360     		str	r3, [r2]
2893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4067              		.loc 1 2893 0
 4068 0040 2A68     		ldr	r2, [r5]
 4069 0042 9368     		ldr	r3, [r2, #8]
 4070 0044 23F00103 		bic	r3, r3, #1
 4071 0048 9360     		str	r3, [r2, #8]
2895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4072              		.loc 1 2895 0
 4073 004a 2023     		movs	r3, #32
ARM GAS  /tmp/ccPLDEwZ.s 			page 143


 4074 004c 6B67     		str	r3, [r5, #116]
2896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4075              		.loc 1 2896 0
 4076 004e AB67     		str	r3, [r5, #120]
2899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4077              		.loc 1 2899 0
 4078 0050 0023     		movs	r3, #0
 4079 0052 85F87030 		strb	r3, [r5, #112]
2901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4080              		.loc 1 2901 0
 4081 0056 0320     		movs	r0, #3
 4082 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4083              	.LVL368:
 4084              	.L352:
2905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4085              		.loc 1 2905 0
 4086 005c 0020     		movs	r0, #0
2906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4087              		.loc 1 2906 0
 4088 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4089              		.cfi_endproc
 4090              	.LFE183:
 4092              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 4093              		.align	1
 4094              		.global	HAL_UART_Transmit
 4095              		.syntax unified
 4096              		.thumb
 4097              		.thumb_func
 4098              		.fpu fpv5-d16
 4100              	HAL_UART_Transmit:
 4101              	.LFB148:
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 4102              		.loc 1 1023 0
 4103              		.cfi_startproc
 4104              		@ args = 0, pretend = 0, frame = 0
 4105              		@ frame_needed = 0, uses_anonymous_args = 0
 4106              	.LVL369:
 4107 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4108              	.LCFI31:
 4109              		.cfi_def_cfa_offset 24
 4110              		.cfi_offset 4, -24
 4111              		.cfi_offset 5, -20
 4112              		.cfi_offset 6, -16
 4113              		.cfi_offset 7, -12
 4114              		.cfi_offset 8, -8
 4115              		.cfi_offset 14, -4
 4116 0004 82B0     		sub	sp, sp, #8
 4117              	.LCFI32:
 4118              		.cfi_def_cfa_offset 32
 4119 0006 1E46     		mov	r6, r3
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4120              		.loc 1 1029 0
 4121 0008 436F     		ldr	r3, [r0, #116]
 4122              	.LVL370:
 4123 000a 202B     		cmp	r3, #32
 4124 000c 04D0     		beq	.L368
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPLDEwZ.s 			page 144


 4125              		.loc 1 1094 0
 4126 000e 0223     		movs	r3, #2
 4127              	.LVL371:
 4128              	.L354:
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4129              		.loc 1 1096 0
 4130 0010 1846     		mov	r0, r3
 4131 0012 02B0     		add	sp, sp, #8
 4132              	.LCFI33:
 4133              		.cfi_remember_state
 4134              		.cfi_def_cfa_offset 24
 4135              		@ sp needed
 4136 0014 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4137              	.LVL372:
 4138              	.L368:
 4139              	.LCFI34:
 4140              		.cfi_restore_state
 4141 0018 0446     		mov	r4, r0
 4142 001a 0D46     		mov	r5, r1
 4143 001c 9046     		mov	r8, r2
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4144              		.loc 1 1031 0
 4145 001e 002A     		cmp	r2, #0
 4146 0020 18BF     		it	ne
 4147 0022 0029     		cmpne	r1, #0
 4148 0024 53D0     		beq	.L361
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4149              		.loc 1 1037 0
 4150 0026 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 4151 002a 012B     		cmp	r3, #1
 4152 002c 01D1     		bne	.L369
 4153 002e 0223     		movs	r3, #2
 4154 0030 EEE7     		b	.L354
 4155              	.L369:
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4156              		.loc 1 1037 0 is_stmt 0 discriminator 2
 4157 0032 0123     		movs	r3, #1
 4158 0034 80F87030 		strb	r3, [r0, #112]
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 4159              		.loc 1 1039 0 is_stmt 1 discriminator 2
 4160 0038 0023     		movs	r3, #0
 4161 003a C367     		str	r3, [r0, #124]
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4162              		.loc 1 1040 0 discriminator 2
 4163 003c 2123     		movs	r3, #33
 4164 003e 4367     		str	r3, [r0, #116]
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4165              		.loc 1 1043 0 discriminator 2
 4166 0040 FFF7FEFF 		bl	HAL_GetTick
 4167              	.LVL373:
 4168 0044 0746     		mov	r7, r0
 4169              	.LVL374:
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 4170              		.loc 1 1045 0 discriminator 2
 4171 0046 A4F85080 		strh	r8, [r4, #80]	@ movhi
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4172              		.loc 1 1046 0 discriminator 2
ARM GAS  /tmp/ccPLDEwZ.s 			page 145


 4173 004a A4F85280 		strh	r8, [r4, #82]	@ movhi
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4174              		.loc 1 1049 0 discriminator 2
 4175 004e A368     		ldr	r3, [r4, #8]
 4176 0050 B3F5805F 		cmp	r3, #4096
 4177 0054 02D0     		beq	.L370
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4178              		.loc 1 1057 0
 4179 0056 4FF00008 		mov	r8, #0
 4180 005a 14E0     		b	.L356
 4181              	.L370:
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4182              		.loc 1 1049 0 discriminator 1
 4183 005c 2369     		ldr	r3, [r4, #16]
 4184 005e 13B1     		cbz	r3, .L364
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4185              		.loc 1 1057 0
 4186 0060 4FF00008 		mov	r8, #0
 4187 0064 0FE0     		b	.L356
 4188              	.L364:
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4189              		.loc 1 1052 0
 4190 0066 A846     		mov	r8, r5
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 4191              		.loc 1 1051 0
 4192 0068 0025     		movs	r5, #0
 4193              	.LVL375:
 4194 006a 0CE0     		b	.L356
 4195              	.LVL376:
 4196              	.L372:
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
 4197              		.loc 1 1068 0
 4198 006c 2268     		ldr	r2, [r4]
 4199 006e 38F8023B 		ldrh	r3, [r8], #2
 4200              	.LVL377:
 4201 0072 C3F30803 		ubfx	r3, r3, #0, #9
 4202 0076 9362     		str	r3, [r2, #40]
 4203              	.LVL378:
 4204              	.L358:
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4205              		.loc 1 1076 0
 4206 0078 B4F85230 		ldrh	r3, [r4, #82]
 4207 007c 9BB2     		uxth	r3, r3
 4208 007e 013B     		subs	r3, r3, #1
 4209 0080 9BB2     		uxth	r3, r3
 4210 0082 A4F85230 		strh	r3, [r4, #82]	@ movhi
 4211              	.LVL379:
 4212              	.L356:
1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4213              		.loc 1 1060 0
 4214 0086 B4F85230 		ldrh	r3, [r4, #82]
 4215 008a 9BB2     		uxth	r3, r3
 4216 008c 73B1     		cbz	r3, .L371
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4217              		.loc 1 1062 0
 4218 008e 0096     		str	r6, [sp]
 4219 0090 3B46     		mov	r3, r7
ARM GAS  /tmp/ccPLDEwZ.s 			page 146


 4220 0092 0022     		movs	r2, #0
 4221 0094 8021     		movs	r1, #128
 4222 0096 2046     		mov	r0, r4
 4223 0098 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4224              	.LVL380:
 4225 009c C8B9     		cbnz	r0, .L365
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4226              		.loc 1 1066 0
 4227 009e 002D     		cmp	r5, #0
 4228 00a0 E4D0     		beq	.L372
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
 4229              		.loc 1 1073 0
 4230 00a2 2368     		ldr	r3, [r4]
 4231 00a4 15F8012B 		ldrb	r2, [r5], #1	@ zero_extendqisi2
 4232              	.LVL381:
 4233 00a8 9A62     		str	r2, [r3, #40]
 4234              	.LVL382:
 4235 00aa E5E7     		b	.L358
 4236              	.L371:
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4237              		.loc 1 1079 0
 4238 00ac 0096     		str	r6, [sp]
 4239 00ae 3B46     		mov	r3, r7
 4240 00b0 0022     		movs	r2, #0
 4241 00b2 4021     		movs	r1, #64
 4242 00b4 2046     		mov	r0, r4
 4243 00b6 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4244              	.LVL383:
 4245 00ba 0346     		mov	r3, r0
 4246 00bc 08B1     		cbz	r0, .L373
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4247              		.loc 1 1081 0
 4248 00be 0323     		movs	r3, #3
 4249 00c0 A6E7     		b	.L354
 4250              	.L373:
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4251              		.loc 1 1085 0
 4252 00c2 2022     		movs	r2, #32
 4253 00c4 6267     		str	r2, [r4, #116]
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4254              		.loc 1 1088 0
 4255 00c6 0022     		movs	r2, #0
 4256 00c8 84F87020 		strb	r2, [r4, #112]
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4257              		.loc 1 1090 0
 4258 00cc A0E7     		b	.L354
 4259              	.LVL384:
 4260              	.L361:
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4261              		.loc 1 1033 0
 4262 00ce 0123     		movs	r3, #1
 4263 00d0 9EE7     		b	.L354
 4264              	.LVL385:
 4265              	.L365:
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4266              		.loc 1 1064 0
 4267 00d2 0323     		movs	r3, #3
ARM GAS  /tmp/ccPLDEwZ.s 			page 147


 4268 00d4 9CE7     		b	.L354
 4269              		.cfi_endproc
 4270              	.LFE148:
 4272              		.section	.text.HAL_UART_Receive,"ax",%progbits
 4273              		.align	1
 4274              		.global	HAL_UART_Receive
 4275              		.syntax unified
 4276              		.thumb
 4277              		.thumb_func
 4278              		.fpu fpv5-d16
 4280              	HAL_UART_Receive:
 4281              	.LFB149:
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 4282              		.loc 1 1107 0
 4283              		.cfi_startproc
 4284              		@ args = 0, pretend = 0, frame = 0
 4285              		@ frame_needed = 0, uses_anonymous_args = 0
 4286              	.LVL386:
 4287 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4288              	.LCFI35:
 4289              		.cfi_def_cfa_offset 28
 4290              		.cfi_offset 4, -28
 4291              		.cfi_offset 5, -24
 4292              		.cfi_offset 6, -20
 4293              		.cfi_offset 7, -16
 4294              		.cfi_offset 8, -12
 4295              		.cfi_offset 9, -8
 4296              		.cfi_offset 14, -4
 4297 0004 83B0     		sub	sp, sp, #12
 4298              	.LCFI36:
 4299              		.cfi_def_cfa_offset 40
 4300 0006 1E46     		mov	r6, r3
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4301              		.loc 1 1114 0
 4302 0008 836F     		ldr	r3, [r0, #120]
 4303              	.LVL387:
 4304 000a 202B     		cmp	r3, #32
 4305 000c 03D0     		beq	.L395
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4306              		.loc 1 1179 0
 4307 000e 0220     		movs	r0, #2
 4308              	.LVL388:
 4309              	.L375:
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4310              		.loc 1 1181 0
 4311 0010 03B0     		add	sp, sp, #12
 4312              	.LCFI37:
 4313              		.cfi_remember_state
 4314              		.cfi_def_cfa_offset 28
 4315              		@ sp needed
 4316 0012 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4317              	.LVL389:
 4318              	.L395:
 4319              	.LCFI38:
 4320              		.cfi_restore_state
 4321 0016 0446     		mov	r4, r0
 4322 0018 0D46     		mov	r5, r1
ARM GAS  /tmp/ccPLDEwZ.s 			page 148


 4323 001a 9046     		mov	r8, r2
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4324              		.loc 1 1116 0
 4325 001c 002A     		cmp	r2, #0
 4326 001e 18BF     		it	ne
 4327 0020 0029     		cmpne	r1, #0
 4328 0022 76D0     		beq	.L389
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4329              		.loc 1 1122 0
 4330 0024 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 4331 0028 012B     		cmp	r3, #1
 4332 002a 01D1     		bne	.L396
 4333 002c 0220     		movs	r0, #2
 4334              	.LVL390:
 4335 002e EFE7     		b	.L375
 4336              	.LVL391:
 4337              	.L396:
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4338              		.loc 1 1122 0 is_stmt 0 discriminator 2
 4339 0030 0123     		movs	r3, #1
 4340 0032 80F87030 		strb	r3, [r0, #112]
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 4341              		.loc 1 1124 0 is_stmt 1 discriminator 2
 4342 0036 0023     		movs	r3, #0
 4343 0038 C367     		str	r3, [r0, #124]
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4344              		.loc 1 1125 0 discriminator 2
 4345 003a 2223     		movs	r3, #34
 4346 003c 8367     		str	r3, [r0, #120]
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4347              		.loc 1 1128 0 discriminator 2
 4348 003e FFF7FEFF 		bl	HAL_GetTick
 4349              	.LVL392:
 4350 0042 0746     		mov	r7, r0
 4351              	.LVL393:
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
 4352              		.loc 1 1130 0 discriminator 2
 4353 0044 A4F85880 		strh	r8, [r4, #88]	@ movhi
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4354              		.loc 1 1131 0 discriminator 2
 4355 0048 A4F85A80 		strh	r8, [r4, #90]	@ movhi
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4356              		.loc 1 1134 0 discriminator 2
 4357 004c A368     		ldr	r3, [r4, #8]
 4358 004e B3F5805F 		cmp	r3, #4096
 4359 0052 06D0     		beq	.L397
 4360 0054 A3B9     		cbnz	r3, .L379
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4361              		.loc 1 1134 0 is_stmt 0 discriminator 5
 4362 0056 2269     		ldr	r2, [r4, #16]
 4363 0058 72B9     		cbnz	r2, .L380
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4364              		.loc 1 1134 0 discriminator 7
 4365 005a FF22     		movs	r2, #255
 4366 005c A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4367 0060 14E0     		b	.L378
 4368              	.L397:
ARM GAS  /tmp/ccPLDEwZ.s 			page 149


1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4369              		.loc 1 1134 0 discriminator 1
 4370 0062 2269     		ldr	r2, [r4, #16]
 4371 0064 22B9     		cbnz	r2, .L377
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4372              		.loc 1 1134 0 discriminator 3
 4373 0066 40F2FF12 		movw	r2, #511
 4374 006a A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4375 006e 0DE0     		b	.L378
 4376              	.L377:
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4377              		.loc 1 1134 0 discriminator 4
 4378 0070 FF22     		movs	r2, #255
 4379 0072 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4380 0076 09E0     		b	.L378
 4381              	.L380:
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4382              		.loc 1 1134 0 discriminator 8
 4383 0078 7F22     		movs	r2, #127
 4384 007a A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4385 007e 05E0     		b	.L378
 4386              	.L379:
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4387              		.loc 1 1134 0 discriminator 6
 4388 0080 B3F1805F 		cmp	r3, #268435456
 4389 0084 0AD0     		beq	.L398
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4390              		.loc 1 1134 0 discriminator 10
 4391 0086 0022     		movs	r2, #0
 4392 0088 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4393              	.L378:
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4394              		.loc 1 1135 0 is_stmt 1
 4395 008c B4F85C80 		ldrh	r8, [r4, #92]
 4396              	.LVL394:
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4397              		.loc 1 1138 0
 4398 0090 B3F5805F 		cmp	r3, #4096
 4399 0094 0CD0     		beq	.L399
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4400              		.loc 1 1146 0
 4401 0096 4FF00009 		mov	r9, #0
 4402 009a 1EE0     		b	.L384
 4403              	.LVL395:
 4404              	.L398:
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4405              		.loc 1 1134 0 discriminator 9
 4406 009c 2269     		ldr	r2, [r4, #16]
 4407 009e 1AB9     		cbnz	r2, .L382
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4408              		.loc 1 1134 0 is_stmt 0 discriminator 11
 4409 00a0 7F22     		movs	r2, #127
 4410 00a2 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4411 00a6 F1E7     		b	.L378
 4412              	.L382:
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4413              		.loc 1 1134 0 discriminator 12
ARM GAS  /tmp/ccPLDEwZ.s 			page 150


 4414 00a8 3F22     		movs	r2, #63
 4415 00aa A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4416 00ae EDE7     		b	.L378
 4417              	.LVL396:
 4418              	.L399:
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4419              		.loc 1 1138 0 is_stmt 1 discriminator 1
 4420 00b0 2369     		ldr	r3, [r4, #16]
 4421 00b2 13B1     		cbz	r3, .L392
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4422              		.loc 1 1146 0
 4423 00b4 4FF00009 		mov	r9, #0
 4424 00b8 0FE0     		b	.L384
 4425              	.L392:
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4426              		.loc 1 1141 0
 4427 00ba A946     		mov	r9, r5
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 4428              		.loc 1 1140 0
 4429 00bc 0025     		movs	r5, #0
 4430              	.LVL397:
 4431 00be 0CE0     		b	.L384
 4432              	.LVL398:
 4433              	.L401:
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
 4434              		.loc 1 1158 0
 4435 00c0 2368     		ldr	r3, [r4]
 4436 00c2 5B6A     		ldr	r3, [r3, #36]
 4437 00c4 08EA0303 		and	r3, r8, r3
 4438 00c8 29F8023B 		strh	r3, [r9], #2	@ movhi
 4439              	.LVL399:
 4440              	.L386:
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4441              		.loc 1 1166 0
 4442 00cc B4F85A30 		ldrh	r3, [r4, #90]
 4443 00d0 9BB2     		uxth	r3, r3
 4444 00d2 013B     		subs	r3, r3, #1
 4445 00d4 9BB2     		uxth	r3, r3
 4446 00d6 A4F85A30 		strh	r3, [r4, #90]	@ movhi
 4447              	.LVL400:
 4448              	.L384:
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4449              		.loc 1 1150 0
 4450 00da B4F85A30 		ldrh	r3, [r4, #90]
 4451 00de 9BB2     		uxth	r3, r3
 4452 00e0 8BB1     		cbz	r3, .L400
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4453              		.loc 1 1152 0
 4454 00e2 0096     		str	r6, [sp]
 4455 00e4 3B46     		mov	r3, r7
 4456 00e6 0022     		movs	r2, #0
 4457 00e8 2021     		movs	r1, #32
 4458 00ea 2046     		mov	r0, r4
 4459 00ec FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4460              	.LVL401:
 4461 00f0 88B9     		cbnz	r0, .L393
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
ARM GAS  /tmp/ccPLDEwZ.s 			page 151


 4462              		.loc 1 1156 0
 4463 00f2 002D     		cmp	r5, #0
 4464 00f4 E4D0     		beq	.L401
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
 4465              		.loc 1 1163 0
 4466 00f6 2368     		ldr	r3, [r4]
 4467 00f8 5A6A     		ldr	r2, [r3, #36]
 4468 00fa 5FFA88F3 		uxtb	r3, r8
 4469 00fe 1340     		ands	r3, r3, r2
 4470 0100 05F8013B 		strb	r3, [r5], #1
 4471              	.LVL402:
 4472 0104 E2E7     		b	.L386
 4473              	.L400:
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4474              		.loc 1 1170 0
 4475 0106 2023     		movs	r3, #32
 4476 0108 A367     		str	r3, [r4, #120]
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4477              		.loc 1 1173 0
 4478 010a 0020     		movs	r0, #0
 4479 010c 84F87000 		strb	r0, [r4, #112]
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4480              		.loc 1 1175 0
 4481 0110 7EE7     		b	.L375
 4482              	.LVL403:
 4483              	.L389:
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4484              		.loc 1 1118 0
 4485 0112 0120     		movs	r0, #1
 4486              	.LVL404:
 4487 0114 7CE7     		b	.L375
 4488              	.LVL405:
 4489              	.L393:
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4490              		.loc 1 1154 0
 4491 0116 0320     		movs	r0, #3
 4492 0118 7AE7     		b	.L375
 4493              		.cfi_endproc
 4494              	.LFE149:
 4496              		.section	.text.UART_CheckIdleState,"ax",%progbits
 4497              		.align	1
 4498              		.global	UART_CheckIdleState
 4499              		.syntax unified
 4500              		.thumb
 4501              		.thumb_func
 4502              		.fpu fpv5-d16
 4504              	UART_CheckIdleState:
 4505              	.LFB182:
2842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
 4506              		.loc 1 2842 0
 4507              		.cfi_startproc
 4508              		@ args = 0, pretend = 0, frame = 0
 4509              		@ frame_needed = 0, uses_anonymous_args = 0
 4510              	.LVL406:
 4511 0000 10B5     		push	{r4, lr}
 4512              	.LCFI39:
 4513              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccPLDEwZ.s 			page 152


 4514              		.cfi_offset 4, -8
 4515              		.cfi_offset 14, -4
 4516 0002 82B0     		sub	sp, sp, #8
 4517              	.LCFI40:
 4518              		.cfi_def_cfa_offset 16
 4519 0004 0446     		mov	r4, r0
2846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4520              		.loc 1 2846 0
 4521 0006 0023     		movs	r3, #0
 4522 0008 C367     		str	r3, [r0, #124]
2849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4523              		.loc 1 2849 0
 4524 000a FFF7FEFF 		bl	HAL_GetTick
 4525              	.LVL407:
2852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4526              		.loc 1 2852 0
 4527 000e 2268     		ldr	r2, [r4]
 4528 0010 1268     		ldr	r2, [r2]
 4529 0012 12F0080F 		tst	r2, #8
 4530 0016 07D1     		bne	.L407
 4531              	.LVL408:
 4532              	.L403:
2863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4533              		.loc 1 2863 0
 4534 0018 2023     		movs	r3, #32
 4535 001a 6367     		str	r3, [r4, #116]
2864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4536              		.loc 1 2864 0
 4537 001c A367     		str	r3, [r4, #120]
2867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4538              		.loc 1 2867 0
 4539 001e 0020     		movs	r0, #0
 4540 0020 84F87000 		strb	r0, [r4, #112]
 4541              	.L404:
2870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4542              		.loc 1 2870 0
 4543 0024 02B0     		add	sp, sp, #8
 4544              	.LCFI41:
 4545              		.cfi_remember_state
 4546              		.cfi_def_cfa_offset 8
 4547              		@ sp needed
 4548 0026 10BD     		pop	{r4, pc}
 4549              	.LVL409:
 4550              	.L407:
 4551              	.LCFI42:
 4552              		.cfi_restore_state
2855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4553              		.loc 1 2855 0
 4554 0028 6FF07E43 		mvn	r3, #-33554432
 4555 002c 0093     		str	r3, [sp]
 4556 002e 0346     		mov	r3, r0
 4557 0030 0022     		movs	r2, #0
 4558 0032 4FF40011 		mov	r1, #2097152
 4559 0036 2046     		mov	r0, r4
 4560              	.LVL410:
 4561 0038 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4562              	.LVL411:
ARM GAS  /tmp/ccPLDEwZ.s 			page 153


 4563 003c 0028     		cmp	r0, #0
 4564 003e EBD0     		beq	.L403
2858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4565              		.loc 1 2858 0
 4566 0040 0320     		movs	r0, #3
 4567 0042 EFE7     		b	.L404
 4568              		.cfi_endproc
 4569              	.LFE182:
 4571              		.section	.text.HAL_UART_Init,"ax",%progbits
 4572              		.align	1
 4573              		.global	HAL_UART_Init
 4574              		.syntax unified
 4575              		.thumb
 4576              		.thumb_func
 4577              		.fpu fpv5-d16
 4579              	HAL_UART_Init:
 4580              	.LFB141:
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4581              		.loc 1 288 0
 4582              		.cfi_startproc
 4583              		@ args = 0, pretend = 0, frame = 0
 4584              		@ frame_needed = 0, uses_anonymous_args = 0
 4585              	.LVL412:
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4586              		.loc 1 290 0
 4587 0000 68B3     		cbz	r0, .L412
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4588              		.loc 1 288 0
 4589 0002 10B5     		push	{r4, lr}
 4590              	.LCFI43:
 4591              		.cfi_def_cfa_offset 8
 4592              		.cfi_offset 4, -8
 4593              		.cfi_offset 14, -4
 4594 0004 0446     		mov	r4, r0
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4595              		.loc 1 306 0
 4596 0006 436F     		ldr	r3, [r0, #116]
 4597 0008 03B3     		cbz	r3, .L417
 4598              	.LVL413:
 4599              	.L410:
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4600              		.loc 1 327 0
 4601 000a 2423     		movs	r3, #36
 4602 000c 6367     		str	r3, [r4, #116]
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4603              		.loc 1 330 0
 4604 000e 2268     		ldr	r2, [r4]
 4605 0010 1368     		ldr	r3, [r2]
 4606 0012 23F00103 		bic	r3, r3, #1
 4607 0016 1360     		str	r3, [r2]
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4608              		.loc 1 333 0
 4609 0018 2046     		mov	r0, r4
 4610 001a FFF7FEFF 		bl	UART_SetConfig
 4611              	.LVL414:
 4612 001e 0128     		cmp	r0, #1
 4613 0020 1FD0     		beq	.L409
ARM GAS  /tmp/ccPLDEwZ.s 			page 154


 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4614              		.loc 1 338 0
 4615 0022 636A     		ldr	r3, [r4, #36]
 4616 0024 BBB9     		cbnz	r3, .L418
 4617              	.L411:
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 4618              		.loc 1 346 0
 4619 0026 2268     		ldr	r2, [r4]
 4620 0028 5368     		ldr	r3, [r2, #4]
 4621 002a 23F49043 		bic	r3, r3, #18432
 4622 002e 5360     		str	r3, [r2, #4]
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4623              		.loc 1 347 0
 4624 0030 2268     		ldr	r2, [r4]
 4625 0032 9368     		ldr	r3, [r2, #8]
 4626 0034 23F02A03 		bic	r3, r3, #42
 4627 0038 9360     		str	r3, [r2, #8]
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4628              		.loc 1 350 0
 4629 003a 2268     		ldr	r2, [r4]
 4630 003c 1368     		ldr	r3, [r2]
 4631 003e 43F00103 		orr	r3, r3, #1
 4632 0042 1360     		str	r3, [r2]
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4633              		.loc 1 353 0
 4634 0044 2046     		mov	r0, r4
 4635 0046 FFF7FEFF 		bl	UART_CheckIdleState
 4636              	.LVL415:
 4637 004a 10BD     		pop	{r4, pc}
 4638              	.LVL416:
 4639              	.L417:
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4640              		.loc 1 309 0
 4641 004c 80F87030 		strb	r3, [r0, #112]
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 4642              		.loc 1 323 0
 4643 0050 FFF7FEFF 		bl	HAL_UART_MspInit
 4644              	.LVL417:
 4645 0054 D9E7     		b	.L410
 4646              	.L418:
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4647              		.loc 1 340 0
 4648 0056 2046     		mov	r0, r4
 4649 0058 FFF7FEFF 		bl	UART_AdvFeatureConfig
 4650              	.LVL418:
 4651 005c E3E7     		b	.L411
 4652              	.LVL419:
 4653              	.L412:
 4654              	.LCFI44:
 4655              		.cfi_def_cfa_offset 0
 4656              		.cfi_restore 4
 4657              		.cfi_restore 14
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4658              		.loc 1 292 0
 4659 005e 0120     		movs	r0, #1
 4660              	.LVL420:
 4661 0060 7047     		bx	lr
ARM GAS  /tmp/ccPLDEwZ.s 			page 155


 4662              	.LVL421:
 4663              	.L409:
 4664              	.LCFI45:
 4665              		.cfi_def_cfa_offset 8
 4666              		.cfi_offset 4, -8
 4667              		.cfi_offset 14, -4
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4668              		.loc 1 354 0
 4669 0062 10BD     		pop	{r4, pc}
 4670              		.cfi_endproc
 4671              	.LFE141:
 4673              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 4674              		.align	1
 4675              		.global	HAL_HalfDuplex_Init
 4676              		.syntax unified
 4677              		.thumb
 4678              		.thumb_func
 4679              		.fpu fpv5-d16
 4681              	HAL_HalfDuplex_Init:
 4682              	.LFB142:
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4683              		.loc 1 363 0
 4684              		.cfi_startproc
 4685              		@ args = 0, pretend = 0, frame = 0
 4686              		@ frame_needed = 0, uses_anonymous_args = 0
 4687              	.LVL422:
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4688              		.loc 1 365 0
 4689 0000 0028     		cmp	r0, #0
 4690 0002 32D0     		beq	.L423
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4691              		.loc 1 363 0
 4692 0004 10B5     		push	{r4, lr}
 4693              	.LCFI46:
 4694              		.cfi_def_cfa_offset 8
 4695              		.cfi_offset 4, -8
 4696              		.cfi_offset 14, -4
 4697 0006 0446     		mov	r4, r0
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4698              		.loc 1 373 0
 4699 0008 436F     		ldr	r3, [r0, #116]
 4700 000a 2BB3     		cbz	r3, .L428
 4701              	.LVL423:
 4702              	.L421:
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4703              		.loc 1 394 0
 4704 000c 2423     		movs	r3, #36
 4705 000e 6367     		str	r3, [r4, #116]
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4706              		.loc 1 397 0
 4707 0010 2268     		ldr	r2, [r4]
 4708 0012 1368     		ldr	r3, [r2]
 4709 0014 23F00103 		bic	r3, r3, #1
 4710 0018 1360     		str	r3, [r2]
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4711              		.loc 1 400 0
 4712 001a 2046     		mov	r0, r4
ARM GAS  /tmp/ccPLDEwZ.s 			page 156


 4713 001c FFF7FEFF 		bl	UART_SetConfig
 4714              	.LVL424:
 4715 0020 0128     		cmp	r0, #1
 4716 0022 24D0     		beq	.L420
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4717              		.loc 1 405 0
 4718 0024 636A     		ldr	r3, [r4, #36]
 4719 0026 E3B9     		cbnz	r3, .L429
 4720              	.L422:
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 4721              		.loc 1 413 0
 4722 0028 2268     		ldr	r2, [r4]
 4723 002a 5368     		ldr	r3, [r2, #4]
 4724 002c 23F49043 		bic	r3, r3, #18432
 4725 0030 5360     		str	r3, [r2, #4]
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4726              		.loc 1 414 0
 4727 0032 2268     		ldr	r2, [r4]
 4728 0034 9368     		ldr	r3, [r2, #8]
 4729 0036 23F02203 		bic	r3, r3, #34
 4730 003a 9360     		str	r3, [r2, #8]
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4731              		.loc 1 417 0
 4732 003c 2268     		ldr	r2, [r4]
 4733 003e 9368     		ldr	r3, [r2, #8]
 4734 0040 43F00803 		orr	r3, r3, #8
 4735 0044 9360     		str	r3, [r2, #8]
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4736              		.loc 1 420 0
 4737 0046 2268     		ldr	r2, [r4]
 4738 0048 1368     		ldr	r3, [r2]
 4739 004a 43F00103 		orr	r3, r3, #1
 4740 004e 1360     		str	r3, [r2]
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4741              		.loc 1 423 0
 4742 0050 2046     		mov	r0, r4
 4743 0052 FFF7FEFF 		bl	UART_CheckIdleState
 4744              	.LVL425:
 4745 0056 10BD     		pop	{r4, pc}
 4746              	.LVL426:
 4747              	.L428:
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4748              		.loc 1 376 0
 4749 0058 80F87030 		strb	r3, [r0, #112]
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 4750              		.loc 1 390 0
 4751 005c FFF7FEFF 		bl	HAL_UART_MspInit
 4752              	.LVL427:
 4753 0060 D4E7     		b	.L421
 4754              	.L429:
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4755              		.loc 1 407 0
 4756 0062 2046     		mov	r0, r4
 4757 0064 FFF7FEFF 		bl	UART_AdvFeatureConfig
 4758              	.LVL428:
 4759 0068 DEE7     		b	.L422
 4760              	.LVL429:
ARM GAS  /tmp/ccPLDEwZ.s 			page 157


 4761              	.L423:
 4762              	.LCFI47:
 4763              		.cfi_def_cfa_offset 0
 4764              		.cfi_restore 4
 4765              		.cfi_restore 14
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4766              		.loc 1 367 0
 4767 006a 0120     		movs	r0, #1
 4768              	.LVL430:
 4769 006c 7047     		bx	lr
 4770              	.LVL431:
 4771              	.L420:
 4772              	.LCFI48:
 4773              		.cfi_def_cfa_offset 8
 4774              		.cfi_offset 4, -8
 4775              		.cfi_offset 14, -4
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4776              		.loc 1 424 0
 4777 006e 10BD     		pop	{r4, pc}
 4778              		.cfi_endproc
 4779              	.LFE142:
 4781              		.section	.text.HAL_LIN_Init,"ax",%progbits
 4782              		.align	1
 4783              		.global	HAL_LIN_Init
 4784              		.syntax unified
 4785              		.thumb
 4786              		.thumb_func
 4787              		.fpu fpv5-d16
 4789              	HAL_LIN_Init:
 4790              	.LFB143:
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4791              		.loc 1 438 0
 4792              		.cfi_startproc
 4793              		@ args = 0, pretend = 0, frame = 0
 4794              		@ frame_needed = 0, uses_anonymous_args = 0
 4795              	.LVL432:
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4796              		.loc 1 440 0
 4797 0000 0028     		cmp	r0, #0
 4798 0002 41D0     		beq	.L434
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4799              		.loc 1 438 0
 4800 0004 38B5     		push	{r3, r4, r5, lr}
 4801              	.LCFI49:
 4802              		.cfi_def_cfa_offset 16
 4803              		.cfi_offset 3, -16
 4804              		.cfi_offset 4, -12
 4805              		.cfi_offset 5, -8
 4806              		.cfi_offset 14, -4
 4807 0006 0446     		mov	r4, r0
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4808              		.loc 1 451 0
 4809 0008 C369     		ldr	r3, [r0, #28]
 4810 000a B3F5004F 		cmp	r3, #32768
 4811 000e 3DD0     		beq	.L435
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4812              		.loc 1 456 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 158


 4813 0010 8368     		ldr	r3, [r0, #8]
 4814 0012 002B     		cmp	r3, #0
 4815 0014 3CD1     		bne	.L436
 4816 0016 0D46     		mov	r5, r1
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4817              		.loc 1 461 0
 4818 0018 436F     		ldr	r3, [r0, #116]
 4819 001a 002B     		cmp	r3, #0
 4820 001c 2BD0     		beq	.L441
 4821              	.LVL433:
 4822              	.L432:
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4823              		.loc 1 482 0
 4824 001e 2423     		movs	r3, #36
 4825 0020 6367     		str	r3, [r4, #116]
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4826              		.loc 1 485 0
 4827 0022 2268     		ldr	r2, [r4]
 4828 0024 1368     		ldr	r3, [r2]
 4829 0026 23F00103 		bic	r3, r3, #1
 4830 002a 1360     		str	r3, [r2]
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4831              		.loc 1 488 0
 4832 002c 2046     		mov	r0, r4
 4833 002e FFF7FEFF 		bl	UART_SetConfig
 4834              	.LVL434:
 4835 0032 0128     		cmp	r0, #1
 4836 0034 2DD0     		beq	.L431
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4837              		.loc 1 493 0
 4838 0036 636A     		ldr	r3, [r4, #36]
 4839 0038 13BB     		cbnz	r3, .L442
 4840              	.L433:
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 4841              		.loc 1 501 0
 4842 003a 2268     		ldr	r2, [r4]
 4843 003c 5368     		ldr	r3, [r2, #4]
 4844 003e 23F40063 		bic	r3, r3, #2048
 4845 0042 5360     		str	r3, [r2, #4]
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4846              		.loc 1 502 0
 4847 0044 2268     		ldr	r2, [r4]
 4848 0046 9368     		ldr	r3, [r2, #8]
 4849 0048 23F02A03 		bic	r3, r3, #42
 4850 004c 9360     		str	r3, [r2, #8]
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4851              		.loc 1 505 0
 4852 004e 2268     		ldr	r2, [r4]
 4853 0050 5368     		ldr	r3, [r2, #4]
 4854 0052 43F48043 		orr	r3, r3, #16384
 4855 0056 5360     		str	r3, [r2, #4]
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4856              		.loc 1 508 0
 4857 0058 2268     		ldr	r2, [r4]
 4858 005a 5368     		ldr	r3, [r2, #4]
 4859 005c 23F02003 		bic	r3, r3, #32
 4860 0060 2B43     		orrs	r3, r3, r5
ARM GAS  /tmp/ccPLDEwZ.s 			page 159


 4861 0062 5360     		str	r3, [r2, #4]
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4862              		.loc 1 511 0
 4863 0064 2268     		ldr	r2, [r4]
 4864 0066 1368     		ldr	r3, [r2]
 4865 0068 43F00103 		orr	r3, r3, #1
 4866 006c 1360     		str	r3, [r2]
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4867              		.loc 1 514 0
 4868 006e 2046     		mov	r0, r4
 4869 0070 FFF7FEFF 		bl	UART_CheckIdleState
 4870              	.LVL435:
 4871 0074 38BD     		pop	{r3, r4, r5, pc}
 4872              	.LVL436:
 4873              	.L441:
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4874              		.loc 1 464 0
 4875 0076 80F87030 		strb	r3, [r0, #112]
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 4876              		.loc 1 478 0
 4877 007a FFF7FEFF 		bl	HAL_UART_MspInit
 4878              	.LVL437:
 4879 007e CEE7     		b	.L432
 4880              	.L442:
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4881              		.loc 1 495 0
 4882 0080 2046     		mov	r0, r4
 4883 0082 FFF7FEFF 		bl	UART_AdvFeatureConfig
 4884              	.LVL438:
 4885 0086 D8E7     		b	.L433
 4886              	.LVL439:
 4887              	.L434:
 4888              	.LCFI50:
 4889              		.cfi_def_cfa_offset 0
 4890              		.cfi_restore 3
 4891              		.cfi_restore 4
 4892              		.cfi_restore 5
 4893              		.cfi_restore 14
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4894              		.loc 1 442 0
 4895 0088 0120     		movs	r0, #1
 4896              	.LVL440:
 4897 008a 7047     		bx	lr
 4898              	.LVL441:
 4899              	.L435:
 4900              	.LCFI51:
 4901              		.cfi_def_cfa_offset 16
 4902              		.cfi_offset 3, -16
 4903              		.cfi_offset 4, -12
 4904              		.cfi_offset 5, -8
 4905              		.cfi_offset 14, -4
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4906              		.loc 1 453 0
 4907 008c 0120     		movs	r0, #1
 4908              	.LVL442:
 4909 008e 38BD     		pop	{r3, r4, r5, pc}
 4910              	.LVL443:
ARM GAS  /tmp/ccPLDEwZ.s 			page 160


 4911              	.L436:
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4912              		.loc 1 458 0
 4913 0090 0120     		movs	r0, #1
 4914              	.LVL444:
 4915              	.L431:
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4916              		.loc 1 515 0
 4917 0092 38BD     		pop	{r3, r4, r5, pc}
 4918              		.cfi_endproc
 4919              	.LFE143:
 4921              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 4922              		.align	1
 4923              		.global	HAL_MultiProcessor_Init
 4924              		.syntax unified
 4925              		.thumb
 4926              		.thumb_func
 4927              		.fpu fpv5-d16
 4929              	HAL_MultiProcessor_Init:
 4930              	.LFB144:
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4931              		.loc 1 537 0
 4932              		.cfi_startproc
 4933              		@ args = 0, pretend = 0, frame = 0
 4934              		@ frame_needed = 0, uses_anonymous_args = 0
 4935              	.LVL445:
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4936              		.loc 1 539 0
 4937 0000 0028     		cmp	r0, #0
 4938 0002 40D0     		beq	.L448
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4939              		.loc 1 537 0
 4940 0004 70B5     		push	{r4, r5, r6, lr}
 4941              	.LCFI52:
 4942              		.cfi_def_cfa_offset 16
 4943              		.cfi_offset 4, -16
 4944              		.cfi_offset 5, -12
 4945              		.cfi_offset 6, -8
 4946              		.cfi_offset 14, -4
 4947 0006 0446     		mov	r4, r0
 4948 0008 1546     		mov	r5, r2
 4949 000a 0E46     		mov	r6, r1
 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4950              		.loc 1 547 0
 4951 000c 436F     		ldr	r3, [r0, #116]
 4952 000e 4BB3     		cbz	r3, .L453
 4953              	.LVL446:
 4954              	.L445:
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4955              		.loc 1 568 0
 4956 0010 2423     		movs	r3, #36
 4957 0012 6367     		str	r3, [r4, #116]
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4958              		.loc 1 571 0
 4959 0014 2268     		ldr	r2, [r4]
 4960 0016 1368     		ldr	r3, [r2]
 4961 0018 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/ccPLDEwZ.s 			page 161


 4962 001c 1360     		str	r3, [r2]
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4963              		.loc 1 574 0
 4964 001e 2046     		mov	r0, r4
 4965 0020 FFF7FEFF 		bl	UART_SetConfig
 4966              	.LVL447:
 4967 0024 0128     		cmp	r0, #1
 4968 0026 30D0     		beq	.L444
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4969              		.loc 1 579 0
 4970 0028 636A     		ldr	r3, [r4, #36]
 4971 002a 03BB     		cbnz	r3, .L454
 4972              	.L446:
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 4973              		.loc 1 587 0
 4974 002c 2268     		ldr	r2, [r4]
 4975 002e 5368     		ldr	r3, [r2, #4]
 4976 0030 23F49043 		bic	r3, r3, #18432
 4977 0034 5360     		str	r3, [r2, #4]
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4978              		.loc 1 588 0
 4979 0036 2268     		ldr	r2, [r4]
 4980 0038 9368     		ldr	r3, [r2, #8]
 4981 003a 23F02A03 		bic	r3, r3, #42
 4982 003e 9360     		str	r3, [r2, #8]
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4983              		.loc 1 590 0
 4984 0040 B5F5006F 		cmp	r5, #2048
 4985 0044 17D0     		beq	.L455
 4986              	.L447:
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4987              		.loc 1 597 0
 4988 0046 2368     		ldr	r3, [r4]
 4989 0048 1A68     		ldr	r2, [r3]
 4990 004a 22F40062 		bic	r2, r2, #2048
 4991 004e 1543     		orrs	r5, r5, r2
 4992              	.LVL448:
 4993 0050 1D60     		str	r5, [r3]
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4994              		.loc 1 600 0
 4995 0052 2268     		ldr	r2, [r4]
 4996 0054 1368     		ldr	r3, [r2]
 4997 0056 43F00103 		orr	r3, r3, #1
 4998 005a 1360     		str	r3, [r2]
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4999              		.loc 1 603 0
 5000 005c 2046     		mov	r0, r4
 5001 005e FFF7FEFF 		bl	UART_CheckIdleState
 5002              	.LVL449:
 5003 0062 70BD     		pop	{r4, r5, r6, pc}
 5004              	.LVL450:
 5005              	.L453:
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5006              		.loc 1 550 0
 5007 0064 80F87030 		strb	r3, [r0, #112]
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 5008              		.loc 1 564 0
ARM GAS  /tmp/ccPLDEwZ.s 			page 162


 5009 0068 FFF7FEFF 		bl	HAL_UART_MspInit
 5010              	.LVL451:
 5011 006c D0E7     		b	.L445
 5012              	.L454:
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5013              		.loc 1 581 0
 5014 006e 2046     		mov	r0, r4
 5015 0070 FFF7FEFF 		bl	UART_AdvFeatureConfig
 5016              	.LVL452:
 5017 0074 DAE7     		b	.L446
 5018              	.L455:
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5019              		.loc 1 593 0
 5020 0076 2368     		ldr	r3, [r4]
 5021 0078 5968     		ldr	r1, [r3, #4]
 5022 007a 21F07F41 		bic	r1, r1, #-16777216
 5023 007e 41EA0666 		orr	r6, r1, r6, lsl #24
 5024 0082 5E60     		str	r6, [r3, #4]
 5025 0084 DFE7     		b	.L447
 5026              	.LVL453:
 5027              	.L448:
 5028              	.LCFI53:
 5029              		.cfi_def_cfa_offset 0
 5030              		.cfi_restore 4
 5031              		.cfi_restore 5
 5032              		.cfi_restore 6
 5033              		.cfi_restore 14
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5034              		.loc 1 541 0
 5035 0086 0120     		movs	r0, #1
 5036              	.LVL454:
 5037 0088 7047     		bx	lr
 5038              	.LVL455:
 5039              	.L444:
 5040              	.LCFI54:
 5041              		.cfi_def_cfa_offset 16
 5042              		.cfi_offset 4, -16
 5043              		.cfi_offset 5, -12
 5044              		.cfi_offset 6, -8
 5045              		.cfi_offset 14, -4
 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5046              		.loc 1 604 0
 5047 008a 70BD     		pop	{r4, r5, r6, pc}
 5048              		.cfi_endproc
 5049              	.LFE144:
 5051              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
 5052              		.align	1
 5053              		.global	HAL_MultiProcessor_EnableMuteMode
 5054              		.syntax unified
 5055              		.thumb
 5056              		.thumb_func
 5057              		.fpu fpv5-d16
 5059              	HAL_MultiProcessor_EnableMuteMode:
 5060              	.LFB172:
2426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
 5061              		.loc 1 2426 0
 5062              		.cfi_startproc
ARM GAS  /tmp/ccPLDEwZ.s 			page 163


 5063              		@ args = 0, pretend = 0, frame = 0
 5064              		@ frame_needed = 0, uses_anonymous_args = 0
 5065              	.LVL456:
 5066 0000 08B5     		push	{r3, lr}
 5067              	.LCFI55:
 5068              		.cfi_def_cfa_offset 8
 5069              		.cfi_offset 3, -8
 5070              		.cfi_offset 14, -4
2428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5071              		.loc 1 2428 0
 5072 0002 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 5073 0006 012B     		cmp	r3, #1
 5074 0008 01D1     		bne	.L460
 5075 000a 0220     		movs	r0, #2
 5076              	.LVL457:
2438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5077              		.loc 1 2438 0
 5078 000c 08BD     		pop	{r3, pc}
 5079              	.LVL458:
 5080              	.L460:
2428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5081              		.loc 1 2428 0 discriminator 2
 5082 000e 0123     		movs	r3, #1
 5083 0010 80F87030 		strb	r3, [r0, #112]
2430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5084              		.loc 1 2430 0 discriminator 2
 5085 0014 2423     		movs	r3, #36
 5086 0016 4367     		str	r3, [r0, #116]
2433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5087              		.loc 1 2433 0 discriminator 2
 5088 0018 0268     		ldr	r2, [r0]
 5089 001a 1368     		ldr	r3, [r2]
 5090 001c 43F40053 		orr	r3, r3, #8192
 5091 0020 1360     		str	r3, [r2]
2435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5092              		.loc 1 2435 0 discriminator 2
 5093 0022 2023     		movs	r3, #32
 5094 0024 4367     		str	r3, [r0, #116]
2437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5095              		.loc 1 2437 0 discriminator 2
 5096 0026 FFF7FEFF 		bl	UART_CheckIdleState
 5097              	.LVL459:
 5098 002a 08BD     		pop	{r3, pc}
 5099              		.cfi_endproc
 5100              	.LFE172:
 5102              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 5103              		.align	1
 5104              		.global	HAL_MultiProcessor_DisableMuteMode
 5105              		.syntax unified
 5106              		.thumb
 5107              		.thumb_func
 5108              		.fpu fpv5-d16
 5110              	HAL_MultiProcessor_DisableMuteMode:
 5111              	.LFB173:
2447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process Locked */
 5112              		.loc 1 2447 0
 5113              		.cfi_startproc
ARM GAS  /tmp/ccPLDEwZ.s 			page 164


 5114              		@ args = 0, pretend = 0, frame = 0
 5115              		@ frame_needed = 0, uses_anonymous_args = 0
 5116              	.LVL460:
 5117 0000 08B5     		push	{r3, lr}
 5118              	.LCFI56:
 5119              		.cfi_def_cfa_offset 8
 5120              		.cfi_offset 3, -8
 5121              		.cfi_offset 14, -4
2449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5122              		.loc 1 2449 0
 5123 0002 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 5124 0006 012B     		cmp	r3, #1
 5125 0008 01D1     		bne	.L465
 5126 000a 0220     		movs	r0, #2
 5127              	.LVL461:
2459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5128              		.loc 1 2459 0
 5129 000c 08BD     		pop	{r3, pc}
 5130              	.LVL462:
 5131              	.L465:
2449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5132              		.loc 1 2449 0 discriminator 2
 5133 000e 0123     		movs	r3, #1
 5134 0010 80F87030 		strb	r3, [r0, #112]
2451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5135              		.loc 1 2451 0 discriminator 2
 5136 0014 2423     		movs	r3, #36
 5137 0016 4367     		str	r3, [r0, #116]
2454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5138              		.loc 1 2454 0 discriminator 2
 5139 0018 0268     		ldr	r2, [r0]
 5140 001a 1368     		ldr	r3, [r2]
 5141 001c 23F40053 		bic	r3, r3, #8192
 5142 0020 1360     		str	r3, [r2]
2456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5143              		.loc 1 2456 0 discriminator 2
 5144 0022 2023     		movs	r3, #32
 5145 0024 4367     		str	r3, [r0, #116]
2458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5146              		.loc 1 2458 0 discriminator 2
 5147 0026 FFF7FEFF 		bl	UART_CheckIdleState
 5148              	.LVL463:
 5149 002a 08BD     		pop	{r3, pc}
 5150              		.cfi_endproc
 5151              	.LFE173:
 5153              		.text
 5154              	.Letext0:
 5155              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5156              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 5157              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 5158              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 5159              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 5160              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 5161              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 5162              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 5163              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 5164              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccPLDEwZ.s 			page 165


 5165              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
ARM GAS  /tmp/ccPLDEwZ.s 			page 166


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_uart.c
     /tmp/ccPLDEwZ.s:17     .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccPLDEwZ.s:23     .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccPLDEwZ.s:45     .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccPLDEwZ.s:51     .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccPLDEwZ.s:80     .text.UART_TxISR_8BIT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:86     .text.UART_TxISR_8BIT:0000000000000000 UART_TxISR_8BIT
     /tmp/ccPLDEwZ.s:138    .text.UART_TxISR_16BIT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:144    .text.UART_TxISR_16BIT:0000000000000000 UART_TxISR_16BIT
     /tmp/ccPLDEwZ.s:201    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccPLDEwZ.s:208    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccPLDEwZ.s:221    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccPLDEwZ.s:228    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccPLDEwZ.s:241    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccPLDEwZ.s:248    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccPLDEwZ.s:314    .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:321    .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccPLDEwZ.s:414    .text.HAL_UART_Transmit_IT:0000000000000068 $d
     /tmp/ccPLDEwZ.s:420    .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:427    .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccPLDEwZ.s:579    .text.HAL_UART_Receive_IT:00000000000000c8 $d
     /tmp/ccPLDEwZ.s:1648   .text.UART_RxISR_8BIT:0000000000000000 UART_RxISR_8BIT
     /tmp/ccPLDEwZ.s:1735   .text.UART_RxISR_16BIT:0000000000000000 UART_RxISR_16BIT
     /tmp/ccPLDEwZ.s:585    .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccPLDEwZ.s:592    .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccPLDEwZ.s:715    .text.HAL_UART_Transmit_DMA:0000000000000094 $d
     /tmp/ccPLDEwZ.s:1488   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccPLDEwZ.s:1598   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccPLDEwZ.s:1950   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccPLDEwZ.s:722    .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccPLDEwZ.s:729    .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccPLDEwZ.s:856    .text.HAL_UART_Receive_DMA:000000000000009c $d
     /tmp/ccPLDEwZ.s:1823   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccPLDEwZ.s:1900   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccPLDEwZ.s:863    .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccPLDEwZ.s:870    .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccPLDEwZ.s:969    .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccPLDEwZ.s:976    .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccPLDEwZ.s:1047   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1054   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccPLDEwZ.s:1174   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1181   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccPLDEwZ.s:1302   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1309   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccPLDEwZ.s:1375   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1382   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccPLDEwZ.s:1462   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1469   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccPLDEwZ.s:1482   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1535   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1541   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccPLDEwZ.s:1572   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1579   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccPLDEwZ.s:1592   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1622   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1629   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
ARM GAS  /tmp/ccPLDEwZ.s 			page 167


     /tmp/ccPLDEwZ.s:1642   .text.UART_RxISR_8BIT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1729   .text.UART_RxISR_16BIT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1817   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1874   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1881   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccPLDEwZ.s:1894   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1924   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:1931   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccPLDEwZ.s:1944   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2026   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2033   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccPLDEwZ.s:2277   .text.HAL_UART_IRQHandler:000000000000013c $d
     /tmp/ccPLDEwZ.s:2288   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccPLDEwZ.s:2282   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2316   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2323   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccPLDEwZ.s:2336   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2343   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccPLDEwZ.s:2514   .text.HAL_UART_Abort_IT:00000000000000d4 $d
     /tmp/ccPLDEwZ.s:2591   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccPLDEwZ.s:2526   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccPLDEwZ.s:2520   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2585   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2645   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2652   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccPLDEwZ.s:2665   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2672   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccPLDEwZ.s:2755   .text.HAL_UART_AbortTransmit_IT:0000000000000060 $d
     /tmp/ccPLDEwZ.s:2766   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccPLDEwZ.s:2760   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2795   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2802   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccPLDEwZ.s:2815   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2822   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccPLDEwZ.s:2922   .text.HAL_UART_AbortReceive_IT:0000000000000080 $d
     /tmp/ccPLDEwZ.s:2933   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccPLDEwZ.s:2927   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2971   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccPLDEwZ.s:2978   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccPLDEwZ.s:2996   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccPLDEwZ.s:3003   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccPLDEwZ.s:3052   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccPLDEwZ.s:3059   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccPLDEwZ.s:3108   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccPLDEwZ.s:3115   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccPLDEwZ.s:3159   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccPLDEwZ.s:3166   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccPLDEwZ.s:3188   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccPLDEwZ.s:3195   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccPLDEwZ.s:3212   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccPLDEwZ.s:3219   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccPLDEwZ.s:3320   .text.UART_SetConfig:000000000000008c $d
     /tmp/ccPLDEwZ.s:3330   .text.UART_SetConfig:000000000000009e $t
     /tmp/ccPLDEwZ.s:3340   .text.UART_SetConfig:00000000000000b0 $d
     /tmp/ccPLDEwZ.s:3344   .text.UART_SetConfig:00000000000000b4 $t
     /tmp/ccPLDEwZ.s:3374   .text.UART_SetConfig:00000000000000d6 $d
     /tmp/ccPLDEwZ.s:3644   .text.UART_SetConfig:0000000000000232 $d
ARM GAS  /tmp/ccPLDEwZ.s 			page 168


     /tmp/ccPLDEwZ.s:3704   .text.UART_SetConfig:0000000000000288 $d
     /tmp/ccPLDEwZ.s:3717   .text.UART_SetConfig:00000000000002b0 $t
     /tmp/ccPLDEwZ.s:3875   .text.UART_SetConfig:0000000000000374 $d
     /tmp/ccPLDEwZ.s:3881   .text.UART_AdvFeatureConfig:0000000000000000 $t
     /tmp/ccPLDEwZ.s:3888   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/ccPLDEwZ.s:4010   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4017   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccPLDEwZ.s:4093   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4100   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccPLDEwZ.s:4273   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4280   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccPLDEwZ.s:4497   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4504   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/ccPLDEwZ.s:4572   .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4579   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccPLDEwZ.s:4674   .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4681   .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccPLDEwZ.s:4782   .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4789   .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccPLDEwZ.s:4922   .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccPLDEwZ.s:4929   .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccPLDEwZ.s:5052   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/ccPLDEwZ.s:5059   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/ccPLDEwZ.s:5103   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/ccPLDEwZ.s:5110   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
                     .debug_frame:0000000000000010 $d
     /tmp/ccPLDEwZ.s:3387   .text.UART_SetConfig:00000000000000e3 $d
     /tmp/ccPLDEwZ.s:3387   .text.UART_SetConfig:00000000000000e4 $t
     /tmp/ccPLDEwZ.s:3653   .text.UART_SetConfig:000000000000023b $d
     /tmp/ccPLDEwZ.s:3653   .text.UART_SetConfig:000000000000023c $t

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetSysClockFreq
HAL_GetTick
