ARM GAS  /tmp/cc4uOBLP.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"pid_controller.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.PIDCompute,"ax",%progbits
  17              		.align	1
  18              		.global	PIDCompute
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	PIDCompute:
  25              	.LFB10:
  26              		.file 1 "Src/pid_controller.c"
   1:Src/pid_controller.c **** //*********************************************************************************
   2:Src/pid_controller.c **** // Eagle-TRT  27/04/18
   3:Src/pid_controller.c **** //
   4:Src/pid_controller.c **** // PID library for Pumps and fan control of cooling system developed for Chimera Evo
   5:Src/pid_controller.c **** // 
   6:Src/pid_controller.c **** //*********************************************************************************
   7:Src/pid_controller.c **** 
   8:Src/pid_controller.c **** //*********************************************************************************
   9:Src/pid_controller.c **** // Headers
  10:Src/pid_controller.c **** //*********************************************************************************
  11:Src/pid_controller.c **** #include "pid_controller.h"
  12:Src/pid_controller.c **** 
  13:Src/pid_controller.c **** //*********************************************************************************
  14:Src/pid_controller.c **** // Macros and Globals
  15:Src/pid_controller.c **** //*********************************************************************************
  16:Src/pid_controller.c **** #define CONSTRAIN(x,lower,upper)    ((x)<(lower)?(lower):((x)>(upper)?(upper):(x)))
  17:Src/pid_controller.c **** 
  18:Src/pid_controller.c **** //*********************************************************************************
  19:Src/pid_controller.c **** // Functions
  20:Src/pid_controller.c **** //*********************************************************************************
  21:Src/pid_controller.c **** void PIDInit(PIDControl *pid, float kp, float ki, float kd, 
  22:Src/pid_controller.c ****              float sampleTimeSeconds, float minOutput, float maxOutput, 
  23:Src/pid_controller.c ****              PIDMode mode, PIDDirection controllerDirection)     	
  24:Src/pid_controller.c **** {
  25:Src/pid_controller.c ****     pid->controllerDirection = controllerDirection;
  26:Src/pid_controller.c ****     pid->mode = mode;
  27:Src/pid_controller.c ****     pid->iTerm = 0.0f;
  28:Src/pid_controller.c ****     pid->input = 0.0f;
  29:Src/pid_controller.c ****     pid->lastInput = 0.0f;
  30:Src/pid_controller.c ****     pid->output = 0.0f;
  31:Src/pid_controller.c ****     pid->setpoint = 0.0f;
  32:Src/pid_controller.c ****     
ARM GAS  /tmp/cc4uOBLP.s 			page 2


  33:Src/pid_controller.c ****     if(sampleTimeSeconds > 0.0f)
  34:Src/pid_controller.c ****     {
  35:Src/pid_controller.c ****         pid->sampleTime = sampleTimeSeconds;
  36:Src/pid_controller.c ****     }
  37:Src/pid_controller.c ****     else
  38:Src/pid_controller.c ****     {
  39:Src/pid_controller.c ****         // If the passed parameter was incorrect, set to 1 second
  40:Src/pid_controller.c ****         pid->sampleTime = 1.0f;
  41:Src/pid_controller.c ****     }
  42:Src/pid_controller.c ****     
  43:Src/pid_controller.c ****     PIDOutputLimitsSet(pid, minOutput, maxOutput);
  44:Src/pid_controller.c ****     PIDTuningsSet(pid, kp, ki, kd);
  45:Src/pid_controller.c **** }
  46:Src/pid_controller.c ****         
  47:Src/pid_controller.c **** bool
  48:Src/pid_controller.c **** PIDCompute(PIDControl *pid) 
  49:Src/pid_controller.c **** {
  27              		.loc 1 49 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  50:Src/pid_controller.c ****     float error, dInput;
  51:Src/pid_controller.c **** 
  52:Src/pid_controller.c ****     if(pid->mode == MANUAL)
  33              		.loc 1 52 0
  34 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
  35 0004 002B     		cmp	r3, #0
  36 0006 46D0     		beq	.L7
  53:Src/pid_controller.c ****     {
  54:Src/pid_controller.c ****         return false;
  55:Src/pid_controller.c ****     }
  56:Src/pid_controller.c ****     
  57:Src/pid_controller.c ****     // The classic PID error term
  58:Src/pid_controller.c ****     error = (pid->setpoint) - (pid->input);
  37              		.loc 1 58 0
  38 0008 90ED0D7A 		vldr.32	s14, [r0, #52]
  39 000c D0ED005A 		vldr.32	s11, [r0]
  40 0010 37EE657A 		vsub.f32	s14, s14, s11
  41              	.LVL1:
  59:Src/pid_controller.c ****     
  60:Src/pid_controller.c ****     // Compute the integral term separately ahead of time
  61:Src/pid_controller.c ****     pid->iTerm += (pid->alteredKi) * error;
  42              		.loc 1 61 0
  43 0014 D0ED077A 		vldr.32	s15, [r0, #28]
  44 0018 67EE277A 		vmul.f32	s15, s14, s15
  45 001c D0ED096A 		vldr.32	s13, [r0, #36]
  46 0020 77EEA67A 		vadd.f32	s15, s15, s13
  62:Src/pid_controller.c ****     
  63:Src/pid_controller.c ****     // Constrain the integrator to make sure it does not exceed output bounds
  64:Src/pid_controller.c ****     pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
  47              		.loc 1 64 0
  48 0024 90ED0B6A 		vldr.32	s12, [r0, #44]
  49 0028 F4EEC67A 		vcmpe.f32	s15, s12
  50 002c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  51 0030 09D4     		bmi	.L8
ARM GAS  /tmp/cc4uOBLP.s 			page 3


  52              		.loc 1 64 0 is_stmt 0 discriminator 2
  53 0032 D0ED0C6A 		vldr.32	s13, [r0, #48]
  54 0036 F4EEE67A 		vcmpe.f32	s15, s13
  55 003a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  56 003e 04DD     		ble	.L3
  57              		.loc 1 64 0
  58 0040 F0EE667A 		vmov.f32	s15, s13
  59 0044 01E0     		b	.L3
  60              	.L8:
  61 0046 F0EE467A 		vmov.f32	s15, s12
  62              	.L3:
  63              		.loc 1 64 0 discriminator 8
  64 004a C0ED097A 		vstr.32	s15, [r0, #36]
  65:Src/pid_controller.c ****     
  66:Src/pid_controller.c ****     // Take the "derivative on measurement" instead of "derivative on error"
  67:Src/pid_controller.c ****     dInput = (pid->input) - (pid->lastInput);
  65              		.loc 1 67 0 is_stmt 1 discriminator 8
  66 004e D0ED016A 		vldr.32	s13, [r0, #4]
  67 0052 75EEE66A 		vsub.f32	s13, s11, s13
  68              	.LVL2:
  68:Src/pid_controller.c ****     
  69:Src/pid_controller.c ****     // Run all the terms together to get the overall output
  70:Src/pid_controller.c ****     pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
  69              		.loc 1 70 0 discriminator 8
  70 0056 90ED065A 		vldr.32	s10, [r0, #24]
  71 005a 27EE057A 		vmul.f32	s14, s14, s10
  72              	.LVL3:
  73 005e 77EE877A 		vadd.f32	s15, s15, s14
  74 0062 90ED087A 		vldr.32	s14, [r0, #32]
  75 0066 26EE877A 		vmul.f32	s14, s13, s14
  76 006a 77EEC77A 		vsub.f32	s15, s15, s14
  71:Src/pid_controller.c ****     
  72:Src/pid_controller.c ****     // Bound the output
  73:Src/pid_controller.c ****     pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
  77              		.loc 1 73 0 discriminator 8
  78 006e B4EEE76A 		vcmpe.f32	s12, s15
  79 0072 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  80 0076 08DC     		bgt	.L5
  81              		.loc 1 73 0 is_stmt 0 discriminator 2
  82 0078 90ED0C6A 		vldr.32	s12, [r0, #48]
  83 007c F4EEC67A 		vcmpe.f32	s15, s12
  84 0080 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  85 0084 01DC     		bgt	.L5
  86 0086 B0EE676A 		vmov.f32	s12, s15
  87              	.L5:
  88              		.loc 1 73 0 discriminator 8
  89 008a 80ED026A 		vstr.32	s12, [r0, #8]
  74:Src/pid_controller.c ****     
  75:Src/pid_controller.c ****     // Make the current input the former input
  76:Src/pid_controller.c ****     pid->lastInput = pid->input;
  90              		.loc 1 76 0 is_stmt 1 discriminator 8
  91 008e C0ED015A 		vstr.32	s11, [r0, #4]
  77:Src/pid_controller.c ****     
  78:Src/pid_controller.c ****     return true;
  92              		.loc 1 78 0 discriminator 8
  93 0092 0120     		movs	r0, #1
  94              	.LVL4:
ARM GAS  /tmp/cc4uOBLP.s 			page 4


  95 0094 7047     		bx	lr
  96              	.LVL5:
  97              	.L7:
  54:Src/pid_controller.c ****     }
  98              		.loc 1 54 0
  99 0096 0020     		movs	r0, #0
 100              	.LVL6:
  79:Src/pid_controller.c **** }
 101              		.loc 1 79 0
 102 0098 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE10:
 106              		.section	.text.PIDModeSet,"ax",%progbits
 107              		.align	1
 108              		.global	PIDModeSet
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv5-d16
 114              	PIDModeSet:
 115              	.LFB11:
  80:Src/pid_controller.c ****      
  81:Src/pid_controller.c **** void 
  82:Src/pid_controller.c **** PIDModeSet(PIDControl *pid, PIDMode mode)                                                          
  83:Src/pid_controller.c **** {
 116              		.loc 1 83 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL7:
  84:Src/pid_controller.c ****     // If the mode changed from MANUAL to AUTOMATIC
  85:Src/pid_controller.c ****     if(pid->mode != mode && mode == AUTOMATIC)
 122              		.loc 1 85 0
 123 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 124 0004 8B42     		cmp	r3, r1
 125 0006 01D0     		beq	.L12
 126              		.loc 1 85 0 is_stmt 0 discriminator 1
 127 0008 0129     		cmp	r1, #1
 128 000a 02D0     		beq	.L16
 129              	.L12:
  86:Src/pid_controller.c ****     {
  87:Src/pid_controller.c ****         // Initialize a few PID parameters to new values
  88:Src/pid_controller.c ****         pid->iTerm = pid->output;
  89:Src/pid_controller.c ****         pid->lastInput = pid->input;
  90:Src/pid_controller.c ****         
  91:Src/pid_controller.c ****         // Constrain the integrator to make sure it does not exceed output bounds
  92:Src/pid_controller.c ****         pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
  93:Src/pid_controller.c ****     }
  94:Src/pid_controller.c ****     
  95:Src/pid_controller.c ****     pid->mode = mode;
 130              		.loc 1 95 0 is_stmt 1
 131 000c 80F83910 		strb	r1, [r0, #57]
 132 0010 7047     		bx	lr
 133              	.L16:
  88:Src/pid_controller.c ****         pid->lastInput = pid->input;
 134              		.loc 1 88 0
ARM GAS  /tmp/cc4uOBLP.s 			page 5


 135 0012 90ED027A 		vldr.32	s14, [r0, #8]
  89:Src/pid_controller.c ****         
 136              		.loc 1 89 0
 137 0016 0368     		ldr	r3, [r0]	@ float
 138 0018 4360     		str	r3, [r0, #4]	@ float
  92:Src/pid_controller.c ****     }
 139              		.loc 1 92 0
 140 001a D0ED0B7A 		vldr.32	s15, [r0, #44]
 141 001e B4EEE77A 		vcmpe.f32	s14, s15
 142 0022 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 143 0026 08D4     		bmi	.L13
  92:Src/pid_controller.c ****     }
 144              		.loc 1 92 0 is_stmt 0 discriminator 2
 145 0028 D0ED0C7A 		vldr.32	s15, [r0, #48]
 146 002c B4EEE77A 		vcmpe.f32	s14, s15
 147 0030 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 148 0034 01DC     		bgt	.L13
 149 0036 F0EE477A 		vmov.f32	s15, s14
 150              	.L13:
  92:Src/pid_controller.c ****     }
 151              		.loc 1 92 0 discriminator 8
 152 003a C0ED097A 		vstr.32	s15, [r0, #36]
 153 003e E5E7     		b	.L12
 154              		.cfi_endproc
 155              	.LFE11:
 157              		.section	.text.PIDOutputLimitsSet,"ax",%progbits
 158              		.align	1
 159              		.global	PIDOutputLimitsSet
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv5-d16
 165              	PIDOutputLimitsSet:
 166              	.LFB12:
  96:Src/pid_controller.c **** }
  97:Src/pid_controller.c **** 
  98:Src/pid_controller.c **** void 
  99:Src/pid_controller.c **** PIDOutputLimitsSet(PIDControl *pid, float min, float max) 							  							  
 100:Src/pid_controller.c **** {
 167              		.loc 1 100 0 is_stmt 1
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172              	.LVL8:
 101:Src/pid_controller.c ****     // Check if the parameters are valid
 102:Src/pid_controller.c ****     if(min >= max)
 173              		.loc 1 102 0
 174 0000 B4EEE00A 		vcmpe.f32	s0, s1
 175 0004 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 176 0008 07DA     		bge	.L17
 103:Src/pid_controller.c ****     {
 104:Src/pid_controller.c ****         return;
 105:Src/pid_controller.c ****     }
 106:Src/pid_controller.c ****     
 107:Src/pid_controller.c ****     // Save the parameters
 108:Src/pid_controller.c ****     pid->outMin = min;
ARM GAS  /tmp/cc4uOBLP.s 			page 6


 177              		.loc 1 108 0
 178 000a 80ED0B0A 		vstr.32	s0, [r0, #44]
 109:Src/pid_controller.c ****     pid->outMax = max;
 179              		.loc 1 109 0
 180 000e C0ED0C0A 		vstr.32	s1, [r0, #48]
 110:Src/pid_controller.c ****     
 111:Src/pid_controller.c ****     // If in automatic, apply the new constraints
 112:Src/pid_controller.c ****     if(pid->mode == AUTOMATIC)
 181              		.loc 1 112 0
 182 0012 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 183 0016 012B     		cmp	r3, #1
 184 0018 00D0     		beq	.L28
 185              	.LVL9:
 186              	.L17:
 187 001a 7047     		bx	lr
 188              	.LVL10:
 189              	.L28:
 113:Src/pid_controller.c ****     {
 114:Src/pid_controller.c ****         pid->output = CONSTRAIN(pid->output, min, max);
 190              		.loc 1 114 0
 191 001c D0ED027A 		vldr.32	s15, [r0, #8]
 192 0020 B4EEE70A 		vcmpe.f32	s0, s15
 193 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 194 0028 07DC     		bgt	.L23
 195              		.loc 1 114 0 is_stmt 0 discriminator 2
 196 002a F4EEE70A 		vcmpe.f32	s1, s15
 197 002e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 198 0032 04D5     		bpl	.L19
 199              		.loc 1 114 0
 200 0034 F0EE607A 		vmov.f32	s15, s1
 201 0038 01E0     		b	.L19
 202              	.L23:
 203 003a F0EE407A 		vmov.f32	s15, s0
 204              	.L19:
 205              		.loc 1 114 0 discriminator 8
 206 003e C0ED027A 		vstr.32	s15, [r0, #8]
 115:Src/pid_controller.c ****         pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 207              		.loc 1 115 0 is_stmt 1 discriminator 8
 208 0042 D0ED097A 		vldr.32	s15, [r0, #36]
 209 0046 B4EEE70A 		vcmpe.f32	s0, s15
 210 004a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 211 004e 06DC     		bgt	.L21
 212              		.loc 1 115 0 is_stmt 0 discriminator 2
 213 0050 F4EEE70A 		vcmpe.f32	s1, s15
 214 0054 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 215 0058 04D5     		bpl	.L27
 216              		.loc 1 115 0
 217 005a B0EE600A 		vmov.f32	s0, s1
 218              	.LVL11:
 219              	.L21:
 220              		.loc 1 115 0 discriminator 8
 221 005e 80ED090A 		vstr.32	s0, [r0, #36]
 222 0062 DAE7     		b	.L17
 223              	.LVL12:
 224              	.L27:
 225              		.loc 1 115 0
 226 0064 B0EE670A 		vmov.f32	s0, s15
ARM GAS  /tmp/cc4uOBLP.s 			page 7


 227              	.LVL13:
 228 0068 F9E7     		b	.L21
 229              		.cfi_endproc
 230              	.LFE12:
 232              		.section	.text.PIDTuningsSet,"ax",%progbits
 233              		.align	1
 234              		.global	PIDTuningsSet
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv5-d16
 240              	PIDTuningsSet:
 241              	.LFB13:
 116:Src/pid_controller.c ****     }
 117:Src/pid_controller.c **** }
 118:Src/pid_controller.c **** 
 119:Src/pid_controller.c **** void 
 120:Src/pid_controller.c **** PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd)         	                             
 121:Src/pid_controller.c **** {
 242              		.loc 1 121 0 is_stmt 1
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 247              	.LVL14:
 122:Src/pid_controller.c ****     // Check if the parameters are valid
 123:Src/pid_controller.c ****     if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 248              		.loc 1 123 0
 249 0000 B5EEC00A 		vcmpe.f32	s0, #0
 250 0004 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 251 0008 1FD4     		bmi	.L29
 252              		.loc 1 123 0 is_stmt 0 discriminator 1
 253 000a F5EEC00A 		vcmpe.f32	s1, #0
 254 000e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 255 0012 1AD4     		bmi	.L29
 256              		.loc 1 123 0 discriminator 2
 257 0014 B5EEC01A 		vcmpe.f32	s2, #0
 258 0018 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 259 001c 15D4     		bmi	.L29
 124:Src/pid_controller.c ****     {
 125:Src/pid_controller.c ****         return;
 126:Src/pid_controller.c ****     }
 127:Src/pid_controller.c ****     
 128:Src/pid_controller.c ****     // Save the parameters for displaying purposes
 129:Src/pid_controller.c ****     pid->dispKp = kp;
 260              		.loc 1 129 0 is_stmt 1
 261 001e 80ED030A 		vstr.32	s0, [r0, #12]
 130:Src/pid_controller.c ****     pid->dispKi = ki;
 262              		.loc 1 130 0
 263 0022 C0ED040A 		vstr.32	s1, [r0, #16]
 131:Src/pid_controller.c ****     pid->dispKd = kd;
 264              		.loc 1 131 0
 265 0026 80ED051A 		vstr.32	s2, [r0, #20]
 132:Src/pid_controller.c ****     
 133:Src/pid_controller.c ****     // Alter the parameters for PID
 134:Src/pid_controller.c ****     pid->alteredKp = kp;
 266              		.loc 1 134 0
ARM GAS  /tmp/cc4uOBLP.s 			page 8


 267 002a 80ED060A 		vstr.32	s0, [r0, #24]
 135:Src/pid_controller.c ****     pid->alteredKi = ki * pid->sampleTime;
 268              		.loc 1 135 0
 269 002e 90ED0A7A 		vldr.32	s14, [r0, #40]
 270 0032 60EE870A 		vmul.f32	s1, s1, s14
 271              	.LVL15:
 272 0036 C0ED070A 		vstr.32	s1, [r0, #28]
 136:Src/pid_controller.c ****     pid->alteredKd = kd / pid->sampleTime;
 273              		.loc 1 136 0
 274 003a C1EE077A 		vdiv.f32	s15, s2, s14
 275 003e C0ED087A 		vstr.32	s15, [r0, #32]
 137:Src/pid_controller.c ****     
 138:Src/pid_controller.c ****     // Apply reverse direction to the altered values if necessary
 139:Src/pid_controller.c ****     if(pid->controllerDirection == REVERSE)
 276              		.loc 1 139 0
 277 0042 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 278 0046 012B     		cmp	r3, #1
 279 0048 00D0     		beq	.L31
 280              	.LVL16:
 281              	.L29:
 282 004a 7047     		bx	lr
 283              	.LVL17:
 284              	.L31:
 140:Src/pid_controller.c ****     {
 141:Src/pid_controller.c ****         pid->alteredKp = -(pid->alteredKp);
 285              		.loc 1 141 0
 286 004c B1EE400A 		vneg.f32	s0, s0
 287              	.LVL18:
 288 0050 80ED060A 		vstr.32	s0, [r0, #24]
 142:Src/pid_controller.c ****         pid->alteredKi = -(pid->alteredKi);
 289              		.loc 1 142 0
 290 0054 F1EE600A 		vneg.f32	s1, s1
 291 0058 C0ED070A 		vstr.32	s1, [r0, #28]
 143:Src/pid_controller.c ****         pid->alteredKd = -(pid->alteredKd);
 292              		.loc 1 143 0
 293 005c F1EE677A 		vneg.f32	s15, s15
 294 0060 C0ED087A 		vstr.32	s15, [r0, #32]
 295 0064 F1E7     		b	.L29
 296              		.cfi_endproc
 297              	.LFE13:
 299              		.section	.text.PIDInit,"ax",%progbits
 300              		.align	1
 301              		.global	PIDInit
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv5-d16
 307              	PIDInit:
 308              	.LFB9:
  24:Src/pid_controller.c ****     pid->controllerDirection = controllerDirection;
 309              		.loc 1 24 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              	.LVL19:
 314 0000 10B5     		push	{r4, lr}
 315              	.LCFI0:
ARM GAS  /tmp/cc4uOBLP.s 			page 9


 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 4, -8
 318              		.cfi_offset 14, -4
 319 0002 2DED048B 		vpush.64	{d8, d9}
 320              	.LCFI1:
 321              		.cfi_def_cfa_offset 24
 322              		.cfi_offset 80, -24
 323              		.cfi_offset 81, -20
 324              		.cfi_offset 82, -16
 325              		.cfi_offset 83, -12
 326 0006 0446     		mov	r4, r0
 327 0008 B0EE408A 		vmov.f32	s16, s0
 328 000c F0EE608A 		vmov.f32	s17, s1
 329 0010 B0EE419A 		vmov.f32	s18, s2
  25:Src/pid_controller.c ****     pid->mode = mode;
 330              		.loc 1 25 0
 331 0014 80F83820 		strb	r2, [r0, #56]
  26:Src/pid_controller.c ****     pid->iTerm = 0.0f;
 332              		.loc 1 26 0
 333 0018 80F83910 		strb	r1, [r0, #57]
  27:Src/pid_controller.c ****     pid->input = 0.0f;
 334              		.loc 1 27 0
 335 001c 0023     		movs	r3, #0
 336 001e 4362     		str	r3, [r0, #36]	@ float
  28:Src/pid_controller.c ****     pid->lastInput = 0.0f;
 337              		.loc 1 28 0
 338 0020 0360     		str	r3, [r0]	@ float
  29:Src/pid_controller.c ****     pid->output = 0.0f;
 339              		.loc 1 29 0
 340 0022 4360     		str	r3, [r0, #4]	@ float
  30:Src/pid_controller.c ****     pid->setpoint = 0.0f;
 341              		.loc 1 30 0
 342 0024 8360     		str	r3, [r0, #8]	@ float
  31:Src/pid_controller.c ****     
 343              		.loc 1 31 0
 344 0026 4363     		str	r3, [r0, #52]	@ float
  33:Src/pid_controller.c ****     {
 345              		.loc 1 33 0
 346 0028 F5EEC01A 		vcmpe.f32	s3, #0
 347 002c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 348 0030 14DD     		ble	.L37
  35:Src/pid_controller.c ****     }
 349              		.loc 1 35 0
 350 0032 C0ED0A1A 		vstr.32	s3, [r0, #40]
 351              	.L35:
  43:Src/pid_controller.c ****     PIDTuningsSet(pid, kp, ki, kd);
 352              		.loc 1 43 0
 353 0036 F0EE620A 		vmov.f32	s1, s5
 354              	.LVL20:
 355 003a B0EE420A 		vmov.f32	s0, s4
 356              	.LVL21:
 357 003e 2046     		mov	r0, r4
 358              	.LVL22:
 359 0040 FFF7FEFF 		bl	PIDOutputLimitsSet
 360              	.LVL23:
  44:Src/pid_controller.c **** }
 361              		.loc 1 44 0
ARM GAS  /tmp/cc4uOBLP.s 			page 10


 362 0044 B0EE491A 		vmov.f32	s2, s18
 363 0048 F0EE680A 		vmov.f32	s1, s17
 364 004c B0EE480A 		vmov.f32	s0, s16
 365 0050 2046     		mov	r0, r4
 366 0052 FFF7FEFF 		bl	PIDTuningsSet
 367              	.LVL24:
  45:Src/pid_controller.c ****         
 368              		.loc 1 45 0
 369 0056 BDEC048B 		vldm	sp!, {d8-d9}
 370              	.LCFI2:
 371              		.cfi_remember_state
 372              		.cfi_restore 82
 373              		.cfi_restore 83
 374              		.cfi_restore 80
 375              		.cfi_restore 81
 376              		.cfi_def_cfa_offset 8
 377              	.LVL25:
 378 005a 10BD     		pop	{r4, pc}
 379              	.LVL26:
 380              	.L37:
 381              	.LCFI3:
 382              		.cfi_restore_state
  40:Src/pid_controller.c ****     }
 383              		.loc 1 40 0
 384 005c 4FF07E53 		mov	r3, #1065353216
 385 0060 8362     		str	r3, [r0, #40]	@ float
 386 0062 E8E7     		b	.L35
 387              		.cfi_endproc
 388              	.LFE9:
 390              		.section	.text.PIDTuningKpSet,"ax",%progbits
 391              		.align	1
 392              		.global	PIDTuningKpSet
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu fpv5-d16
 398              	PIDTuningKpSet:
 399              	.LFB14:
 144:Src/pid_controller.c ****     }
 145:Src/pid_controller.c **** }
 146:Src/pid_controller.c **** 
 147:Src/pid_controller.c **** void 
 148:Src/pid_controller.c **** PIDTuningKpSet(PIDControl *pid, float kp)
 149:Src/pid_controller.c **** {
 400              		.loc 1 149 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              	.LVL27:
 405 0000 08B5     		push	{r3, lr}
 406              	.LCFI4:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 3, -8
 409              		.cfi_offset 14, -4
 150:Src/pid_controller.c ****     PIDTuningsSet(pid, kp, pid->dispKi, pid->dispKd);
 410              		.loc 1 150 0
 411 0002 90ED051A 		vldr.32	s2, [r0, #20]
ARM GAS  /tmp/cc4uOBLP.s 			page 11


 412 0006 D0ED040A 		vldr.32	s1, [r0, #16]
 413 000a FFF7FEFF 		bl	PIDTuningsSet
 414              	.LVL28:
 415 000e 08BD     		pop	{r3, pc}
 416              		.cfi_endproc
 417              	.LFE14:
 419              		.section	.text.PIDTuningKiSet,"ax",%progbits
 420              		.align	1
 421              		.global	PIDTuningKiSet
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu fpv5-d16
 427              	PIDTuningKiSet:
 428              	.LFB15:
 151:Src/pid_controller.c **** }
 152:Src/pid_controller.c **** 
 153:Src/pid_controller.c **** void 
 154:Src/pid_controller.c **** PIDTuningKiSet(PIDControl *pid, float ki)
 155:Src/pid_controller.c **** {
 429              		.loc 1 155 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              	.LVL29:
 434 0000 08B5     		push	{r3, lr}
 435              	.LCFI5:
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 3, -8
 438              		.cfi_offset 14, -4
 156:Src/pid_controller.c ****     PIDTuningsSet(pid, pid->dispKp, ki, pid->dispKd);
 439              		.loc 1 156 0
 440 0002 90ED051A 		vldr.32	s2, [r0, #20]
 441 0006 F0EE400A 		vmov.f32	s1, s0
 442 000a 90ED030A 		vldr.32	s0, [r0, #12]
 443              	.LVL30:
 444 000e FFF7FEFF 		bl	PIDTuningsSet
 445              	.LVL31:
 446 0012 08BD     		pop	{r3, pc}
 447              		.cfi_endproc
 448              	.LFE15:
 450              		.section	.text.PIDTuningKdSet,"ax",%progbits
 451              		.align	1
 452              		.global	PIDTuningKdSet
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu fpv5-d16
 458              	PIDTuningKdSet:
 459              	.LFB16:
 157:Src/pid_controller.c **** }
 158:Src/pid_controller.c **** 
 159:Src/pid_controller.c **** void 
 160:Src/pid_controller.c **** PIDTuningKdSet(PIDControl *pid, float kd)
 161:Src/pid_controller.c **** {
 460              		.loc 1 161 0
 461              		.cfi_startproc
ARM GAS  /tmp/cc4uOBLP.s 			page 12


 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              	.LVL32:
 465 0000 08B5     		push	{r3, lr}
 466              	.LCFI6:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 3, -8
 469              		.cfi_offset 14, -4
 162:Src/pid_controller.c ****     PIDTuningsSet(pid, pid->dispKp, pid->dispKi, kd);
 470              		.loc 1 162 0
 471 0002 B0EE401A 		vmov.f32	s2, s0
 472 0006 D0ED040A 		vldr.32	s1, [r0, #16]
 473 000a 90ED030A 		vldr.32	s0, [r0, #12]
 474              	.LVL33:
 475 000e FFF7FEFF 		bl	PIDTuningsSet
 476              	.LVL34:
 477 0012 08BD     		pop	{r3, pc}
 478              		.cfi_endproc
 479              	.LFE16:
 481              		.section	.text.PIDControllerDirectionSet,"ax",%progbits
 482              		.align	1
 483              		.global	PIDControllerDirectionSet
 484              		.syntax unified
 485              		.thumb
 486              		.thumb_func
 487              		.fpu fpv5-d16
 489              	PIDControllerDirectionSet:
 490              	.LFB17:
 163:Src/pid_controller.c **** }
 164:Src/pid_controller.c **** 
 165:Src/pid_controller.c **** void 
 166:Src/pid_controller.c **** PIDControllerDirectionSet(PIDControl *pid, PIDDirection controllerDirection)	  									  									
 167:Src/pid_controller.c **** {
 491              		.loc 1 167 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496              	.LVL35:
 168:Src/pid_controller.c ****     // If in automatic mode and the controller's sense of direction is reversed
 169:Src/pid_controller.c ****     if(pid->mode == AUTOMATIC && controllerDirection == REVERSE)
 497              		.loc 1 169 0
 498 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 499 0004 012B     		cmp	r3, #1
 500 0006 02D0     		beq	.L47
 501              	.L46:
 170:Src/pid_controller.c ****     {
 171:Src/pid_controller.c ****         // Reverse sense of direction of PID gain constants
 172:Src/pid_controller.c ****         pid->alteredKp = -(pid->alteredKp);
 173:Src/pid_controller.c ****         pid->alteredKi = -(pid->alteredKi);
 174:Src/pid_controller.c ****         pid->alteredKd = -(pid->alteredKd);
 175:Src/pid_controller.c ****     }
 176:Src/pid_controller.c ****     
 177:Src/pid_controller.c ****     pid->controllerDirection = controllerDirection;
 502              		.loc 1 177 0
 503 0008 80F83810 		strb	r1, [r0, #56]
 504 000c 7047     		bx	lr
ARM GAS  /tmp/cc4uOBLP.s 			page 13


 505              	.L47:
 169:Src/pid_controller.c ****     {
 506              		.loc 1 169 0 discriminator 1
 507 000e 0129     		cmp	r1, #1
 508 0010 FAD1     		bne	.L46
 172:Src/pid_controller.c ****         pid->alteredKi = -(pid->alteredKi);
 509              		.loc 1 172 0
 510 0012 D0ED067A 		vldr.32	s15, [r0, #24]
 511 0016 F1EE677A 		vneg.f32	s15, s15
 512 001a C0ED067A 		vstr.32	s15, [r0, #24]
 173:Src/pid_controller.c ****         pid->alteredKd = -(pid->alteredKd);
 513              		.loc 1 173 0
 514 001e D0ED077A 		vldr.32	s15, [r0, #28]
 515 0022 F1EE677A 		vneg.f32	s15, s15
 516 0026 C0ED077A 		vstr.32	s15, [r0, #28]
 174:Src/pid_controller.c ****     }
 517              		.loc 1 174 0
 518 002a D0ED087A 		vldr.32	s15, [r0, #32]
 519 002e F1EE677A 		vneg.f32	s15, s15
 520 0032 C0ED087A 		vstr.32	s15, [r0, #32]
 521 0036 E7E7     		b	.L46
 522              		.cfi_endproc
 523              	.LFE17:
 525              		.section	.text.PIDSampleTimeSet,"ax",%progbits
 526              		.align	1
 527              		.global	PIDSampleTimeSet
 528              		.syntax unified
 529              		.thumb
 530              		.thumb_func
 531              		.fpu fpv5-d16
 533              	PIDSampleTimeSet:
 534              	.LFB18:
 178:Src/pid_controller.c **** }
 179:Src/pid_controller.c **** 
 180:Src/pid_controller.c **** void 
 181:Src/pid_controller.c **** PIDSampleTimeSet(PIDControl *pid, float sampleTimeSeconds)                                         
 182:Src/pid_controller.c **** {
 535              		.loc 1 182 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540              	.LVL36:
 183:Src/pid_controller.c ****     float ratio;
 184:Src/pid_controller.c **** 
 185:Src/pid_controller.c ****     if(sampleTimeSeconds > 0.0f)
 541              		.loc 1 185 0
 542 0000 B5EEC00A 		vcmpe.f32	s0, #0
 543 0004 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 544 0008 11DD     		ble	.L48
 186:Src/pid_controller.c ****     {
 187:Src/pid_controller.c ****         // Find the ratio of change and apply to the altered values
 188:Src/pid_controller.c ****         ratio = sampleTimeSeconds / pid->sampleTime;
 545              		.loc 1 188 0
 546 000a D0ED0A7A 		vldr.32	s15, [r0, #40]
 547 000e 80EE277A 		vdiv.f32	s14, s0, s15
 548              	.LVL37:
ARM GAS  /tmp/cc4uOBLP.s 			page 14


 189:Src/pid_controller.c ****         pid->alteredKi *= ratio;
 549              		.loc 1 189 0
 550 0012 D0ED077A 		vldr.32	s15, [r0, #28]
 551 0016 67EE877A 		vmul.f32	s15, s15, s14
 552 001a C0ED077A 		vstr.32	s15, [r0, #28]
 190:Src/pid_controller.c ****         pid->alteredKd /= ratio;
 553              		.loc 1 190 0
 554 001e D0ED086A 		vldr.32	s13, [r0, #32]
 555 0022 C6EE877A 		vdiv.f32	s15, s13, s14
 556 0026 C0ED087A 		vstr.32	s15, [r0, #32]
 191:Src/pid_controller.c ****         
 192:Src/pid_controller.c ****         // Save the new sampling time
 193:Src/pid_controller.c ****         pid->sampleTime = sampleTimeSeconds;
 557              		.loc 1 193 0
 558 002a 80ED0A0A 		vstr.32	s0, [r0, #40]
 559              	.LVL38:
 560              	.L48:
 561 002e 7047     		bx	lr
 562              		.cfi_endproc
 563              	.LFE18:
 565              		.text
 566              	.Letext0:
 567              		.file 2 "Inc/pid_controller.h"
ARM GAS  /tmp/cc4uOBLP.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 pid_controller.c
     /tmp/cc4uOBLP.s:17     .text.PIDCompute:0000000000000000 $t
     /tmp/cc4uOBLP.s:24     .text.PIDCompute:0000000000000000 PIDCompute
     /tmp/cc4uOBLP.s:107    .text.PIDModeSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:114    .text.PIDModeSet:0000000000000000 PIDModeSet
     /tmp/cc4uOBLP.s:158    .text.PIDOutputLimitsSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:165    .text.PIDOutputLimitsSet:0000000000000000 PIDOutputLimitsSet
     /tmp/cc4uOBLP.s:233    .text.PIDTuningsSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:240    .text.PIDTuningsSet:0000000000000000 PIDTuningsSet
     /tmp/cc4uOBLP.s:300    .text.PIDInit:0000000000000000 $t
     /tmp/cc4uOBLP.s:307    .text.PIDInit:0000000000000000 PIDInit
     /tmp/cc4uOBLP.s:391    .text.PIDTuningKpSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:398    .text.PIDTuningKpSet:0000000000000000 PIDTuningKpSet
     /tmp/cc4uOBLP.s:420    .text.PIDTuningKiSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:427    .text.PIDTuningKiSet:0000000000000000 PIDTuningKiSet
     /tmp/cc4uOBLP.s:451    .text.PIDTuningKdSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:458    .text.PIDTuningKdSet:0000000000000000 PIDTuningKdSet
     /tmp/cc4uOBLP.s:482    .text.PIDControllerDirectionSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:489    .text.PIDControllerDirectionSet:0000000000000000 PIDControllerDirectionSet
     /tmp/cc4uOBLP.s:526    .text.PIDSampleTimeSet:0000000000000000 $t
     /tmp/cc4uOBLP.s:533    .text.PIDSampleTimeSet:0000000000000000 PIDSampleTimeSet
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
