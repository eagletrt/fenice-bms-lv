ARM GAS  /tmp/ccaWiAmD.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_GPIO_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	MX_GPIO_Init:
  24              	.LFB161:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** #include "pid_controller.h"
  28:Src/main.c    **** #include "ltc.h"
  29:Src/main.c    **** 
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccaWiAmD.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* ---------------- ID ------------------- */
  36:Src/main.c    **** #define BMS_LV_ASK_ID 0xFF     // Foo Fighters
  37:Src/main.c    **** #define STEER_ASK_ID 0xAF      // Steering wheel
  38:Src/main.c    **** #define INV_LEFT_ASK_ID 0x181  // Inverter left
  39:Src/main.c    **** #define INV_RIGHT_ASK_ID 0x182 // Inverter right
  40:Src/main.c    **** #define ACC_TEMP_ASK_ID 0xAA   // Accumulator temperatures
  41:Src/main.c    **** #define ECU_ASK_ID 0xF8        // ECU initial check ID
  42:Src/main.c    **** 
  43:Src/main.c    **** /* ---------------- PIN ------------------- */
  44:Src/main.c    **** #define RELAY_PIN GPIOC
  45:Src/main.c    **** #define RELAY_PIN_N GPIO_PIN_6
  46:Src/main.c    **** 
  47:Src/main.c    **** //PC7   -> LED Error
  48:Src/main.c    **** //PC6   -> Relay
  49:Src/main.c    **** 
  50:Src/main.c    **** //Pump
  51:Src/main.c    **** //PD13  -> PWM  -> Pump1
  52:Src/main.c    **** //PD12  -> PWM  -> Pump2
  53:Src/main.c    **** 
  54:Src/main.c    **** //Radiator
  55:Src/main.c    **** //PC0   -> ADC  -> Radiator1
  56:Src/main.c    **** //PC1   -> ADC  -> Radiator2
  57:Src/main.c    **** 
  58:Src/main.c    **** //SPI2
  59:Src/main.c    **** //PB14  -> Miso -> LTC6810-2
  60:Src/main.c    **** //PB15  -> Mosi -> LTC6810-2
  61:Src/main.c    **** //PD3   -> SCK  -> LTC6810-2
  62:Src/main.c    **** //PD4   -> CS   -> LTC6810-2
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PTD */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  67:Src/main.c    **** /* USER CODE BEGIN PD */
  68:Src/main.c    **** /* USER CODE END PD */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN PM */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PM */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  76:Src/main.c    **** ADC_HandleTypeDef hadc1;
  77:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  78:Src/main.c    **** 
  79:Src/main.c    **** CAN_HandleTypeDef hcan1;
  80:Src/main.c    **** 
  81:Src/main.c    **** SPI_HandleTypeDef hspi2;
  82:Src/main.c    **** 
  83:Src/main.c    **** TIM_HandleTypeDef htim2;
  84:Src/main.c    **** TIM_HandleTypeDef htim3;
  85:Src/main.c    **** TIM_HandleTypeDef htim4;
  86:Src/main.c    **** 
  87:Src/main.c    **** UART_HandleTypeDef huart3;
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE BEGIN PV */
  90:Src/main.c    **** 
ARM GAS  /tmp/ccaWiAmD.s 			page 3


  91:Src/main.c    **** /* USER CODE END PV */
  92:Src/main.c    **** 
  93:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  94:Src/main.c    **** void SystemClock_Config(void);
  95:Src/main.c    **** static void MX_GPIO_Init(void);
  96:Src/main.c    **** static void MX_CAN1_Init(void);
  97:Src/main.c    **** static void MX_USART3_UART_Init(void);
  98:Src/main.c    **** static void MX_ADC1_Init(void);
  99:Src/main.c    **** static void MX_SPI2_Init(void);
 100:Src/main.c    **** static void MX_DMA_Init(void);
 101:Src/main.c    **** static void MX_TIM4_Init(void);
 102:Src/main.c    **** static void MX_TIM2_Init(void);
 103:Src/main.c    **** static void MX_TIM3_Init(void);
 104:Src/main.c    **** static void MX_NVIC_Init(void);
 105:Src/main.c    **** /* USER CODE BEGIN PFP */
 106:Src/main.c    **** 
 107:Src/main.c    **** /* USER CODE END PFP */
 108:Src/main.c    **** 
 109:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 110:Src/main.c    **** /* USER CODE BEGIN 0 */
 111:Src/main.c    **** 
 112:Src/main.c    **** canStruct can;
 113:Src/main.c    **** uint8_t CAN_initialization(canStruct *can);
 114:Src/main.c    **** 
 115:Src/main.c    **** /* USER CODE END 0 */
 116:Src/main.c    **** 
 117:Src/main.c    **** /**
 118:Src/main.c    ****   * @brief  The application entry point.
 119:Src/main.c    ****   * @retval int
 120:Src/main.c    ****   */
 121:Src/main.c    **** int main(void)
 122:Src/main.c    **** {
 123:Src/main.c    ****   /* USER CODE BEGIN 1 */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE END 1 */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 130:Src/main.c    ****   HAL_Init();
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE BEGIN Init */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE END Init */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Configure the system clock */
 137:Src/main.c    ****   SystemClock_Config();
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* USER CODE END SysInit */
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* Initialize all configured peripherals */
 144:Src/main.c    ****   MX_GPIO_Init();
 145:Src/main.c    ****   MX_CAN1_Init();
 146:Src/main.c    ****   MX_USART3_UART_Init();
 147:Src/main.c    ****   MX_ADC1_Init();
ARM GAS  /tmp/ccaWiAmD.s 			page 4


 148:Src/main.c    ****   MX_SPI2_Init();
 149:Src/main.c    ****   MX_DMA_Init();
 150:Src/main.c    ****   MX_TIM4_Init();
 151:Src/main.c    ****   MX_TIM2_Init();
 152:Src/main.c    ****   MX_TIM3_Init();
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Initialize interrupts */
 155:Src/main.c    ****   MX_NVIC_Init();
 156:Src/main.c    ****   /* USER CODE BEGIN 2 */
 157:Src/main.c    **** 
 158:Src/main.c    ****   //FAN PWM
 159:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 160:Src/main.c    ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 161:Src/main.c    **** 
 162:Src/main.c    ****   //PUMP PWM
 163:Src/main.c    ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 164:Src/main.c    ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 165:Src/main.c    ****   /* USER CODE END 2 */
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* Infinite loop */
 168:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 169:Src/main.c    **** 
 170:Src/main.c    ****   //ERROR_LED
 171:Src/main.c    ****   for (int i = 0; i < 9; i++)
 172:Src/main.c    ****   {
 173:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 174:Src/main.c    ****     HAL_Delay(100);
 175:Src/main.c    ****   }
 176:Src/main.c    **** 
 177:Src/main.c    ****   //BUZZER
 178:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 179:Src/main.c    ****   HAL_Delay(1000);
 180:Src/main.c    **** 
 181:Src/main.c    ****   can.hcan = &hcan1;
 182:Src/main.c    **** 
 183:Src/main.c    ****   CAN_initialization(&can);
 184:Src/main.c    **** 
 185:Src/main.c    ****   set_pins(GPIOD, GPIO_PIN_4);
 186:Src/main.c    **** 
 187:Src/main.c    ****   // user_pwm_setvalue(100, &htim4, TIM_CHANNEL_1);
 188:Src/main.c    ****   // user_pwm_setvalue(100, &htim4, TIM_CHANNEL_2);
 189:Src/main.c    ****   // user_pwm_setvalue(100, &htim2, TIM_CHANNEL_1);
 190:Src/main.c    **** 
 191:Src/main.c    ****   while (1)
 192:Src/main.c    ****   {
 193:Src/main.c    ****     /* USER CODE END WHILE */
 194:Src/main.c    **** 
 195:Src/main.c    ****     /* USER CODE BEGIN 3 */
 196:Src/main.c    ****     //loading();
 197:Src/main.c    **** 
 198:Src/main.c    ****     if (can.recieved_flag == 1)
 199:Src/main.c    ****     {
 200:Src/main.c    ****       CAN_Read_Message(&can);
 201:Src/main.c    ****       can.recieved_flag = 0;
 202:Src/main.c    ****     }
 203:Src/main.c    ****   }
 204:Src/main.c    ****   /* USER CODE END 3 */
ARM GAS  /tmp/ccaWiAmD.s 			page 5


 205:Src/main.c    **** }
 206:Src/main.c    **** 
 207:Src/main.c    **** /**
 208:Src/main.c    ****   * @brief System Clock Configuration
 209:Src/main.c    ****   * @retval None
 210:Src/main.c    ****   */
 211:Src/main.c    **** void SystemClock_Config(void)
 212:Src/main.c    **** {
 213:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 214:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 215:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 216:Src/main.c    **** 
 217:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 218:Src/main.c    ****   */
 219:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 220:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 221:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 222:Src/main.c    ****   */
 223:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 224:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 225:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 226:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 227:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 228:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 229:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 230:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 231:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 232:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 233:Src/main.c    ****   {
 234:Src/main.c    ****     Error_Handler();
 235:Src/main.c    ****   }
 236:Src/main.c    ****   /** Activate the Over-Drive mode 
 237:Src/main.c    ****   */
 238:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 239:Src/main.c    ****   {
 240:Src/main.c    ****     Error_Handler();
 241:Src/main.c    ****   }
 242:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 243:Src/main.c    ****   */
 244:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 245:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 246:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 247:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 248:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 249:Src/main.c    **** 
 250:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 251:Src/main.c    ****   {
 252:Src/main.c    ****     Error_Handler();
 253:Src/main.c    ****   }
 254:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 255:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 256:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 257:Src/main.c    ****   {
 258:Src/main.c    ****     Error_Handler();
 259:Src/main.c    ****   }
 260:Src/main.c    **** }
 261:Src/main.c    **** 
ARM GAS  /tmp/ccaWiAmD.s 			page 6


 262:Src/main.c    **** /**
 263:Src/main.c    ****   * @brief NVIC Configuration.
 264:Src/main.c    ****   * @retval None
 265:Src/main.c    ****   */
 266:Src/main.c    **** static void MX_NVIC_Init(void)
 267:Src/main.c    **** {
 268:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 269:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 270:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 271:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 272:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 273:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 274:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 275:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 276:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 277:Src/main.c    **** }
 278:Src/main.c    **** 
 279:Src/main.c    **** /**
 280:Src/main.c    ****   * @brief ADC1 Initialization Function
 281:Src/main.c    ****   * @param None
 282:Src/main.c    ****   * @retval None
 283:Src/main.c    ****   */
 284:Src/main.c    **** static void MX_ADC1_Init(void)
 285:Src/main.c    **** {
 286:Src/main.c    **** 
 287:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 288:Src/main.c    **** 
 289:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 290:Src/main.c    **** 
 291:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 296:Src/main.c    ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 297:Src/main.c    ****   */
 298:Src/main.c    ****   hadc1.Instance = ADC1;
 299:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 300:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 301:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 302:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 303:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 304:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 305:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 306:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 307:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 308:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 309:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 310:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 311:Src/main.c    ****   {
 312:Src/main.c    ****     Error_Handler();
 313:Src/main.c    ****   }
 314:Src/main.c    ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 315:Src/main.c    ****   */
 316:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_10;
 317:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 318:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
ARM GAS  /tmp/ccaWiAmD.s 			page 7


 319:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 320:Src/main.c    ****   {
 321:Src/main.c    ****     Error_Handler();
 322:Src/main.c    ****   }
 323:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 324:Src/main.c    **** 
 325:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 326:Src/main.c    **** }
 327:Src/main.c    **** 
 328:Src/main.c    **** /**
 329:Src/main.c    ****   * @brief CAN1 Initialization Function
 330:Src/main.c    ****   * @param None
 331:Src/main.c    ****   * @retval None
 332:Src/main.c    ****   */
 333:Src/main.c    **** static void MX_CAN1_Init(void)
 334:Src/main.c    **** {
 335:Src/main.c    **** 
 336:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 341:Src/main.c    **** 
 342:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 343:Src/main.c    ****   hcan1.Instance = CAN1;
 344:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 345:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 346:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 347:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 348:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 349:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 350:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 351:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 352:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 353:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 354:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 355:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 356:Src/main.c    ****   {
 357:Src/main.c    ****     Error_Handler();
 358:Src/main.c    ****   }
 359:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 362:Src/main.c    **** }
 363:Src/main.c    **** 
 364:Src/main.c    **** /**
 365:Src/main.c    ****   * @brief SPI2 Initialization Function
 366:Src/main.c    ****   * @param None
 367:Src/main.c    ****   * @retval None
 368:Src/main.c    ****   */
 369:Src/main.c    **** static void MX_SPI2_Init(void)
 370:Src/main.c    **** {
 371:Src/main.c    **** 
 372:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 0 */
 373:Src/main.c    **** 
 374:Src/main.c    ****   /* USER CODE END SPI2_Init 0 */
 375:Src/main.c    **** 
ARM GAS  /tmp/ccaWiAmD.s 			page 8


 376:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 1 */
 377:Src/main.c    **** 
 378:Src/main.c    ****   /* USER CODE END SPI2_Init 1 */
 379:Src/main.c    ****   /* SPI2 parameter configuration*/
 380:Src/main.c    ****   hspi2.Instance = SPI2;
 381:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 382:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 383:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 384:Src/main.c    ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 385:Src/main.c    ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 386:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 387:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 388:Src/main.c    ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 389:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 390:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 391:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
 392:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 393:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 394:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 395:Src/main.c    ****   {
 396:Src/main.c    ****     Error_Handler();
 397:Src/main.c    ****   }
 398:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 2 */
 399:Src/main.c    **** 
 400:Src/main.c    ****   /* USER CODE END SPI2_Init 2 */
 401:Src/main.c    **** }
 402:Src/main.c    **** 
 403:Src/main.c    **** /**
 404:Src/main.c    ****   * @brief TIM2 Initialization Function
 405:Src/main.c    ****   * @param None
 406:Src/main.c    ****   * @retval None
 407:Src/main.c    ****   */
 408:Src/main.c    **** static void MX_TIM2_Init(void)
 409:Src/main.c    **** {
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 412:Src/main.c    **** 
 413:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 414:Src/main.c    **** 
 415:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 416:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 417:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 418:Src/main.c    **** 
 419:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 420:Src/main.c    **** 
 421:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 422:Src/main.c    ****   htim2.Instance = TIM2;
 423:Src/main.c    ****   htim2.Init.Prescaler = 540;
 424:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 425:Src/main.c    ****   htim2.Init.Period = 100;
 426:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 427:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 428:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 429:Src/main.c    ****   {
 430:Src/main.c    ****     Error_Handler();
 431:Src/main.c    ****   }
 432:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
ARM GAS  /tmp/ccaWiAmD.s 			page 9


 433:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 434:Src/main.c    ****   {
 435:Src/main.c    ****     Error_Handler();
 436:Src/main.c    ****   }
 437:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 438:Src/main.c    ****   {
 439:Src/main.c    ****     Error_Handler();
 440:Src/main.c    ****   }
 441:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 442:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 443:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 444:Src/main.c    ****   {
 445:Src/main.c    ****     Error_Handler();
 446:Src/main.c    ****   }
 447:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 448:Src/main.c    ****   sConfigOC.Pulse = 1;
 449:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 450:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 451:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 452:Src/main.c    ****   {
 453:Src/main.c    ****     Error_Handler();
 454:Src/main.c    ****   }
 455:Src/main.c    ****   sConfigOC.Pulse = 0;
 456:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 457:Src/main.c    ****   {
 458:Src/main.c    ****     Error_Handler();
 459:Src/main.c    ****   }
 460:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 461:Src/main.c    **** 
 462:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 463:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 464:Src/main.c    **** }
 465:Src/main.c    **** 
 466:Src/main.c    **** /**
 467:Src/main.c    ****   * @brief TIM3 Initialization Function
 468:Src/main.c    ****   * @param None
 469:Src/main.c    ****   * @retval None
 470:Src/main.c    ****   */
 471:Src/main.c    **** static void MX_TIM3_Init(void)
 472:Src/main.c    **** {
 473:Src/main.c    **** 
 474:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 475:Src/main.c    **** 
 476:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 477:Src/main.c    **** 
 478:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 479:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 480:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 481:Src/main.c    **** 
 482:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 483:Src/main.c    **** 
 484:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 485:Src/main.c    ****   htim3.Instance = TIM3;
 486:Src/main.c    ****   htim3.Init.Prescaler = 54;
 487:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 488:Src/main.c    ****   htim3.Init.Period = 100;
 489:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccaWiAmD.s 			page 10


 490:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 491:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 492:Src/main.c    ****   {
 493:Src/main.c    ****     Error_Handler();
 494:Src/main.c    ****   }
 495:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 496:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 497:Src/main.c    ****   {
 498:Src/main.c    ****     Error_Handler();
 499:Src/main.c    ****   }
 500:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 501:Src/main.c    ****   {
 502:Src/main.c    ****     Error_Handler();
 503:Src/main.c    ****   }
 504:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 505:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 506:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 507:Src/main.c    ****   {
 508:Src/main.c    ****     Error_Handler();
 509:Src/main.c    ****   }
 510:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 511:Src/main.c    ****   sConfigOC.Pulse = 50;
 512:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 513:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 514:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 515:Src/main.c    ****   {
 516:Src/main.c    ****     Error_Handler();
 517:Src/main.c    ****   }
 518:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 521:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 522:Src/main.c    **** }
 523:Src/main.c    **** 
 524:Src/main.c    **** /**
 525:Src/main.c    ****   * @brief TIM4 Initialization Function
 526:Src/main.c    ****   * @param None
 527:Src/main.c    ****   * @retval None
 528:Src/main.c    ****   */
 529:Src/main.c    **** static void MX_TIM4_Init(void)
 530:Src/main.c    **** {
 531:Src/main.c    **** 
 532:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 533:Src/main.c    **** 
 534:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 535:Src/main.c    **** 
 536:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 537:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 538:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 539:Src/main.c    **** 
 540:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 541:Src/main.c    **** 
 542:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 543:Src/main.c    ****   htim4.Instance = TIM4;
 544:Src/main.c    ****   htim4.Init.Prescaler = 27;
 545:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 546:Src/main.c    ****   htim4.Init.Period = 1000;
ARM GAS  /tmp/ccaWiAmD.s 			page 11


 547:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 548:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 549:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 550:Src/main.c    ****   {
 551:Src/main.c    ****     Error_Handler();
 552:Src/main.c    ****   }
 553:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 554:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 555:Src/main.c    ****   {
 556:Src/main.c    ****     Error_Handler();
 557:Src/main.c    ****   }
 558:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 559:Src/main.c    ****   {
 560:Src/main.c    ****     Error_Handler();
 561:Src/main.c    ****   }
 562:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 563:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 564:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 565:Src/main.c    ****   {
 566:Src/main.c    ****     Error_Handler();
 567:Src/main.c    ****   }
 568:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 569:Src/main.c    ****   sConfigOC.Pulse = 0;
 570:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 571:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 572:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 573:Src/main.c    ****   {
 574:Src/main.c    ****     Error_Handler();
 575:Src/main.c    ****   }
 576:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 577:Src/main.c    ****   {
 578:Src/main.c    ****     Error_Handler();
 579:Src/main.c    ****   }
 580:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 581:Src/main.c    **** 
 582:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 583:Src/main.c    ****   HAL_TIM_MspPostInit(&htim4);
 584:Src/main.c    **** }
 585:Src/main.c    **** 
 586:Src/main.c    **** /**
 587:Src/main.c    ****   * @brief USART3 Initialization Function
 588:Src/main.c    ****   * @param None
 589:Src/main.c    ****   * @retval None
 590:Src/main.c    ****   */
 591:Src/main.c    **** static void MX_USART3_UART_Init(void)
 592:Src/main.c    **** {
 593:Src/main.c    **** 
 594:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 595:Src/main.c    **** 
 596:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 597:Src/main.c    **** 
 598:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 599:Src/main.c    **** 
 600:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 601:Src/main.c    ****   huart3.Instance = USART3;
 602:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 603:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/ccaWiAmD.s 			page 12


 604:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 605:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 606:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 607:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 608:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 609:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 610:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 611:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 612:Src/main.c    ****   {
 613:Src/main.c    ****     Error_Handler();
 614:Src/main.c    ****   }
 615:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 616:Src/main.c    **** 
 617:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 618:Src/main.c    **** }
 619:Src/main.c    **** 
 620:Src/main.c    **** /** 
 621:Src/main.c    ****   * Enable DMA controller clock
 622:Src/main.c    ****   */
 623:Src/main.c    **** static void MX_DMA_Init(void)
 624:Src/main.c    **** {
 625:Src/main.c    **** 
 626:Src/main.c    ****   /* DMA controller clock enable */
 627:Src/main.c    ****   __HAL_RCC_DMA2_CLK_ENABLE();
 628:Src/main.c    **** 
 629:Src/main.c    ****   /* DMA interrupt init */
 630:Src/main.c    ****   /* DMA2_Stream0_IRQn interrupt configuration */
 631:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 632:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 633:Src/main.c    **** }
 634:Src/main.c    **** 
 635:Src/main.c    **** /**
 636:Src/main.c    ****   * @brief GPIO Initialization Function
 637:Src/main.c    ****   * @param None
 638:Src/main.c    ****   * @retval None
 639:Src/main.c    ****   */
 640:Src/main.c    **** static void MX_GPIO_Init(void)
 641:Src/main.c    **** {
  26              		.loc 1 641 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 40
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
  39 0004 8AB0     		sub	sp, sp, #40
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 64
 642:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 642 0
  43 0006 0024     		movs	r4, #0
ARM GAS  /tmp/ccaWiAmD.s 			page 13


  44 0008 0594     		str	r4, [sp, #20]
  45 000a 0694     		str	r4, [sp, #24]
  46 000c 0794     		str	r4, [sp, #28]
  47 000e 0894     		str	r4, [sp, #32]
  48 0010 0994     		str	r4, [sp, #36]
  49              	.LBB2:
 643:Src/main.c    **** 
 644:Src/main.c    ****   /* GPIO Ports Clock Enable */
 645:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  50              		.loc 1 645 0
  51 0012 314B     		ldr	r3, .L3
  52 0014 1A6B     		ldr	r2, [r3, #48]
  53 0016 42F00402 		orr	r2, r2, #4
  54 001a 1A63     		str	r2, [r3, #48]
  55 001c 1A6B     		ldr	r2, [r3, #48]
  56 001e 02F00402 		and	r2, r2, #4
  57 0022 0092     		str	r2, [sp]
  58 0024 009A     		ldr	r2, [sp]
  59              	.LBE2:
  60              	.LBB3:
 646:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  61              		.loc 1 646 0
  62 0026 1A6B     		ldr	r2, [r3, #48]
  63 0028 42F00102 		orr	r2, r2, #1
  64 002c 1A63     		str	r2, [r3, #48]
  65 002e 1A6B     		ldr	r2, [r3, #48]
  66 0030 02F00102 		and	r2, r2, #1
  67 0034 0192     		str	r2, [sp, #4]
  68 0036 019A     		ldr	r2, [sp, #4]
  69              	.LBE3:
  70              	.LBB4:
 647:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  71              		.loc 1 647 0
  72 0038 1A6B     		ldr	r2, [r3, #48]
  73 003a 42F01002 		orr	r2, r2, #16
  74 003e 1A63     		str	r2, [r3, #48]
  75 0040 1A6B     		ldr	r2, [r3, #48]
  76 0042 02F01002 		and	r2, r2, #16
  77 0046 0292     		str	r2, [sp, #8]
  78 0048 029A     		ldr	r2, [sp, #8]
  79              	.LBE4:
  80              	.LBB5:
 648:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  81              		.loc 1 648 0
  82 004a 1A6B     		ldr	r2, [r3, #48]
  83 004c 42F00202 		orr	r2, r2, #2
  84 0050 1A63     		str	r2, [r3, #48]
  85 0052 1A6B     		ldr	r2, [r3, #48]
  86 0054 02F00202 		and	r2, r2, #2
  87 0058 0392     		str	r2, [sp, #12]
  88 005a 039A     		ldr	r2, [sp, #12]
  89              	.LBE5:
  90              	.LBB6:
 649:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  91              		.loc 1 649 0
  92 005c 1A6B     		ldr	r2, [r3, #48]
  93 005e 42F00802 		orr	r2, r2, #8
ARM GAS  /tmp/ccaWiAmD.s 			page 14


  94 0062 1A63     		str	r2, [r3, #48]
  95 0064 1B6B     		ldr	r3, [r3, #48]
  96 0066 03F00803 		and	r3, r3, #8
  97 006a 0493     		str	r3, [sp, #16]
  98 006c 049B     		ldr	r3, [sp, #16]
  99              	.LBE6:
 650:Src/main.c    **** 
 651:Src/main.c    ****   /*Configure GPIO pin Output Level */
 652:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3 | GPIO_PIN_7, GPIO_PIN_RESET);
 100              		.loc 1 652 0
 101 006e DFF87480 		ldr	r8, .L3+12
 102 0072 2246     		mov	r2, r4
 103 0074 8821     		movs	r1, #136
 104 0076 4046     		mov	r0, r8
 105 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL0:
 653:Src/main.c    **** 
 654:Src/main.c    ****   /*Configure GPIO pin Output Level */
 655:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 107              		.loc 1 655 0
 108 007c 174F     		ldr	r7, .L3+4
 109 007e 2246     		mov	r2, r4
 110 0080 4FF4F041 		mov	r1, #30720
 111 0084 3846     		mov	r0, r7
 112 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL1:
 656:Src/main.c    **** 
 657:Src/main.c    ****   /*Configure GPIO pin Output Level */
 658:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 114              		.loc 1 658 0
 115 008a 154E     		ldr	r6, .L3+8
 116 008c 2246     		mov	r2, r4
 117 008e 1021     		movs	r1, #16
 118 0090 3046     		mov	r0, r6
 119 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL2:
 659:Src/main.c    **** 
 660:Src/main.c    ****   /*Configure GPIO pins : PC3 PC7 */
 661:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7;
 121              		.loc 1 661 0
 122 0096 8823     		movs	r3, #136
 123 0098 0593     		str	r3, [sp, #20]
 662:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 124              		.loc 1 662 0
 125 009a 0125     		movs	r5, #1
 126 009c 0695     		str	r5, [sp, #24]
 663:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 663 0
 128 009e 0794     		str	r4, [sp, #28]
 664:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 129              		.loc 1 664 0
 130 00a0 0894     		str	r4, [sp, #32]
 665:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 131              		.loc 1 665 0
 132 00a2 05A9     		add	r1, sp, #20
 133 00a4 4046     		mov	r0, r8
 134 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccaWiAmD.s 			page 15


 135              	.LVL3:
 666:Src/main.c    **** 
 667:Src/main.c    ****   /*Configure GPIO pins : PE11 PE12 PE13 PE14 */
 668:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 136              		.loc 1 668 0
 137 00aa 4FF4F043 		mov	r3, #30720
 138 00ae 0593     		str	r3, [sp, #20]
 669:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 139              		.loc 1 669 0
 140 00b0 0695     		str	r5, [sp, #24]
 670:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 141              		.loc 1 670 0
 142 00b2 0794     		str	r4, [sp, #28]
 671:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 143              		.loc 1 671 0
 144 00b4 0894     		str	r4, [sp, #32]
 672:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 145              		.loc 1 672 0
 146 00b6 05A9     		add	r1, sp, #20
 147 00b8 3846     		mov	r0, r7
 148 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 149              	.LVL4:
 673:Src/main.c    **** 
 674:Src/main.c    ****   /*Configure GPIO pin : PD4 */
 675:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4;
 150              		.loc 1 675 0
 151 00be 1023     		movs	r3, #16
 152 00c0 0593     		str	r3, [sp, #20]
 676:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 676 0
 154 00c2 0695     		str	r5, [sp, #24]
 677:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 155              		.loc 1 677 0
 156 00c4 0794     		str	r4, [sp, #28]
 678:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 157              		.loc 1 678 0
 158 00c6 0894     		str	r4, [sp, #32]
 679:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 159              		.loc 1 679 0
 160 00c8 05A9     		add	r1, sp, #20
 161 00ca 3046     		mov	r0, r6
 162 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 163              	.LVL5:
 680:Src/main.c    **** }
 164              		.loc 1 680 0
 165 00d0 0AB0     		add	sp, sp, #40
 166              	.LCFI2:
 167              		.cfi_def_cfa_offset 24
 168              		@ sp needed
 169 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 170              	.L4:
 171 00d6 00BF     		.align	2
 172              	.L3:
 173 00d8 00380240 		.word	1073887232
 174 00dc 00100240 		.word	1073876992
 175 00e0 000C0240 		.word	1073875968
 176 00e4 00080240 		.word	1073874944
ARM GAS  /tmp/ccaWiAmD.s 			page 16


 177              		.cfi_endproc
 178              	.LFE161:
 180              		.section	.text.MX_CAN1_Init,"ax",%progbits
 181              		.align	1
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv5-d16
 187              	MX_CAN1_Init:
 188              	.LFB154:
 334:Src/main.c    **** 
 189              		.loc 1 334 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193 0000 08B5     		push	{r3, lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 3, -8
 197              		.cfi_offset 14, -4
 343:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 198              		.loc 1 343 0
 199 0002 0C48     		ldr	r0, .L7
 200 0004 0C4B     		ldr	r3, .L7+4
 201 0006 0360     		str	r3, [r0]
 344:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 202              		.loc 1 344 0
 203 0008 0323     		movs	r3, #3
 204 000a 4360     		str	r3, [r0, #4]
 345:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 205              		.loc 1 345 0
 206 000c 0023     		movs	r3, #0
 207 000e 8360     		str	r3, [r0, #8]
 346:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 208              		.loc 1 346 0
 209 0010 C360     		str	r3, [r0, #12]
 347:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 210              		.loc 1 347 0
 211 0012 4FF43022 		mov	r2, #720896
 212 0016 0261     		str	r2, [r0, #16]
 348:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 213              		.loc 1 348 0
 214 0018 4FF48002 		mov	r2, #4194304
 215 001c 4261     		str	r2, [r0, #20]
 349:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 216              		.loc 1 349 0
 217 001e 0376     		strb	r3, [r0, #24]
 350:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 218              		.loc 1 350 0
 219 0020 4376     		strb	r3, [r0, #25]
 351:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 220              		.loc 1 351 0
 221 0022 0122     		movs	r2, #1
 222 0024 8276     		strb	r2, [r0, #26]
 352:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 223              		.loc 1 352 0
 224 0026 C276     		strb	r2, [r0, #27]
ARM GAS  /tmp/ccaWiAmD.s 			page 17


 353:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 225              		.loc 1 353 0
 226 0028 0377     		strb	r3, [r0, #28]
 354:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 227              		.loc 1 354 0
 228 002a 4377     		strb	r3, [r0, #29]
 355:Src/main.c    ****   {
 229              		.loc 1 355 0
 230 002c FFF7FEFF 		bl	HAL_CAN_Init
 231              	.LVL6:
 232 0030 08BD     		pop	{r3, pc}
 233              	.L8:
 234 0032 00BF     		.align	2
 235              	.L7:
 236 0034 00000000 		.word	hcan1
 237 0038 00640040 		.word	1073767424
 238              		.cfi_endproc
 239              	.LFE154:
 241              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 242              		.align	1
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 246              		.fpu fpv5-d16
 248              	MX_USART3_UART_Init:
 249              	.LFB159:
 592:Src/main.c    **** 
 250              		.loc 1 592 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254 0000 08B5     		push	{r3, lr}
 255              	.LCFI4:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 3, -8
 258              		.cfi_offset 14, -4
 601:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 259              		.loc 1 601 0
 260 0002 0948     		ldr	r0, .L11
 261 0004 094B     		ldr	r3, .L11+4
 262 0006 0360     		str	r3, [r0]
 602:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 263              		.loc 1 602 0
 264 0008 4FF4E133 		mov	r3, #115200
 265 000c 4360     		str	r3, [r0, #4]
 603:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 266              		.loc 1 603 0
 267 000e 0023     		movs	r3, #0
 268 0010 8360     		str	r3, [r0, #8]
 604:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 269              		.loc 1 604 0
 270 0012 C360     		str	r3, [r0, #12]
 605:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 271              		.loc 1 605 0
 272 0014 0361     		str	r3, [r0, #16]
 606:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 273              		.loc 1 606 0
ARM GAS  /tmp/ccaWiAmD.s 			page 18


 274 0016 0C22     		movs	r2, #12
 275 0018 4261     		str	r2, [r0, #20]
 607:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 276              		.loc 1 607 0
 277 001a 8361     		str	r3, [r0, #24]
 608:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 278              		.loc 1 608 0
 279 001c C361     		str	r3, [r0, #28]
 609:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 280              		.loc 1 609 0
 281 001e 0362     		str	r3, [r0, #32]
 610:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 282              		.loc 1 610 0
 283 0020 4362     		str	r3, [r0, #36]
 611:Src/main.c    ****   {
 284              		.loc 1 611 0
 285 0022 FFF7FEFF 		bl	HAL_UART_Init
 286              	.LVL7:
 287 0026 08BD     		pop	{r3, pc}
 288              	.L12:
 289              		.align	2
 290              	.L11:
 291 0028 00000000 		.word	huart3
 292 002c 00480040 		.word	1073760256
 293              		.cfi_endproc
 294              	.LFE159:
 296              		.section	.text.MX_ADC1_Init,"ax",%progbits
 297              		.align	1
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv5-d16
 303              	MX_ADC1_Init:
 304              	.LFB153:
 285:Src/main.c    **** 
 305              		.loc 1 285 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 16
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309 0000 70B5     		push	{r4, r5, r6, lr}
 310              	.LCFI5:
 311              		.cfi_def_cfa_offset 16
 312              		.cfi_offset 4, -16
 313              		.cfi_offset 5, -12
 314              		.cfi_offset 6, -8
 315              		.cfi_offset 14, -4
 316 0002 84B0     		sub	sp, sp, #16
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 32
 291:Src/main.c    **** 
 319              		.loc 1 291 0
 320 0004 0025     		movs	r5, #0
 321 0006 0095     		str	r5, [sp]
 322 0008 0195     		str	r5, [sp, #4]
 323 000a 0295     		str	r5, [sp, #8]
 324 000c 0395     		str	r5, [sp, #12]
 298:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
ARM GAS  /tmp/ccaWiAmD.s 			page 19


 325              		.loc 1 298 0
 326 000e 104C     		ldr	r4, .L15
 327 0010 104B     		ldr	r3, .L15+4
 328 0012 2360     		str	r3, [r4]
 299:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 329              		.loc 1 299 0
 330 0014 4FF48033 		mov	r3, #65536
 331 0018 6360     		str	r3, [r4, #4]
 300:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 332              		.loc 1 300 0
 333 001a A560     		str	r5, [r4, #8]
 301:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 334              		.loc 1 301 0
 335 001c 0126     		movs	r6, #1
 336 001e 2661     		str	r6, [r4, #16]
 302:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 337              		.loc 1 302 0
 338 0020 A661     		str	r6, [r4, #24]
 303:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 339              		.loc 1 303 0
 340 0022 84F82050 		strb	r5, [r4, #32]
 304:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 341              		.loc 1 304 0
 342 0026 E562     		str	r5, [r4, #44]
 305:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 343              		.loc 1 305 0
 344 0028 0B4B     		ldr	r3, .L15+8
 345 002a A362     		str	r3, [r4, #40]
 306:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 346              		.loc 1 306 0
 347 002c E560     		str	r5, [r4, #12]
 307:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 348              		.loc 1 307 0
 349 002e E661     		str	r6, [r4, #28]
 308:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 350              		.loc 1 308 0
 351 0030 84F83050 		strb	r5, [r4, #48]
 309:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 352              		.loc 1 309 0
 353 0034 6661     		str	r6, [r4, #20]
 310:Src/main.c    ****   {
 354              		.loc 1 310 0
 355 0036 2046     		mov	r0, r4
 356 0038 FFF7FEFF 		bl	HAL_ADC_Init
 357              	.LVL8:
 316:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 358              		.loc 1 316 0
 359 003c 0A23     		movs	r3, #10
 360 003e 0093     		str	r3, [sp]
 317:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 361              		.loc 1 317 0
 362 0040 0196     		str	r6, [sp, #4]
 318:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 363              		.loc 1 318 0
 364 0042 0295     		str	r5, [sp, #8]
 319:Src/main.c    ****   {
 365              		.loc 1 319 0
ARM GAS  /tmp/ccaWiAmD.s 			page 20


 366 0044 6946     		mov	r1, sp
 367 0046 2046     		mov	r0, r4
 368 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 369              	.LVL9:
 326:Src/main.c    **** 
 370              		.loc 1 326 0
 371 004c 04B0     		add	sp, sp, #16
 372              	.LCFI7:
 373              		.cfi_def_cfa_offset 16
 374              		@ sp needed
 375 004e 70BD     		pop	{r4, r5, r6, pc}
 376              	.L16:
 377              		.align	2
 378              	.L15:
 379 0050 00000000 		.word	hadc1
 380 0054 00200140 		.word	1073815552
 381 0058 0100000F 		.word	251658241
 382              		.cfi_endproc
 383              	.LFE153:
 385              		.section	.text.MX_SPI2_Init,"ax",%progbits
 386              		.align	1
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv5-d16
 392              	MX_SPI2_Init:
 393              	.LFB155:
 370:Src/main.c    **** 
 394              		.loc 1 370 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398 0000 08B5     		push	{r3, lr}
 399              	.LCFI8:
 400              		.cfi_def_cfa_offset 8
 401              		.cfi_offset 3, -8
 402              		.cfi_offset 14, -4
 380:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 403              		.loc 1 380 0
 404 0002 0E48     		ldr	r0, .L19
 405 0004 0E4B     		ldr	r3, .L19+4
 406 0006 0360     		str	r3, [r0]
 381:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 407              		.loc 1 381 0
 408 0008 4FF48273 		mov	r3, #260
 409 000c 4360     		str	r3, [r0, #4]
 382:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 410              		.loc 1 382 0
 411 000e 0023     		movs	r3, #0
 412 0010 8360     		str	r3, [r0, #8]
 383:Src/main.c    ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 413              		.loc 1 383 0
 414 0012 4FF44072 		mov	r2, #768
 415 0016 C260     		str	r2, [r0, #12]
 384:Src/main.c    ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 416              		.loc 1 384 0
 417 0018 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/ccaWiAmD.s 			page 21


 385:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 418              		.loc 1 385 0
 419 001a 4361     		str	r3, [r0, #20]
 386:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 420              		.loc 1 386 0
 421 001c 4FF40072 		mov	r2, #512
 422 0020 8261     		str	r2, [r0, #24]
 387:Src/main.c    ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 423              		.loc 1 387 0
 424 0022 C361     		str	r3, [r0, #28]
 388:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 425              		.loc 1 388 0
 426 0024 0362     		str	r3, [r0, #32]
 389:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 427              		.loc 1 389 0
 428 0026 4362     		str	r3, [r0, #36]
 390:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
 429              		.loc 1 390 0
 430 0028 8362     		str	r3, [r0, #40]
 391:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 431              		.loc 1 391 0
 432 002a 0722     		movs	r2, #7
 433 002c C262     		str	r2, [r0, #44]
 392:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 434              		.loc 1 392 0
 435 002e 0363     		str	r3, [r0, #48]
 393:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 436              		.loc 1 393 0
 437 0030 0823     		movs	r3, #8
 438 0032 4363     		str	r3, [r0, #52]
 394:Src/main.c    ****   {
 439              		.loc 1 394 0
 440 0034 FFF7FEFF 		bl	HAL_SPI_Init
 441              	.LVL10:
 442 0038 08BD     		pop	{r3, pc}
 443              	.L20:
 444 003a 00BF     		.align	2
 445              	.L19:
 446 003c 00000000 		.word	hspi2
 447 0040 00380040 		.word	1073756160
 448              		.cfi_endproc
 449              	.LFE155:
 451              		.section	.text.MX_DMA_Init,"ax",%progbits
 452              		.align	1
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu fpv5-d16
 458              	MX_DMA_Init:
 459              	.LFB160:
 624:Src/main.c    **** 
 460              		.loc 1 624 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 8
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464 0000 00B5     		push	{lr}
 465              	.LCFI9:
ARM GAS  /tmp/ccaWiAmD.s 			page 22


 466              		.cfi_def_cfa_offset 4
 467              		.cfi_offset 14, -4
 468 0002 83B0     		sub	sp, sp, #12
 469              	.LCFI10:
 470              		.cfi_def_cfa_offset 16
 471              	.LBB7:
 627:Src/main.c    **** 
 472              		.loc 1 627 0
 473 0004 0A4B     		ldr	r3, .L23
 474 0006 1A6B     		ldr	r2, [r3, #48]
 475 0008 42F48002 		orr	r2, r2, #4194304
 476 000c 1A63     		str	r2, [r3, #48]
 477 000e 1B6B     		ldr	r3, [r3, #48]
 478 0010 03F48003 		and	r3, r3, #4194304
 479 0014 0193     		str	r3, [sp, #4]
 480 0016 019B     		ldr	r3, [sp, #4]
 481              	.LBE7:
 631:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 482              		.loc 1 631 0
 483 0018 0022     		movs	r2, #0
 484 001a 1146     		mov	r1, r2
 485 001c 3820     		movs	r0, #56
 486 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 487              	.LVL11:
 632:Src/main.c    **** }
 488              		.loc 1 632 0
 489 0022 3820     		movs	r0, #56
 490 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 491              	.LVL12:
 633:Src/main.c    **** 
 492              		.loc 1 633 0
 493 0028 03B0     		add	sp, sp, #12
 494              	.LCFI11:
 495              		.cfi_def_cfa_offset 4
 496              		@ sp needed
 497 002a 5DF804FB 		ldr	pc, [sp], #4
 498              	.L24:
 499 002e 00BF     		.align	2
 500              	.L23:
 501 0030 00380240 		.word	1073887232
 502              		.cfi_endproc
 503              	.LFE160:
 505              		.section	.text.MX_NVIC_Init,"ax",%progbits
 506              		.align	1
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu fpv5-d16
 512              	MX_NVIC_Init:
 513              	.LFB152:
 267:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 514              		.loc 1 267 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518 0000 08B5     		push	{r3, lr}
 519              	.LCFI12:
ARM GAS  /tmp/ccaWiAmD.s 			page 23


 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 3, -8
 522              		.cfi_offset 14, -4
 269:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 523              		.loc 1 269 0
 524 0002 0022     		movs	r2, #0
 525 0004 1146     		mov	r1, r2
 526 0006 1620     		movs	r0, #22
 527 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 528              	.LVL13:
 270:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 529              		.loc 1 270 0
 530 000c 1620     		movs	r0, #22
 531 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 532              	.LVL14:
 272:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 533              		.loc 1 272 0
 534 0012 0022     		movs	r2, #0
 535 0014 1146     		mov	r1, r2
 536 0016 1520     		movs	r0, #21
 537 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 538              	.LVL15:
 273:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 539              		.loc 1 273 0
 540 001c 1520     		movs	r0, #21
 541 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 542              	.LVL16:
 275:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 543              		.loc 1 275 0
 544 0022 0022     		movs	r2, #0
 545 0024 1146     		mov	r1, r2
 546 0026 1420     		movs	r0, #20
 547 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 548              	.LVL17:
 276:Src/main.c    **** }
 549              		.loc 1 276 0
 550 002c 1420     		movs	r0, #20
 551 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 552              	.LVL18:
 553 0032 08BD     		pop	{r3, pc}
 554              		.cfi_endproc
 555              	.LFE152:
 557              		.section	.text.MX_TIM4_Init,"ax",%progbits
 558              		.align	1
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv5-d16
 564              	MX_TIM4_Init:
 565              	.LFB158:
 530:Src/main.c    **** 
 566              		.loc 1 530 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 56
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570 0000 30B5     		push	{r4, r5, lr}
 571              	.LCFI13:
ARM GAS  /tmp/ccaWiAmD.s 			page 24


 572              		.cfi_def_cfa_offset 12
 573              		.cfi_offset 4, -12
 574              		.cfi_offset 5, -8
 575              		.cfi_offset 14, -4
 576 0002 8FB0     		sub	sp, sp, #60
 577              	.LCFI14:
 578              		.cfi_def_cfa_offset 72
 536:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 579              		.loc 1 536 0
 580 0004 0024     		movs	r4, #0
 581 0006 0A94     		str	r4, [sp, #40]
 582 0008 0B94     		str	r4, [sp, #44]
 583 000a 0C94     		str	r4, [sp, #48]
 584 000c 0D94     		str	r4, [sp, #52]
 537:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 585              		.loc 1 537 0
 586 000e 0794     		str	r4, [sp, #28]
 587 0010 0894     		str	r4, [sp, #32]
 588 0012 0994     		str	r4, [sp, #36]
 538:Src/main.c    **** 
 589              		.loc 1 538 0
 590 0014 0094     		str	r4, [sp]
 591 0016 0194     		str	r4, [sp, #4]
 592 0018 0294     		str	r4, [sp, #8]
 593 001a 0394     		str	r4, [sp, #12]
 594 001c 0494     		str	r4, [sp, #16]
 595 001e 0594     		str	r4, [sp, #20]
 596 0020 0694     		str	r4, [sp, #24]
 543:Src/main.c    ****   htim4.Init.Prescaler = 27;
 597              		.loc 1 543 0
 598 0022 194D     		ldr	r5, .L29
 599 0024 194B     		ldr	r3, .L29+4
 600 0026 2B60     		str	r3, [r5]
 544:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 601              		.loc 1 544 0
 602 0028 1B23     		movs	r3, #27
 603 002a 6B60     		str	r3, [r5, #4]
 545:Src/main.c    ****   htim4.Init.Period = 1000;
 604              		.loc 1 545 0
 605 002c AC60     		str	r4, [r5, #8]
 546:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 606              		.loc 1 546 0
 607 002e 4FF47A73 		mov	r3, #1000
 608 0032 EB60     		str	r3, [r5, #12]
 547:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 609              		.loc 1 547 0
 610 0034 2C61     		str	r4, [r5, #16]
 548:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 611              		.loc 1 548 0
 612 0036 AC61     		str	r4, [r5, #24]
 549:Src/main.c    ****   {
 613              		.loc 1 549 0
 614 0038 2846     		mov	r0, r5
 615 003a FFF7FEFF 		bl	HAL_TIM_Base_Init
 616              	.LVL19:
 553:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 617              		.loc 1 553 0
ARM GAS  /tmp/ccaWiAmD.s 			page 25


 618 003e 4FF48053 		mov	r3, #4096
 619 0042 0A93     		str	r3, [sp, #40]
 554:Src/main.c    ****   {
 620              		.loc 1 554 0
 621 0044 0AA9     		add	r1, sp, #40
 622 0046 2846     		mov	r0, r5
 623 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 624              	.LVL20:
 558:Src/main.c    ****   {
 625              		.loc 1 558 0
 626 004c 2846     		mov	r0, r5
 627 004e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 628              	.LVL21:
 562:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 629              		.loc 1 562 0
 630 0052 0794     		str	r4, [sp, #28]
 563:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 631              		.loc 1 563 0
 632 0054 0994     		str	r4, [sp, #36]
 564:Src/main.c    ****   {
 633              		.loc 1 564 0
 634 0056 07A9     		add	r1, sp, #28
 635 0058 2846     		mov	r0, r5
 636 005a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 637              	.LVL22:
 568:Src/main.c    ****   sConfigOC.Pulse = 0;
 638              		.loc 1 568 0
 639 005e 6023     		movs	r3, #96
 640 0060 0093     		str	r3, [sp]
 569:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 641              		.loc 1 569 0
 642 0062 0194     		str	r4, [sp, #4]
 570:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 643              		.loc 1 570 0
 644 0064 0294     		str	r4, [sp, #8]
 571:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 645              		.loc 1 571 0
 646 0066 0494     		str	r4, [sp, #16]
 572:Src/main.c    ****   {
 647              		.loc 1 572 0
 648 0068 2246     		mov	r2, r4
 649 006a 6946     		mov	r1, sp
 650 006c 2846     		mov	r0, r5
 651 006e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 652              	.LVL23:
 576:Src/main.c    ****   {
 653              		.loc 1 576 0
 654 0072 0422     		movs	r2, #4
 655 0074 6946     		mov	r1, sp
 656 0076 2846     		mov	r0, r5
 657 0078 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 658              	.LVL24:
 583:Src/main.c    **** }
 659              		.loc 1 583 0
 660 007c 2846     		mov	r0, r5
 661 007e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 662              	.LVL25:
ARM GAS  /tmp/ccaWiAmD.s 			page 26


 584:Src/main.c    **** 
 663              		.loc 1 584 0
 664 0082 0FB0     		add	sp, sp, #60
 665              	.LCFI15:
 666              		.cfi_def_cfa_offset 12
 667              		@ sp needed
 668 0084 30BD     		pop	{r4, r5, pc}
 669              	.L30:
 670 0086 00BF     		.align	2
 671              	.L29:
 672 0088 00000000 		.word	htim4
 673 008c 00080040 		.word	1073743872
 674              		.cfi_endproc
 675              	.LFE158:
 677              		.section	.text.MX_TIM2_Init,"ax",%progbits
 678              		.align	1
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 682              		.fpu fpv5-d16
 684              	MX_TIM2_Init:
 685              	.LFB156:
 409:Src/main.c    **** 
 686              		.loc 1 409 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 56
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690 0000 30B5     		push	{r4, r5, lr}
 691              	.LCFI16:
 692              		.cfi_def_cfa_offset 12
 693              		.cfi_offset 4, -12
 694              		.cfi_offset 5, -8
 695              		.cfi_offset 14, -4
 696 0002 8FB0     		sub	sp, sp, #60
 697              	.LCFI17:
 698              		.cfi_def_cfa_offset 72
 415:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 699              		.loc 1 415 0
 700 0004 0024     		movs	r4, #0
 701 0006 0A94     		str	r4, [sp, #40]
 702 0008 0B94     		str	r4, [sp, #44]
 703 000a 0C94     		str	r4, [sp, #48]
 704 000c 0D94     		str	r4, [sp, #52]
 416:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 705              		.loc 1 416 0
 706 000e 0794     		str	r4, [sp, #28]
 707 0010 0894     		str	r4, [sp, #32]
 708 0012 0994     		str	r4, [sp, #36]
 417:Src/main.c    **** 
 709              		.loc 1 417 0
 710 0014 0094     		str	r4, [sp]
 711 0016 0194     		str	r4, [sp, #4]
 712 0018 0294     		str	r4, [sp, #8]
 713 001a 0394     		str	r4, [sp, #12]
 714 001c 0494     		str	r4, [sp, #16]
 715 001e 0594     		str	r4, [sp, #20]
 716 0020 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccaWiAmD.s 			page 27


 422:Src/main.c    ****   htim2.Init.Prescaler = 540;
 717              		.loc 1 422 0
 718 0022 1A4D     		ldr	r5, .L33
 719 0024 4FF08043 		mov	r3, #1073741824
 720 0028 2B60     		str	r3, [r5]
 423:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 721              		.loc 1 423 0
 722 002a 4FF40773 		mov	r3, #540
 723 002e 6B60     		str	r3, [r5, #4]
 424:Src/main.c    ****   htim2.Init.Period = 100;
 724              		.loc 1 424 0
 725 0030 AC60     		str	r4, [r5, #8]
 425:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 726              		.loc 1 425 0
 727 0032 6423     		movs	r3, #100
 728 0034 EB60     		str	r3, [r5, #12]
 426:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 729              		.loc 1 426 0
 730 0036 2C61     		str	r4, [r5, #16]
 427:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 731              		.loc 1 427 0
 732 0038 AC61     		str	r4, [r5, #24]
 428:Src/main.c    ****   {
 733              		.loc 1 428 0
 734 003a 2846     		mov	r0, r5
 735 003c FFF7FEFF 		bl	HAL_TIM_Base_Init
 736              	.LVL26:
 432:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 737              		.loc 1 432 0
 738 0040 4FF48053 		mov	r3, #4096
 739 0044 0A93     		str	r3, [sp, #40]
 433:Src/main.c    ****   {
 740              		.loc 1 433 0
 741 0046 0AA9     		add	r1, sp, #40
 742 0048 2846     		mov	r0, r5
 743 004a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 744              	.LVL27:
 437:Src/main.c    ****   {
 745              		.loc 1 437 0
 746 004e 2846     		mov	r0, r5
 747 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 748              	.LVL28:
 441:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 749              		.loc 1 441 0
 750 0054 0794     		str	r4, [sp, #28]
 442:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 751              		.loc 1 442 0
 752 0056 0994     		str	r4, [sp, #36]
 443:Src/main.c    ****   {
 753              		.loc 1 443 0
 754 0058 07A9     		add	r1, sp, #28
 755 005a 2846     		mov	r0, r5
 756 005c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 757              	.LVL29:
 447:Src/main.c    ****   sConfigOC.Pulse = 1;
 758              		.loc 1 447 0
 759 0060 6023     		movs	r3, #96
ARM GAS  /tmp/ccaWiAmD.s 			page 28


 760 0062 0093     		str	r3, [sp]
 448:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 761              		.loc 1 448 0
 762 0064 0123     		movs	r3, #1
 763 0066 0193     		str	r3, [sp, #4]
 449:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 764              		.loc 1 449 0
 765 0068 0294     		str	r4, [sp, #8]
 450:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 766              		.loc 1 450 0
 767 006a 0494     		str	r4, [sp, #16]
 451:Src/main.c    ****   {
 768              		.loc 1 451 0
 769 006c 2246     		mov	r2, r4
 770 006e 6946     		mov	r1, sp
 771 0070 2846     		mov	r0, r5
 772 0072 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 773              	.LVL30:
 455:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 774              		.loc 1 455 0
 775 0076 0194     		str	r4, [sp, #4]
 456:Src/main.c    ****   {
 776              		.loc 1 456 0
 777 0078 0422     		movs	r2, #4
 778 007a 6946     		mov	r1, sp
 779 007c 2846     		mov	r0, r5
 780 007e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 781              	.LVL31:
 463:Src/main.c    **** }
 782              		.loc 1 463 0
 783 0082 2846     		mov	r0, r5
 784 0084 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 785              	.LVL32:
 464:Src/main.c    **** 
 786              		.loc 1 464 0
 787 0088 0FB0     		add	sp, sp, #60
 788              	.LCFI18:
 789              		.cfi_def_cfa_offset 12
 790              		@ sp needed
 791 008a 30BD     		pop	{r4, r5, pc}
 792              	.L34:
 793              		.align	2
 794              	.L33:
 795 008c 00000000 		.word	htim2
 796              		.cfi_endproc
 797              	.LFE156:
 799              		.section	.text.MX_TIM3_Init,"ax",%progbits
 800              		.align	1
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 804              		.fpu fpv5-d16
 806              	MX_TIM3_Init:
 807              	.LFB157:
 472:Src/main.c    **** 
 808              		.loc 1 472 0
 809              		.cfi_startproc
ARM GAS  /tmp/ccaWiAmD.s 			page 29


 810              		@ args = 0, pretend = 0, frame = 56
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812 0000 30B5     		push	{r4, r5, lr}
 813              	.LCFI19:
 814              		.cfi_def_cfa_offset 12
 815              		.cfi_offset 4, -12
 816              		.cfi_offset 5, -8
 817              		.cfi_offset 14, -4
 818 0002 8FB0     		sub	sp, sp, #60
 819              	.LCFI20:
 820              		.cfi_def_cfa_offset 72
 478:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 821              		.loc 1 478 0
 822 0004 0024     		movs	r4, #0
 823 0006 0A94     		str	r4, [sp, #40]
 824 0008 0B94     		str	r4, [sp, #44]
 825 000a 0C94     		str	r4, [sp, #48]
 826 000c 0D94     		str	r4, [sp, #52]
 479:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 827              		.loc 1 479 0
 828 000e 0794     		str	r4, [sp, #28]
 829 0010 0894     		str	r4, [sp, #32]
 830 0012 0994     		str	r4, [sp, #36]
 480:Src/main.c    **** 
 831              		.loc 1 480 0
 832 0014 0094     		str	r4, [sp]
 833 0016 0194     		str	r4, [sp, #4]
 834 0018 0294     		str	r4, [sp, #8]
 835 001a 0394     		str	r4, [sp, #12]
 836 001c 0494     		str	r4, [sp, #16]
 837 001e 0594     		str	r4, [sp, #20]
 838 0020 0694     		str	r4, [sp, #24]
 485:Src/main.c    ****   htim3.Init.Prescaler = 54;
 839              		.loc 1 485 0
 840 0022 164D     		ldr	r5, .L37
 841 0024 164B     		ldr	r3, .L37+4
 842 0026 2B60     		str	r3, [r5]
 486:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 843              		.loc 1 486 0
 844 0028 3623     		movs	r3, #54
 845 002a 6B60     		str	r3, [r5, #4]
 487:Src/main.c    ****   htim3.Init.Period = 100;
 846              		.loc 1 487 0
 847 002c AC60     		str	r4, [r5, #8]
 488:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 848              		.loc 1 488 0
 849 002e 6423     		movs	r3, #100
 850 0030 EB60     		str	r3, [r5, #12]
 489:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 851              		.loc 1 489 0
 852 0032 2C61     		str	r4, [r5, #16]
 490:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 853              		.loc 1 490 0
 854 0034 AC61     		str	r4, [r5, #24]
 491:Src/main.c    ****   {
 855              		.loc 1 491 0
 856 0036 2846     		mov	r0, r5
ARM GAS  /tmp/ccaWiAmD.s 			page 30


 857 0038 FFF7FEFF 		bl	HAL_TIM_Base_Init
 858              	.LVL33:
 495:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 859              		.loc 1 495 0
 860 003c 4FF48053 		mov	r3, #4096
 861 0040 0A93     		str	r3, [sp, #40]
 496:Src/main.c    ****   {
 862              		.loc 1 496 0
 863 0042 0AA9     		add	r1, sp, #40
 864 0044 2846     		mov	r0, r5
 865 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 866              	.LVL34:
 500:Src/main.c    ****   {
 867              		.loc 1 500 0
 868 004a 2846     		mov	r0, r5
 869 004c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 870              	.LVL35:
 504:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 871              		.loc 1 504 0
 872 0050 0794     		str	r4, [sp, #28]
 505:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 873              		.loc 1 505 0
 874 0052 0994     		str	r4, [sp, #36]
 506:Src/main.c    ****   {
 875              		.loc 1 506 0
 876 0054 07A9     		add	r1, sp, #28
 877 0056 2846     		mov	r0, r5
 878 0058 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 879              	.LVL36:
 510:Src/main.c    ****   sConfigOC.Pulse = 50;
 880              		.loc 1 510 0
 881 005c 6023     		movs	r3, #96
 882 005e 0093     		str	r3, [sp]
 511:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 883              		.loc 1 511 0
 884 0060 3223     		movs	r3, #50
 885 0062 0193     		str	r3, [sp, #4]
 512:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 886              		.loc 1 512 0
 887 0064 0294     		str	r4, [sp, #8]
 513:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 888              		.loc 1 513 0
 889 0066 0494     		str	r4, [sp, #16]
 514:Src/main.c    ****   {
 890              		.loc 1 514 0
 891 0068 2246     		mov	r2, r4
 892 006a 6946     		mov	r1, sp
 893 006c 2846     		mov	r0, r5
 894 006e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 895              	.LVL37:
 521:Src/main.c    **** }
 896              		.loc 1 521 0
 897 0072 2846     		mov	r0, r5
 898 0074 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 899              	.LVL38:
 522:Src/main.c    **** 
 900              		.loc 1 522 0
ARM GAS  /tmp/ccaWiAmD.s 			page 31


 901 0078 0FB0     		add	sp, sp, #60
 902              	.LCFI21:
 903              		.cfi_def_cfa_offset 12
 904              		@ sp needed
 905 007a 30BD     		pop	{r4, r5, pc}
 906              	.L38:
 907              		.align	2
 908              	.L37:
 909 007c 00000000 		.word	htim3
 910 0080 00040040 		.word	1073742848
 911              		.cfi_endproc
 912              	.LFE157:
 914              		.section	.text.SystemClock_Config,"ax",%progbits
 915              		.align	1
 916              		.global	SystemClock_Config
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv5-d16
 922              	SystemClock_Config:
 923              	.LFB151:
 212:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 924              		.loc 1 212 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 224
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928 0000 30B5     		push	{r4, r5, lr}
 929              	.LCFI22:
 930              		.cfi_def_cfa_offset 12
 931              		.cfi_offset 4, -12
 932              		.cfi_offset 5, -8
 933              		.cfi_offset 14, -4
 934 0002 B9B0     		sub	sp, sp, #228
 935              	.LCFI23:
 936              		.cfi_def_cfa_offset 240
 213:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 937              		.loc 1 213 0
 938 0004 3422     		movs	r2, #52
 939 0006 0021     		movs	r1, #0
 940 0008 2BA8     		add	r0, sp, #172
 941 000a FFF7FEFF 		bl	memset
 942              	.LVL39:
 214:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 943              		.loc 1 214 0
 944 000e 0024     		movs	r4, #0
 945 0010 2694     		str	r4, [sp, #152]
 946 0012 2794     		str	r4, [sp, #156]
 947 0014 2894     		str	r4, [sp, #160]
 948 0016 2994     		str	r4, [sp, #164]
 949 0018 2A94     		str	r4, [sp, #168]
 215:Src/main.c    **** 
 950              		.loc 1 215 0
 951 001a 9022     		movs	r2, #144
 952 001c 2146     		mov	r1, r4
 953 001e 02A8     		add	r0, sp, #8
 954 0020 FFF7FEFF 		bl	memset
 955              	.LVL40:
ARM GAS  /tmp/ccaWiAmD.s 			page 32


 956              	.LBB8:
 219:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 957              		.loc 1 219 0
 958 0024 1E4B     		ldr	r3, .L41
 959 0026 1A6C     		ldr	r2, [r3, #64]
 960 0028 42F08052 		orr	r2, r2, #268435456
 961 002c 1A64     		str	r2, [r3, #64]
 962 002e 1B6C     		ldr	r3, [r3, #64]
 963 0030 03F08053 		and	r3, r3, #268435456
 964 0034 0093     		str	r3, [sp]
 965 0036 009B     		ldr	r3, [sp]
 966              	.LBE8:
 967              	.LBB9:
 220:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 968              		.loc 1 220 0
 969 0038 1A4B     		ldr	r3, .L41+4
 970 003a 1A68     		ldr	r2, [r3]
 971 003c 42F44042 		orr	r2, r2, #49152
 972 0040 1A60     		str	r2, [r3]
 973 0042 1B68     		ldr	r3, [r3]
 974 0044 03F44043 		and	r3, r3, #49152
 975 0048 0193     		str	r3, [sp, #4]
 976 004a 019B     		ldr	r3, [sp, #4]
 977              	.LBE9:
 223:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 978              		.loc 1 223 0
 979 004c 0225     		movs	r5, #2
 980 004e 2B95     		str	r5, [sp, #172]
 224:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 981              		.loc 1 224 0
 982 0050 0123     		movs	r3, #1
 983 0052 2E93     		str	r3, [sp, #184]
 225:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 984              		.loc 1 225 0
 985 0054 1023     		movs	r3, #16
 986 0056 2F93     		str	r3, [sp, #188]
 226:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 987              		.loc 1 226 0
 988 0058 3195     		str	r5, [sp, #196]
 227:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 989              		.loc 1 227 0
 990 005a 3294     		str	r4, [sp, #200]
 228:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 991              		.loc 1 228 0
 992 005c 0823     		movs	r3, #8
 993 005e 3393     		str	r3, [sp, #204]
 229:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 994              		.loc 1 229 0
 995 0060 D823     		movs	r3, #216
 996 0062 3493     		str	r3, [sp, #208]
 230:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 997              		.loc 1 230 0
 998 0064 3595     		str	r5, [sp, #212]
 231:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 999              		.loc 1 231 0
 1000 0066 3695     		str	r5, [sp, #216]
 232:Src/main.c    ****   {
ARM GAS  /tmp/ccaWiAmD.s 			page 33


 1001              		.loc 1 232 0
 1002 0068 2BA8     		add	r0, sp, #172
 1003 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1004              	.LVL41:
 238:Src/main.c    ****   {
 1005              		.loc 1 238 0
 1006 006e FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1007              	.LVL42:
 244:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1008              		.loc 1 244 0
 1009 0072 0F23     		movs	r3, #15
 1010 0074 2693     		str	r3, [sp, #152]
 245:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1011              		.loc 1 245 0
 1012 0076 2795     		str	r5, [sp, #156]
 246:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1013              		.loc 1 246 0
 1014 0078 2894     		str	r4, [sp, #160]
 247:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1015              		.loc 1 247 0
 1016 007a 4FF4A053 		mov	r3, #5120
 1017 007e 2993     		str	r3, [sp, #164]
 248:Src/main.c    **** 
 1018              		.loc 1 248 0
 1019 0080 4FF48053 		mov	r3, #4096
 1020 0084 2A93     		str	r3, [sp, #168]
 250:Src/main.c    ****   {
 1021              		.loc 1 250 0
 1022 0086 0721     		movs	r1, #7
 1023 0088 26A8     		add	r0, sp, #152
 1024 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1025              	.LVL43:
 254:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 1026              		.loc 1 254 0
 1027 008e 4FF48073 		mov	r3, #256
 1028 0092 0293     		str	r3, [sp, #8]
 255:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1029              		.loc 1 255 0
 1030 0094 1594     		str	r4, [sp, #84]
 256:Src/main.c    ****   {
 1031              		.loc 1 256 0
 1032 0096 02A8     		add	r0, sp, #8
 1033 0098 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1034              	.LVL44:
 260:Src/main.c    **** 
 1035              		.loc 1 260 0
 1036 009c 39B0     		add	sp, sp, #228
 1037              	.LCFI24:
 1038              		.cfi_def_cfa_offset 12
 1039              		@ sp needed
 1040 009e 30BD     		pop	{r4, r5, pc}
 1041              	.L42:
 1042              		.align	2
 1043              	.L41:
 1044 00a0 00380240 		.word	1073887232
 1045 00a4 00700040 		.word	1073770496
 1046              		.cfi_endproc
ARM GAS  /tmp/ccaWiAmD.s 			page 34


 1047              	.LFE151:
 1049              		.section	.text.user_pwm_setvalue,"ax",%progbits
 1050              		.align	1
 1051              		.global	user_pwm_setvalue
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1055              		.fpu fpv5-d16
 1057              	user_pwm_setvalue:
 1058              	.LFB162:
 681:Src/main.c    **** 
 682:Src/main.c    **** /* USER CODE BEGIN 4 */
 683:Src/main.c    **** 
 684:Src/main.c    **** void user_pwm_setvalue(uint32_t value, TIM_HandleTypeDef *htim, uint32_t Channel)
 685:Src/main.c    **** {
 1059              		.loc 1 685 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 32
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              	.LVL45:
 1064 0000 70B5     		push	{r4, r5, r6, lr}
 1065              	.LCFI25:
 1066              		.cfi_def_cfa_offset 16
 1067              		.cfi_offset 4, -16
 1068              		.cfi_offset 5, -12
 1069              		.cfi_offset 6, -8
 1070              		.cfi_offset 14, -4
 1071 0002 88B0     		sub	sp, sp, #32
 1072              	.LCFI26:
 1073              		.cfi_def_cfa_offset 48
 1074 0004 0646     		mov	r6, r0
 1075 0006 0C46     		mov	r4, r1
 1076 0008 1546     		mov	r5, r2
 686:Src/main.c    ****   HAL_TIM_PWM_Stop(htim, Channel);
 1077              		.loc 1 686 0
 1078 000a 1146     		mov	r1, r2
 1079              	.LVL46:
 1080 000c 2046     		mov	r0, r4
 1081              	.LVL47:
 1082 000e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 1083              	.LVL48:
 687:Src/main.c    **** 
 688:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 689:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 1084              		.loc 1 689 0
 1085 0012 6023     		movs	r3, #96
 1086 0014 0193     		str	r3, [sp, #4]
 690:Src/main.c    ****   sConfigOC.Pulse = value;
 1087              		.loc 1 690 0
 1088 0016 0296     		str	r6, [sp, #8]
 691:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1089              		.loc 1 691 0
 1090 0018 0023     		movs	r3, #0
 1091 001a 0393     		str	r3, [sp, #12]
 692:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1092              		.loc 1 692 0
 1093 001c 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/ccaWiAmD.s 			page 35


 693:Src/main.c    **** 
 694:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, Channel);
 1094              		.loc 1 694 0
 1095 001e 2A46     		mov	r2, r5
 1096 0020 01A9     		add	r1, sp, #4
 1097 0022 2046     		mov	r0, r4
 1098 0024 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1099              	.LVL49:
 695:Src/main.c    ****   HAL_TIM_PWM_Start(htim, Channel);
 1100              		.loc 1 695 0
 1101 0028 2946     		mov	r1, r5
 1102 002a 2046     		mov	r0, r4
 1103 002c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1104              	.LVL50:
 696:Src/main.c    **** }
 1105              		.loc 1 696 0
 1106 0030 08B0     		add	sp, sp, #32
 1107              	.LCFI27:
 1108              		.cfi_def_cfa_offset 16
 1109              		@ sp needed
 1110 0032 70BD     		pop	{r4, r5, r6, pc}
 1111              		.cfi_endproc
 1112              	.LFE162:
 1114              		.section	.text.loading,"ax",%progbits
 1115              		.align	1
 1116              		.global	loading
 1117              		.syntax unified
 1118              		.thumb
 1119              		.thumb_func
 1120              		.fpu fpv5-d16
 1122              	loading:
 1123              	.LFB163:
 697:Src/main.c    **** 
 698:Src/main.c    **** void loading()
 699:Src/main.c    **** {
 1124              		.loc 1 699 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 0
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
 1128 0000 10B5     		push	{r4, lr}
 1129              	.LCFI28:
 1130              		.cfi_def_cfa_offset 8
 1131              		.cfi_offset 4, -8
 1132              		.cfi_offset 14, -4
 1133              	.LVL51:
 700:Src/main.c    ****   int delay = 100;
 701:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 1134              		.loc 1 701 0
 1135 0002 254C     		ldr	r4, .L47
 1136 0004 0122     		movs	r2, #1
 1137 0006 4FF40061 		mov	r1, #2048
 1138 000a 2046     		mov	r0, r4
 1139 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1140              	.LVL52:
 702:Src/main.c    ****   HAL_Delay(delay);
 1141              		.loc 1 702 0
 1142 0010 6420     		movs	r0, #100
ARM GAS  /tmp/ccaWiAmD.s 			page 36


 1143 0012 FFF7FEFF 		bl	HAL_Delay
 1144              	.LVL53:
 703:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 1145              		.loc 1 703 0
 1146 0016 0122     		movs	r2, #1
 1147 0018 4FF48051 		mov	r1, #4096
 1148 001c 2046     		mov	r0, r4
 1149 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1150              	.LVL54:
 704:Src/main.c    ****   HAL_Delay(delay);
 1151              		.loc 1 704 0
 1152 0022 6420     		movs	r0, #100
 1153 0024 FFF7FEFF 		bl	HAL_Delay
 1154              	.LVL55:
 705:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 1155              		.loc 1 705 0
 1156 0028 0122     		movs	r2, #1
 1157 002a 4FF40051 		mov	r1, #8192
 1158 002e 2046     		mov	r0, r4
 1159 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1160              	.LVL56:
 706:Src/main.c    ****   HAL_Delay(delay);
 1161              		.loc 1 706 0
 1162 0034 6420     		movs	r0, #100
 1163 0036 FFF7FEFF 		bl	HAL_Delay
 1164              	.LVL57:
 707:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 1165              		.loc 1 707 0
 1166 003a 0122     		movs	r2, #1
 1167 003c 4FF48041 		mov	r1, #16384
 1168 0040 2046     		mov	r0, r4
 1169 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1170              	.LVL58:
 708:Src/main.c    ****   HAL_Delay(delay * 3);
 1171              		.loc 1 708 0
 1172 0046 4FF49670 		mov	r0, #300
 1173 004a FFF7FEFF 		bl	HAL_Delay
 1174              	.LVL59:
 709:Src/main.c    **** 
 710:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 1175              		.loc 1 710 0
 1176 004e 0022     		movs	r2, #0
 1177 0050 4FF40061 		mov	r1, #2048
 1178 0054 2046     		mov	r0, r4
 1179 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1180              	.LVL60:
 711:Src/main.c    ****   HAL_Delay(delay);
 1181              		.loc 1 711 0
 1182 005a 6420     		movs	r0, #100
 1183 005c FFF7FEFF 		bl	HAL_Delay
 1184              	.LVL61:
 712:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 1185              		.loc 1 712 0
 1186 0060 0022     		movs	r2, #0
 1187 0062 4FF48051 		mov	r1, #4096
 1188 0066 2046     		mov	r0, r4
 1189 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccaWiAmD.s 			page 37


 1190              	.LVL62:
 713:Src/main.c    ****   HAL_Delay(delay);
 1191              		.loc 1 713 0
 1192 006c 6420     		movs	r0, #100
 1193 006e FFF7FEFF 		bl	HAL_Delay
 1194              	.LVL63:
 714:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 1195              		.loc 1 714 0
 1196 0072 0022     		movs	r2, #0
 1197 0074 4FF40051 		mov	r1, #8192
 1198 0078 2046     		mov	r0, r4
 1199 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1200              	.LVL64:
 715:Src/main.c    ****   HAL_Delay(delay);
 1201              		.loc 1 715 0
 1202 007e 6420     		movs	r0, #100
 1203 0080 FFF7FEFF 		bl	HAL_Delay
 1204              	.LVL65:
 716:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 1205              		.loc 1 716 0
 1206 0084 0022     		movs	r2, #0
 1207 0086 4FF48041 		mov	r1, #16384
 1208 008a 2046     		mov	r0, r4
 1209 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1210              	.LVL66:
 717:Src/main.c    ****   HAL_Delay(delay);
 1211              		.loc 1 717 0
 1212 0090 6420     		movs	r0, #100
 1213 0092 FFF7FEFF 		bl	HAL_Delay
 1214              	.LVL67:
 1215 0096 10BD     		pop	{r4, pc}
 1216              	.L48:
 1217              		.align	2
 1218              	.L47:
 1219 0098 00100240 		.word	1073876992
 1220              		.cfi_endproc
 1221              	.LFE163:
 1223              		.section	.text.CAN_Read_Message,"ax",%progbits
 1224              		.align	1
 1225              		.global	CAN_Read_Message
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv5-d16
 1231              	CAN_Read_Message:
 1232              	.LFB164:
 718:Src/main.c    **** }
 719:Src/main.c    **** 
 720:Src/main.c    **** int CAN_Read_Message(canStruct *can)
 721:Src/main.c    **** {
 1233              		.loc 1 721 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 0
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237              		@ link register save eliminated.
 1238              	.LVL68:
 1239              	.LVL69:
ARM GAS  /tmp/ccaWiAmD.s 			page 38


 722:Src/main.c    ****   switch (can->rx_id)
 723:Src/main.c    ****   {
 724:Src/main.c    ****   case INV_LEFT_ASK_ID:
 725:Src/main.c    ****     if (can->dataRx[0] == 0x4A)
 726:Src/main.c    ****     { // Inverter left temperature
 727:Src/main.c    ****       // invLeftTemp = can->dataRx[1] + (can->dataRx[2] << 8);
 728:Src/main.c    ****       // inverterLeftTemp = (invLeftTemp - 15797) / 112.12;
 729:Src/main.c    ****     }
 730:Src/main.c    ****     else if (can->dataRx[0] == 0x49)
 731:Src/main.c    ****     { // Motor left temperature
 732:Src/main.c    ****       // motLeftTemp = can->dataRx[1] + (can->dataRx[2] << 8);
 733:Src/main.c    ****       // motorLeftTemp = (motLeftTemp - 9394) / 55.10;
 734:Src/main.c    ****     }
 735:Src/main.c    ****     break;
 736:Src/main.c    ****   case INV_RIGHT_ASK_ID:
 737:Src/main.c    ****     if (can->dataRx[0] == 0x4A)
 738:Src/main.c    ****     { // Inverter right temperature
 739:Src/main.c    ****       // invRightTemp = can->dataRx[1] + (can->dataRx[2] << 8);
 740:Src/main.c    ****       // inverterRightTemp = (invLeftTemp - 15797) / 112.12;
 741:Src/main.c    ****     }
 742:Src/main.c    ****     else if (can->dataRx[0] == 0x49)
 743:Src/main.c    ****     { // Motor right temperature
 744:Src/main.c    ****       // motRightTemp = can->dataRx[1] + (can->dataRx[2] << 8);
 745:Src/main.c    ****       // motorRightTemp = (motLeftTemp - 9394) / 55.10;
 746:Src/main.c    ****     }
 747:Src/main.c    ****     break;
 748:Src/main.c    ****   case STEER_ASK_ID:
 749:Src/main.c    ****     if (can->dataRx[0] == 0)
 750:Src/main.c    ****     {
 751:Src/main.c    ****       // overridePID = RxData[1]; // 1 - override PID
 752:Src/main.c    ****     }
 753:Src/main.c    ****     else if (can->dataRx[0] == 1)
 754:Src/main.c    ****     {
 755:Src/main.c    ****       // overridePID = RxData[1];
 756:Src/main.c    ****       // pumpRequest = RxData[2];
 757:Src/main.c    ****     }
 758:Src/main.c    ****     else if (can->dataRx[0] == 2)
 759:Src/main.c    ****     {
 760:Src/main.c    ****       // overridePID = RxData[1];
 761:Src/main.c    ****       // fanRequest = RxData[2];
 762:Src/main.c    ****     }
 763:Src/main.c    ****     else if (can->dataRx[0] == 3 && can->dataRx[1] == 1)
 764:Src/main.c    ****     {
 765:Src/main.c    ****       // overridePID = 2;
 766:Src/main.c    ****     }
 767:Src/main.c    ****     break;
 768:Src/main.c    ****   case ACC_TEMP_ASK_ID:
 769:Src/main.c    ****     if (can->dataRx[0] == 6)
 770:Src/main.c    ****     { // Little endian
 771:Src/main.c    ****       // tmpHvAvgTemp = can->dataRx[5] + (can->dataRx[4] << 8);
 772:Src/main.c    ****       // hvAvgTemp = tmpHvAvgTemp / 100.0;
 773:Src/main.c    ****     }
 774:Src/main.c    ****     else if (can->dataRx[0] == 6)
 775:Src/main.c    ****     {
 776:Src/main.c    ****       // tmpHvMaxTemp = can->dataRx[7] + (can->dataRx[6] << 8);
 777:Src/main.c    ****       // hvMaxTemp = tmpHvMaxTemp / 100.0;
 778:Src/main.c    ****     }
ARM GAS  /tmp/ccaWiAmD.s 			page 39


 779:Src/main.c    ****     break;
 780:Src/main.c    ****   case ECU_ASK_ID:
 781:Src/main.c    ****     break;
 782:Src/main.c    ****   case BMS_LV_ASK_ID:
 783:Src/main.c    ****     break;
 784:Src/main.c    **** 
 785:Src/main.c    ****   default:
 786:Src/main.c    ****     break;
 787:Src/main.c    ****   }
 788:Src/main.c    **** }
 1240              		.loc 1 788 0
 1241 0000 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE164:
 1245              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1246              		.align	1
 1247              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1248              		.syntax unified
 1249              		.thumb
 1250              		.thumb_func
 1251              		.fpu fpv5-d16
 1253              	HAL_CAN_RxFifo0MsgPendingCallback:
 1254              	.LFB165:
 789:Src/main.c    **** 
 790:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 791:Src/main.c    **** {
 1255              		.loc 1 791 0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 32
 1258              		@ frame_needed = 0, uses_anonymous_args = 0
 1259              	.LVL70:
 792:Src/main.c    ****   if (hcan == can.hcan)
 1260              		.loc 1 792 0
 1261 0000 0F4B     		ldr	r3, .L58
 1262 0002 1B6A     		ldr	r3, [r3, #32]
 1263 0004 8342     		cmp	r3, r0
 1264 0006 00D0     		beq	.L56
 1265 0008 7047     		bx	lr
 1266              	.L56:
 791:Src/main.c    ****   if (hcan == can.hcan)
 1267              		.loc 1 791 0
 1268 000a 30B5     		push	{r4, r5, lr}
 1269              	.LCFI29:
 1270              		.cfi_def_cfa_offset 12
 1271              		.cfi_offset 4, -12
 1272              		.cfi_offset 5, -8
 1273              		.cfi_offset 14, -4
 1274 000c 89B0     		sub	sp, sp, #36
 1275              	.LCFI30:
 1276              		.cfi_def_cfa_offset 48
 793:Src/main.c    ****   {
 794:Src/main.c    ****     if (HAL_CAN_GetRxFifoFillLevel(can.hcan, CAN_RX_FIFO0) != 0)
 1277              		.loc 1 794 0
 1278 000e 0021     		movs	r1, #0
 1279 0010 1846     		mov	r0, r3
 1280              	.LVL71:
 1281 0012 FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
ARM GAS  /tmp/ccaWiAmD.s 			page 40


 1282              	.LVL72:
 1283 0016 08B9     		cbnz	r0, .L57
 1284              	.L50:
 795:Src/main.c    ****     {
 796:Src/main.c    ****       CAN_RxHeaderTypeDef header;
 797:Src/main.c    **** 
 798:Src/main.c    ****       HAL_CAN_GetRxMessage(can.hcan, CAN_RX_FIFO0, &header,
 799:Src/main.c    ****                            can.dataRx);
 800:Src/main.c    **** 
 801:Src/main.c    ****       can.rx_id = header.StdId;
 802:Src/main.c    ****       can.rx_size = header.DLC;
 803:Src/main.c    ****       can.recieved_flag = 1;
 804:Src/main.c    ****     }
 805:Src/main.c    ****   }
 806:Src/main.c    **** }
 1285              		.loc 1 806 0
 1286 0018 09B0     		add	sp, sp, #36
 1287              	.LCFI31:
 1288              		.cfi_remember_state
 1289              		.cfi_def_cfa_offset 12
 1290              		@ sp needed
 1291 001a 30BD     		pop	{r4, r5, pc}
 1292              	.L57:
 1293              	.LCFI32:
 1294              		.cfi_restore_state
 1295              	.LBB10:
 798:Src/main.c    ****                            can.dataRx);
 1296              		.loc 1 798 0
 1297 001c 094D     		ldr	r5, .L58+4
 1298 001e 2B46     		mov	r3, r5
 1299 0020 01AA     		add	r2, sp, #4
 1300 0022 0021     		movs	r1, #0
 1301 0024 A868     		ldr	r0, [r5, #8]
 1302 0026 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1303              	.LVL73:
 801:Src/main.c    ****       can.rx_size = header.DLC;
 1304              		.loc 1 801 0
 1305 002a 019B     		ldr	r3, [sp, #4]
 1306 002c 45F80C3C 		str	r3, [r5, #-12]
 802:Src/main.c    ****       can.recieved_flag = 1;
 1307              		.loc 1 802 0
 1308 0030 059B     		ldr	r3, [sp, #20]
 1309 0032 45F8183C 		str	r3, [r5, #-24]
 803:Src/main.c    ****     }
 1310              		.loc 1 803 0
 1311 0036 0123     		movs	r3, #1
 1312 0038 45F8103C 		str	r3, [r5, #-16]
 1313              	.LBE10:
 1314              		.loc 1 806 0
 1315 003c ECE7     		b	.L50
 1316              	.L59:
 1317 003e 00BF     		.align	2
 1318              	.L58:
 1319 0040 00000000 		.word	can
 1320 0044 18000000 		.word	can+24
 1321              		.cfi_endproc
 1322              	.LFE165:
ARM GAS  /tmp/ccaWiAmD.s 			page 41


 1324              		.section	.text.CAN_initialization,"ax",%progbits
 1325              		.align	1
 1326              		.global	CAN_initialization
 1327              		.syntax unified
 1328              		.thumb
 1329              		.thumb_func
 1330              		.fpu fpv5-d16
 1332              	CAN_initialization:
 1333              	.LFB166:
 807:Src/main.c    **** 
 808:Src/main.c    **** uint8_t CAN_initialization(canStruct *can)
 809:Src/main.c    **** {
 1334              		.loc 1 809 0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
 1338              	.LVL74:
 1339 0000 10B5     		push	{r4, lr}
 1340              	.LCFI33:
 1341              		.cfi_def_cfa_offset 8
 1342              		.cfi_offset 4, -8
 1343              		.cfi_offset 14, -4
 1344 0002 0446     		mov	r4, r0
 810:Src/main.c    ****   // CAN filter initialization
 811:Src/main.c    ****   can->canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 1345              		.loc 1 811 0
 1346 0004 0023     		movs	r3, #0
 1347 0006 C363     		str	r3, [r0, #60]
 812:Src/main.c    ****   can->canFilter.FilterIdLow = 0;
 1348              		.loc 1 812 0
 1349 0008 8362     		str	r3, [r0, #40]
 813:Src/main.c    ****   can->canFilter.FilterIdHigh = 0;
 1350              		.loc 1 813 0
 1351 000a 4362     		str	r3, [r0, #36]
 814:Src/main.c    ****   can->canFilter.FilterMaskIdHigh = 0;
 1352              		.loc 1 814 0
 1353 000c C362     		str	r3, [r0, #44]
 815:Src/main.c    ****   can->canFilter.FilterMaskIdLow = 0;
 1354              		.loc 1 815 0
 1355 000e 0363     		str	r3, [r0, #48]
 816:Src/main.c    ****   can->canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 1356              		.loc 1 816 0
 1357 0010 4363     		str	r3, [r0, #52]
 817:Src/main.c    ****   can->canFilter.FilterBank = 0;
 1358              		.loc 1 817 0
 1359 0012 8363     		str	r3, [r0, #56]
 818:Src/main.c    ****   can->canFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 1360              		.loc 1 818 0
 1361 0014 0364     		str	r3, [r0, #64]
 819:Src/main.c    ****   can->canFilter.FilterActivation = ENABLE;
 1362              		.loc 1 819 0
 1363 0016 0123     		movs	r3, #1
 1364 0018 4364     		str	r3, [r0, #68]
 820:Src/main.c    **** 
 821:Src/main.c    ****   // CAN filter configuration
 822:Src/main.c    ****   can->configFilter_status = HAL_CAN_ConfigFilter(can->hcan, &can->canFilter);
 1365              		.loc 1 822 0
ARM GAS  /tmp/ccaWiAmD.s 			page 42


 1366 001a 00F12401 		add	r1, r0, #36
 1367 001e 006A     		ldr	r0, [r0, #32]
 1368              	.LVL75:
 1369 0020 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1370              	.LVL76:
 1371 0024 84F84C00 		strb	r0, [r4, #76]
 823:Src/main.c    **** 
 824:Src/main.c    ****   can->activateNotif_status =
 825:Src/main.c    ****       HAL_CAN_ActivateNotification(can->hcan, CAN2_RX0_IRQn);
 1372              		.loc 1 825 0
 1373 0028 4021     		movs	r1, #64
 1374 002a 206A     		ldr	r0, [r4, #32]
 1375 002c FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1376              	.LVL77:
 824:Src/main.c    ****       HAL_CAN_ActivateNotification(can->hcan, CAN2_RX0_IRQn);
 1377              		.loc 1 824 0
 1378 0030 84F84D00 		strb	r0, [r4, #77]
 826:Src/main.c    ****   can->activateNotif_status =
 827:Src/main.c    ****       HAL_CAN_ActivateNotification(can->hcan, CAN2_RX1_IRQn);
 1379              		.loc 1 827 0
 1380 0034 4121     		movs	r1, #65
 1381 0036 206A     		ldr	r0, [r4, #32]
 1382 0038 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1383              	.LVL78:
 826:Src/main.c    ****   can->activateNotif_status =
 1384              		.loc 1 826 0
 1385 003c 84F84D00 		strb	r0, [r4, #77]
 828:Src/main.c    **** 
 829:Src/main.c    ****   // CAN start
 830:Src/main.c    ****   can->canStart_status = HAL_CAN_Start(can->hcan);
 1386              		.loc 1 830 0
 1387 0040 206A     		ldr	r0, [r4, #32]
 1388 0042 FFF7FEFF 		bl	HAL_CAN_Start
 1389              	.LVL79:
 1390 0046 84F84E00 		strb	r0, [r4, #78]
 831:Src/main.c    **** 
 832:Src/main.c    ****   if (can->configFilter_status == HAL_OK &&
 833:Src/main.c    ****       can->activateNotif_status == HAL_OK && can->canStart_status == HAL_OK)
 1391              		.loc 1 833 0
 1392 004a E36C     		ldr	r3, [r4, #76]
 832:Src/main.c    ****       can->activateNotif_status == HAL_OK && can->canStart_status == HAL_OK)
 1393              		.loc 1 832 0
 1394 004c 33F07F43 		bics	r3, r3, #-16777216
 1395 0050 01D0     		beq	.L64
 834:Src/main.c    ****     return 0; // no errors occurred
 835:Src/main.c    ****   else
 836:Src/main.c    ****     return 1;
 1396              		.loc 1 836 0
 1397 0052 0120     		movs	r0, #1
 837:Src/main.c    **** }
 1398              		.loc 1 837 0
 1399 0054 10BD     		pop	{r4, pc}
 1400              	.LVL80:
 1401              	.L64:
 834:Src/main.c    ****     return 0; // no errors occurred
 1402              		.loc 1 834 0
 1403 0056 0020     		movs	r0, #0
ARM GAS  /tmp/ccaWiAmD.s 			page 43


 1404 0058 10BD     		pop	{r4, pc}
 1405              		.cfi_endproc
 1406              	.LFE166:
 1408              		.section	.text.main,"ax",%progbits
 1409              		.align	1
 1410              		.global	main
 1411              		.syntax unified
 1412              		.thumb
 1413              		.thumb_func
 1414              		.fpu fpv5-d16
 1416              	main:
 1417              	.LFB150:
 122:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1418              		.loc 1 122 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 0
 1421              		@ frame_needed = 0, uses_anonymous_args = 0
 1422 0000 10B5     		push	{r4, lr}
 1423              	.LCFI34:
 1424              		.cfi_def_cfa_offset 8
 1425              		.cfi_offset 4, -8
 1426              		.cfi_offset 14, -4
 130:Src/main.c    **** 
 1427              		.loc 1 130 0
 1428 0002 FFF7FEFF 		bl	HAL_Init
 1429              	.LVL81:
 137:Src/main.c    **** 
 1430              		.loc 1 137 0
 1431 0006 FFF7FEFF 		bl	SystemClock_Config
 1432              	.LVL82:
 144:Src/main.c    ****   MX_CAN1_Init();
 1433              		.loc 1 144 0
 1434 000a FFF7FEFF 		bl	MX_GPIO_Init
 1435              	.LVL83:
 145:Src/main.c    ****   MX_USART3_UART_Init();
 1436              		.loc 1 145 0
 1437 000e FFF7FEFF 		bl	MX_CAN1_Init
 1438              	.LVL84:
 146:Src/main.c    ****   MX_ADC1_Init();
 1439              		.loc 1 146 0
 1440 0012 FFF7FEFF 		bl	MX_USART3_UART_Init
 1441              	.LVL85:
 147:Src/main.c    ****   MX_SPI2_Init();
 1442              		.loc 1 147 0
 1443 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1444              	.LVL86:
 148:Src/main.c    ****   MX_DMA_Init();
 1445              		.loc 1 148 0
 1446 001a FFF7FEFF 		bl	MX_SPI2_Init
 1447              	.LVL87:
 149:Src/main.c    ****   MX_TIM4_Init();
 1448              		.loc 1 149 0
 1449 001e FFF7FEFF 		bl	MX_DMA_Init
 1450              	.LVL88:
 150:Src/main.c    ****   MX_TIM2_Init();
 1451              		.loc 1 150 0
 1452 0022 FFF7FEFF 		bl	MX_TIM4_Init
ARM GAS  /tmp/ccaWiAmD.s 			page 44


 1453              	.LVL89:
 151:Src/main.c    ****   MX_TIM3_Init();
 1454              		.loc 1 151 0
 1455 0026 FFF7FEFF 		bl	MX_TIM2_Init
 1456              	.LVL90:
 152:Src/main.c    **** 
 1457              		.loc 1 152 0
 1458 002a FFF7FEFF 		bl	MX_TIM3_Init
 1459              	.LVL91:
 155:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1460              		.loc 1 155 0
 1461 002e FFF7FEFF 		bl	MX_NVIC_Init
 1462              	.LVL92:
 159:Src/main.c    ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1463              		.loc 1 159 0
 1464 0032 0021     		movs	r1, #0
 1465 0034 1A48     		ldr	r0, .L71
 1466 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1467              	.LVL93:
 160:Src/main.c    **** 
 1468              		.loc 1 160 0
 1469 003a 0021     		movs	r1, #0
 1470 003c 1948     		ldr	r0, .L71+4
 1471 003e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1472              	.LVL94:
 163:Src/main.c    ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 1473              		.loc 1 163 0
 1474 0042 194C     		ldr	r4, .L71+8
 1475 0044 0021     		movs	r1, #0
 1476 0046 2046     		mov	r0, r4
 1477 0048 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1478              	.LVL95:
 164:Src/main.c    ****   /* USER CODE END 2 */
 1479              		.loc 1 164 0
 1480 004c 0421     		movs	r1, #4
 1481 004e 2046     		mov	r0, r4
 1482 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1483              	.LVL96:
 1484              	.LBB11:
 171:Src/main.c    ****   {
 1485              		.loc 1 171 0
 1486 0054 0024     		movs	r4, #0
 1487 0056 07E0     		b	.L66
 1488              	.LVL97:
 1489              	.L67:
 173:Src/main.c    ****     HAL_Delay(100);
 1490              		.loc 1 173 0 discriminator 3
 1491 0058 8021     		movs	r1, #128
 1492 005a 1448     		ldr	r0, .L71+12
 1493 005c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1494              	.LVL98:
 174:Src/main.c    ****   }
 1495              		.loc 1 174 0 discriminator 3
 1496 0060 6420     		movs	r0, #100
 1497 0062 FFF7FEFF 		bl	HAL_Delay
 1498              	.LVL99:
 171:Src/main.c    ****   {
ARM GAS  /tmp/ccaWiAmD.s 			page 45


 1499              		.loc 1 171 0 discriminator 3
 1500 0066 0134     		adds	r4, r4, #1
 1501              	.LVL100:
 1502              	.L66:
 171:Src/main.c    ****   {
 1503              		.loc 1 171 0 is_stmt 0 discriminator 1
 1504 0068 082C     		cmp	r4, #8
 1505 006a F5DD     		ble	.L67
 1506              	.LBE11:
 178:Src/main.c    ****   HAL_Delay(1000);
 1507              		.loc 1 178 0 is_stmt 1
 1508 006c 0122     		movs	r2, #1
 1509 006e 0821     		movs	r1, #8
 1510 0070 0E48     		ldr	r0, .L71+12
 1511 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1512              	.LVL101:
 179:Src/main.c    **** 
 1513              		.loc 1 179 0
 1514 0076 4FF47A70 		mov	r0, #1000
 1515 007a FFF7FEFF 		bl	HAL_Delay
 1516              	.LVL102:
 181:Src/main.c    **** 
 1517              		.loc 1 181 0
 1518 007e 0C48     		ldr	r0, .L71+16
 1519 0080 0C4B     		ldr	r3, .L71+20
 1520 0082 0362     		str	r3, [r0, #32]
 183:Src/main.c    **** 
 1521              		.loc 1 183 0
 1522 0084 FFF7FEFF 		bl	CAN_initialization
 1523              	.LVL103:
 185:Src/main.c    **** 
 1524              		.loc 1 185 0
 1525 0088 1021     		movs	r1, #16
 1526 008a 0B48     		ldr	r0, .L71+24
 1527 008c FFF7FEFF 		bl	set_pins
 1528              	.LVL104:
 1529              	.L68:
 198:Src/main.c    ****     {
 1530              		.loc 1 198 0
 1531 0090 074B     		ldr	r3, .L71+16
 1532 0092 9B68     		ldr	r3, [r3, #8]
 1533 0094 012B     		cmp	r3, #1
 1534 0096 FBD1     		bne	.L68
 201:Src/main.c    ****     }
 1535              		.loc 1 201 0
 1536 0098 0022     		movs	r2, #0
 1537 009a 054B     		ldr	r3, .L71+16
 1538 009c 9A60     		str	r2, [r3, #8]
 1539 009e F7E7     		b	.L68
 1540              	.L72:
 1541              		.align	2
 1542              	.L71:
 1543 00a0 00000000 		.word	htim2
 1544 00a4 00000000 		.word	htim3
 1545 00a8 00000000 		.word	htim4
 1546 00ac 00080240 		.word	1073874944
 1547 00b0 00000000 		.word	can
ARM GAS  /tmp/ccaWiAmD.s 			page 46


 1548 00b4 00000000 		.word	hcan1
 1549 00b8 000C0240 		.word	1073875968
 1550              		.cfi_endproc
 1551              	.LFE150:
 1553              		.section	.text.Error_Handler,"ax",%progbits
 1554              		.align	1
 1555              		.global	Error_Handler
 1556              		.syntax unified
 1557              		.thumb
 1558              		.thumb_func
 1559              		.fpu fpv5-d16
 1561              	Error_Handler:
 1562              	.LFB167:
 838:Src/main.c    **** 
 839:Src/main.c    **** /* USER CODE END 4 */
 840:Src/main.c    **** 
 841:Src/main.c    **** /**
 842:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 843:Src/main.c    ****   * @retval None
 844:Src/main.c    ****   */
 845:Src/main.c    **** void Error_Handler(void)
 846:Src/main.c    **** {
 1563              		.loc 1 846 0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 0
 1566              		@ frame_needed = 0, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 1568 0000 7047     		bx	lr
 1569              		.cfi_endproc
 1570              	.LFE167:
 1572              		.comm	can,80,4
 1573              		.comm	huart3,128,4
 1574              		.comm	htim4,64,4
 1575              		.comm	htim3,64,4
 1576              		.comm	htim2,64,4
 1577              		.comm	hspi2,100,4
 1578              		.comm	hcan1,40,4
 1579              		.comm	hdma_adc1,96,4
 1580              		.comm	hadc1,72,4
 1581              		.comm	CS_LTCn,1,1
 1582              		.comm	CS_LTCx,4,4
 1583              		.text
 1584              	.Letext0:
 1585              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1586              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1587              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1588              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1589              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1590              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1591              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1592              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1593              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1594              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1595              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1596              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc.h"
 1597              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1598              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
ARM GAS  /tmp/ccaWiAmD.s 			page 47


 1599              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1600              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1601              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1602              		.file 19 "Inc/main.h"
 1603              		.file 20 "Inc/ltc.h"
 1604              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1605              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1606              		.file 23 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
ARM GAS  /tmp/ccaWiAmD.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccaWiAmD.s:17     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccaWiAmD.s:173    .text.MX_GPIO_Init:00000000000000d8 $d
     /tmp/ccaWiAmD.s:181    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:187    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccaWiAmD.s:236    .text.MX_CAN1_Init:0000000000000034 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccaWiAmD.s:242    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:248    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccaWiAmD.s:291    .text.MX_USART3_UART_Init:0000000000000028 $d
                            *COM*:0000000000000080 huart3
     /tmp/ccaWiAmD.s:297    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:303    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccaWiAmD.s:379    .text.MX_ADC1_Init:0000000000000050 $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccaWiAmD.s:386    .text.MX_SPI2_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:392    .text.MX_SPI2_Init:0000000000000000 MX_SPI2_Init
     /tmp/ccaWiAmD.s:446    .text.MX_SPI2_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi2
     /tmp/ccaWiAmD.s:452    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:458    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccaWiAmD.s:501    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccaWiAmD.s:506    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:512    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccaWiAmD.s:558    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:564    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccaWiAmD.s:672    .text.MX_TIM4_Init:0000000000000088 $d
                            *COM*:0000000000000040 htim4
     /tmp/ccaWiAmD.s:678    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:684    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccaWiAmD.s:795    .text.MX_TIM2_Init:000000000000008c $d
                            *COM*:0000000000000040 htim2
     /tmp/ccaWiAmD.s:800    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccaWiAmD.s:806    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccaWiAmD.s:909    .text.MX_TIM3_Init:000000000000007c $d
                            *COM*:0000000000000040 htim3
     /tmp/ccaWiAmD.s:915    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccaWiAmD.s:922    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccaWiAmD.s:1044   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccaWiAmD.s:1050   .text.user_pwm_setvalue:0000000000000000 $t
     /tmp/ccaWiAmD.s:1057   .text.user_pwm_setvalue:0000000000000000 user_pwm_setvalue
     /tmp/ccaWiAmD.s:1115   .text.loading:0000000000000000 $t
     /tmp/ccaWiAmD.s:1122   .text.loading:0000000000000000 loading
     /tmp/ccaWiAmD.s:1219   .text.loading:0000000000000098 $d
     /tmp/ccaWiAmD.s:1224   .text.CAN_Read_Message:0000000000000000 $t
     /tmp/ccaWiAmD.s:1231   .text.CAN_Read_Message:0000000000000000 CAN_Read_Message
     /tmp/ccaWiAmD.s:1246   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccaWiAmD.s:1253   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccaWiAmD.s:1319   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000040 $d
                            *COM*:0000000000000050 can
     /tmp/ccaWiAmD.s:1325   .text.CAN_initialization:0000000000000000 $t
     /tmp/ccaWiAmD.s:1332   .text.CAN_initialization:0000000000000000 CAN_initialization
     /tmp/ccaWiAmD.s:1409   .text.main:0000000000000000 $t
     /tmp/ccaWiAmD.s:1416   .text.main:0000000000000000 main
     /tmp/ccaWiAmD.s:1543   .text.main:00000000000000a0 $d
ARM GAS  /tmp/ccaWiAmD.s 			page 49


     /tmp/ccaWiAmD.s:1554   .text.Error_Handler:0000000000000000 $t
     /tmp/ccaWiAmD.s:1561   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000060 hdma_adc1
                            *COM*:0000000000000001 CS_LTCn
                            *COM*:0000000000000004 CS_LTCx
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_CAN_Init
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_SPI_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_TIM_PWM_Stop
HAL_TIM_PWM_Start
HAL_Delay
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
HAL_CAN_ConfigFilter
HAL_CAN_ActivateNotification
HAL_CAN_Start
HAL_Init
HAL_GPIO_TogglePin
set_pins
